/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={170:(t,e,i)=>{(e=i(645)(!1)).push([t.id,'.maplibregl-export-list\n{\n    display: none;\n}\n\n.mapboxgl-ctrl-group .maplibregl-export-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: right;\n    width: 100%;\n    height: auto;\n}\n\n.maplibregl-export-list button.active\n{\n    font-weight: bold;\n}\n\n.maplibregl-export-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.maplibregl-export-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.maplibregl-export-control\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m422.5 99v-24c0-41.355-33.645-75-75-75h-184c-41.355 0-75 33.645-75 75v24z"/><path d="m118.5 319v122 26 15c0 16.568 13.431 30 30 30h214c16.569 0 30-13.432 30-30v-15-26-122zm177 128h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-64h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m436.5 129h-361c-41.355 0-75 33.645-75 75v120c0 41.355 33.645 75 75 75h13v-80h-9c-8.284 0-15-6.716-15-15s6.716-15 15-15h24 304 24c8.284 0 15 6.716 15 15s-6.716 15-15 15h-9v80h14c41.355 0 75-33.645 75-75v-120c0-41.355-33.645-75-75-75zm-309 94h-48c-8.284 0-15-6.716-15-15s6.716-15 15-15h48c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/></g></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\n/*\n * Hide high-res map rendering\n*/\n.hidden-map {\n    overflow: hidden;\n    height: 0;\n    width: 0;\n    position: fixed;\n}\n',""]),t.exports=e},274:(t,e,i)=>{(e=i(645)(!1)).push([t.id,".mapboxgl-map{font:12px/20px Helvetica Neue,Arial,Helvetica,sans-serif;overflow:hidden;position:relative;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mapboxgl-canvas{position:absolute;left:0;top:0}.mapboxgl-map:-webkit-full-screen{width:100%;height:100%}.mapboxgl-canary{background-color:salmon}.mapboxgl-canvas-container.mapboxgl-interactive,.mapboxgl-ctrl-group button.mapboxgl-ctrl-compass{cursor:-webkit-grab;cursor:-moz-grab;cursor:grab;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.mapboxgl-canvas-container.mapboxgl-interactive.mapboxgl-track-pointer{cursor:pointer}.mapboxgl-canvas-container.mapboxgl-interactive:active,.mapboxgl-ctrl-group button.mapboxgl-ctrl-compass:active{cursor:-webkit-grabbing;cursor:-moz-grabbing;cursor:grabbing}.mapboxgl-canvas-container.mapboxgl-touch-zoom-rotate,.mapboxgl-canvas-container.mapboxgl-touch-zoom-rotate .mapboxgl-canvas{touch-action:pan-x pan-y}.mapboxgl-canvas-container.mapboxgl-touch-drag-pan,.mapboxgl-canvas-container.mapboxgl-touch-drag-pan .mapboxgl-canvas{touch-action:pinch-zoom}.mapboxgl-canvas-container.mapboxgl-touch-zoom-rotate.mapboxgl-touch-drag-pan,.mapboxgl-canvas-container.mapboxgl-touch-zoom-rotate.mapboxgl-touch-drag-pan .mapboxgl-canvas{touch-action:none}.mapboxgl-ctrl-bottom-left,.mapboxgl-ctrl-bottom-right,.mapboxgl-ctrl-top-left,.mapboxgl-ctrl-top-right{position:absolute;pointer-events:none;z-index:2}.mapboxgl-ctrl-top-left{top:0;left:0}.mapboxgl-ctrl-top-right{top:0;right:0}.mapboxgl-ctrl-bottom-left{bottom:0;left:0}.mapboxgl-ctrl-bottom-right{right:0;bottom:0}.mapboxgl-ctrl{clear:both;pointer-events:auto;transform:translate(0)}.mapboxgl-ctrl-top-left .mapboxgl-ctrl{margin:10px 0 0 10px;float:left}.mapboxgl-ctrl-top-right .mapboxgl-ctrl{margin:10px 10px 0 0;float:right}.mapboxgl-ctrl-bottom-left .mapboxgl-ctrl{margin:0 0 10px 10px;float:left}.mapboxgl-ctrl-bottom-right .mapboxgl-ctrl{margin:0 10px 10px 0;float:right}.mapboxgl-ctrl-group{border-radius:4px;background:#fff}.mapboxgl-ctrl-group:not(:empty){-moz-box-shadow:0 0 2px rgba(0,0,0,.1);-webkit-box-shadow:0 0 2px rgba(0,0,0,.1);box-shadow:0 0 0 2px rgba(0,0,0,.1)}@media (-ms-high-contrast:active){.mapboxgl-ctrl-group:not(:empty){box-shadow:0 0 0 2px ButtonText}}.mapboxgl-ctrl-group button{width:29px;height:29px;display:block;padding:0;outline:none;border:0;box-sizing:border-box;background-color:transparent;cursor:pointer}.mapboxgl-ctrl-group button+button{border-top:1px solid #ddd}.mapboxgl-ctrl button .mapboxgl-ctrl-icon{display:block;width:100%;height:100%;background-repeat:no-repeat;background-position:50%}@media (-ms-high-contrast:active){.mapboxgl-ctrl-icon{background-color:transparent}.mapboxgl-ctrl-group button+button{border-top:1px solid ButtonText}}.mapboxgl-ctrl button::-moz-focus-inner{border:0;padding:0}.mapboxgl-ctrl-attrib-button:focus,.mapboxgl-ctrl-group button:focus{box-shadow:0 0 2px 2px #0096ff}.mapboxgl-ctrl button:disabled{cursor:not-allowed}.mapboxgl-ctrl button:disabled .mapboxgl-ctrl-icon{opacity:.25}.mapboxgl-ctrl button:not(:disabled):hover{background-color:rgba(0,0,0,.05)}.mapboxgl-ctrl-group button:focus:focus-visible{box-shadow:0 0 2px 2px #0096ff}.mapboxgl-ctrl-group button:focus:not(:focus-visible){box-shadow:none}.mapboxgl-ctrl-group button:focus:first-child{border-radius:4px 4px 0 0}.mapboxgl-ctrl-group button:focus:last-child{border-radius:0 0 4px 4px}.mapboxgl-ctrl-group button:focus:only-child{border-radius:inherit}.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-out .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-in .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z'/%3E%3C/svg%3E\")}@media (-ms-high-contrast:active){.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-out .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-in .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z'/%3E%3C/svg%3E\")}}@media (-ms-high-contrast:black-on-white){.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-out .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10 13c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h9c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-9z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-zoom-in .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M14.5 8.5c-.75 0-1.5.75-1.5 1.5v3h-3c-.75 0-1.5.75-1.5 1.5S9.25 16 10 16h3v3c0 .75.75 1.5 1.5 1.5S16 19.75 16 19v-3h3c.75 0 1.5-.75 1.5-1.5S19.75 13 19 13h-3v-3c0-.75-.75-1.5-1.5-1.5z'/%3E%3C/svg%3E\")}}.mapboxgl-ctrl button.mapboxgl-ctrl-fullscreen .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-shrink .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z'/%3E%3C/svg%3E\")}@media (-ms-high-contrast:active){.mapboxgl-ctrl button.mapboxgl-ctrl-fullscreen .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-shrink .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z'/%3E%3C/svg%3E\")}}@media (-ms-high-contrast:black-on-white){.mapboxgl-ctrl button.mapboxgl-ctrl-fullscreen .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M24 16v5.5c0 1.75-.75 2.5-2.5 2.5H16v-1l3-1.5-4-5.5 1-1 5.5 4 1.5-3h1zM6 16l1.5 3 5.5-4 1 1-4 5.5 3 1.5v1H7.5C5.75 24 5 23.25 5 21.5V16h1zm7-11v1l-3 1.5 4 5.5-1 1-5.5-4L6 13H5V7.5C5 5.75 5.75 5 7.5 5H13zm11 2.5c0-1.75-.75-2.5-2.5-2.5H16v1l3 1.5-4 5.5 1 1 5.5-4 1.5 3h1V7.5z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-shrink .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M18.5 16c-1.75 0-2.5.75-2.5 2.5V24h1l1.5-3 5.5 4 1-1-4-5.5 3-1.5v-1h-5.5zM13 18.5c0-1.75-.75-2.5-2.5-2.5H5v1l3 1.5L4 24l1 1 5.5-4 1.5 3h1v-5.5zm3-8c0 1.75.75 2.5 2.5 2.5H24v-1l-3-1.5L25 5l-1-1-5.5 4L17 5h-1v5.5zM10.5 13c1.75 0 2.5-.75 2.5-2.5V5h-1l-1.5 3L5 4 4 5l4 5.5L5 12v1h5.5z'/%3E%3C/svg%3E\")}}.mapboxgl-ctrl button.mapboxgl-ctrl-compass .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M10.5 14l4-8 4 8h-8z'/%3E%3Cpath d='M10.5 16l4 8 4-8h-8z' fill='%23ccc'/%3E%3C/svg%3E\")}@media (-ms-high-contrast:active){.mapboxgl-ctrl button.mapboxgl-ctrl-compass .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M10.5 14l4-8 4 8h-8z'/%3E%3Cpath d='M10.5 16l4 8 4-8h-8z' fill='%23999'/%3E%3C/svg%3E\")}}@media (-ms-high-contrast:black-on-white){.mapboxgl-ctrl button.mapboxgl-ctrl-compass .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 29 29' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10.5 14l4-8 4 8h-8z'/%3E%3Cpath d='M10.5 16l4 8 4-8h-8z' fill='%23ccc'/%3E%3C/svg%3E\")}}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23333'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate:disabled .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23aaa'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3Cpath d='M14 5l1 1-9 9-1-1 9-9z' fill='red'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-active .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%2333b5e5'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-active-error .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23e58978'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-background .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%2333b5e5'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-background-error .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23e54e33'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-waiting .mapboxgl-ctrl-icon{-webkit-animation:mapboxgl-spin 2s linear infinite;-moz-animation:mapboxgl-spin 2s infinite linear;-o-animation:mapboxgl-spin 2s infinite linear;-ms-animation:mapboxgl-spin 2s infinite linear;animation:mapboxgl-spin 2s linear infinite}@media (-ms-high-contrast:active){.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23fff'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate:disabled .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23999'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3Cpath d='M14 5l1 1-9 9-1-1 9-9z' fill='red'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-active .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%2333b5e5'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-active-error .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23e58978'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-background .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%2333b5e5'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate.mapboxgl-ctrl-geolocate-background-error .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23e54e33'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3C/svg%3E\")}}@media (-ms-high-contrast:black-on-white){.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3C/svg%3E\")}.mapboxgl-ctrl button.mapboxgl-ctrl-geolocate:disabled .mapboxgl-ctrl-icon{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='29' height='29' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill='%23666'%3E%3Cpath d='M10 4C9 4 9 5 9 5v.1A5 5 0 005.1 9H5s-1 0-1 1 1 1 1 1h.1A5 5 0 009 14.9v.1s0 1 1 1 1-1 1-1v-.1a5 5 0 003.9-3.9h.1s1 0 1-1-1-1-1-1h-.1A5 5 0 0011 5.1V5s0-1-1-1zm0 2.5a3.5 3.5 0 110 7 3.5 3.5 0 110-7z'/%3E%3Ccircle cx='10' cy='10' r='2'/%3E%3Cpath d='M14 5l1 1-9 9-1-1 9-9z' fill='red'/%3E%3C/svg%3E\")}}@-webkit-keyframes mapboxgl-spin{0%{-webkit-transform:rotate(0deg)}to{-webkit-transform:rotate(1turn)}}@-moz-keyframes mapboxgl-spin{0%{-moz-transform:rotate(0deg)}to{-moz-transform:rotate(1turn)}}@-o-keyframes mapboxgl-spin{0%{-o-transform:rotate(0deg)}to{-o-transform:rotate(1turn)}}@-ms-keyframes mapboxgl-spin{0%{-ms-transform:rotate(0deg)}to{-ms-transform:rotate(1turn)}}@keyframes mapboxgl-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}a.mapboxgl-ctrl-logo{width:88px;height:23px;margin:0 0 -4px -4px;display:block;background-repeat:no-repeat;cursor:pointer;overflow:hidden;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='91' height='23' fill='none'%3E%3Cpath fill-rule='evenodd' d='M17.994 16.609h-1.892l2.59-12.526h.205l3.442 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.033 5.845h-.102l-3.017-5.845-.784-1.772-.358 1.772-1.159 5.845zm2.027-3.541l-.752 3.793a1.3 1.3 0 01-1.275 1.047h-1.892a1.3 1.3 0 01-1.273-1.563l2.59-12.526a1.3 1.3 0 011.273-1.037h.205a1.3 1.3 0 011.159.71l3.305 6.496 3.235-6.486a1.3 1.3 0 011.163-.72h.188a1.3 1.3 0 011.271 1.027l1.494 6.948c.086-.28.194-.552.325-.814l.009-.017a4.788 4.788 0 011.841-1.954c.81-.477 1.727-.691 2.704-.691a4.71 4.71 0 011.761.332l.316.138c.218-.166.491-.265.786-.265h1.755a1.3 1.3 0 011.255.958 1.3 1.3 0 011.255-.958h1.772c.294 0 .564.097.782.261.635-.31 1.358-.466 2.149-.466 1.404 0 2.648.461 3.606 1.449.325.331.586.701.79 1.103v-5.75a1.3 1.3 0 011.3-1.3h1.926a1.3 1.3 0 011.3 1.3v9.522h2.296a1.3 1.3 0 01.551.122V8.786c0-.368.153-.701.399-.937a2.503 2.503 0 01-.706-1.772c0-.688.276-1.297.761-1.759.498-.474 1.122-.699 1.783-.699s1.276.233 1.766.699c.219.208.395.446.522.707v-.942a1.3 1.3 0 011.3-1.3h1.806a1.3 1.3 0 011.3 1.3v3.454a4.93 4.93 0 011.58-.255c.971 0 1.882.222 2.683.715a4.63 4.63 0 011.729 1.805V8.786a1.3 1.3 0 011.3-1.3h1.841c.241 0 .467.066.661.18a3.529 3.529 0 011.623-.385c.359 0 .892.02 1.331.24a1.3 1.3 0 01.713 1.04c.268-.232.563-.436.884-.609.823-.456 1.735-.67 2.702-.67 1.435 0 2.745.404 3.651 1.446.866.971 1.21 2.25 1.21 3.654 0 .355-.02.718-.058 1.088a1.3 1.3 0 01-.981 1.129l.423.986a1.3 1.3 0 01-.494 1.607c-.433.277-.953.479-1.51.634-.635.177-1.351.252-2.122.252-1.097 0-2.116-.214-2.989-.722l-.015-.009c-.827-.496-1.47-1.175-1.883-2.033l-.004-.008a6.022 6.022 0 01-.568-2.601c0-.297.018-.588.055-.873a1.3 1.3 0 01-.345-.089l-.172-.005c-.231 0-.441.065-.666.236-.031.025-.147.144-.147.611v4.022a1.3 1.3 0 01-1.3 1.3h-1.841a1.3 1.3 0 01-1.3-1.3v-1.142l-.034.059a4.948 4.948 0 01-1.926 1.898 5.22 5.22 0 01-2.572.656 4.63 4.63 0 01-2.004-.439 1.297 1.297 0 01-.791.268h-1.772a1.3 1.3 0 01-1.3-1.3V7.175c-.11.233-.257.451-.443.648.262.238.426.581.426.963v7.822a1.3 1.3 0 01-1.3 1.3h-1.909c-.362 0-.69-.148-.926-.387a1.296 1.296 0 01-.926.387h-5.522a1.3 1.3 0 01-1.3-1.3v-1.296l-.064.121a4.87 4.87 0 01-1.845 1.952 4.937 4.937 0 01-2.573.694 5.8 5.8 0 01-1.538-.195l.009 2.862a1.3 1.3 0 01-1.3 1.304h-1.79a1.3 1.3 0 01-1.3-1.3v-3.663a1.3 1.3 0 01-1.209.822h-1.738c-.3 0-.577-.102-.797-.273a4.63 4.63 0 01-2.015.444 5.317 5.317 0 01-2.584-.654l-.018-.01a5.16 5.16 0 01-1.119-.866 1.3 1.3 0 01-1.299 1.359h-1.875a1.3 1.3 0 01-1.271-1.026l-.81-3.754-2.117 4.079a1.3 1.3 0 01-1.154.701h-.102a1.3 1.3 0 01-1.155-.704l-2.135-4.137zm17.145 3.368l.214-.118.231-.155c.341-.246.595-.517.761-.813l.064-.123.034 1.38h1.738V8.786h-1.755l-.034 1.312c-.091-.227-.273-.454-.545-.682l-.033-.028a3.273 3.273 0 00-.692-.444l-.28-.124a3.41 3.41 0 00-1.278-.239c-.784 0-1.466.17-2.045.511s-1.028.818-1.346 1.432c-.307.614-.46 1.329-.46 2.147 0 .829.176 1.557.528 2.182a3.93 3.93 0 001.432 1.431 4.021 4.021 0 001.96.494c.549 0 1.051-.114 1.507-.343zm-2.888-5.571c-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699a2.33 2.33 0 00.967-.197c.172-.078.334-.178.485-.301l.184-.166a2.24 2.24 0 00.411-.581c.169-.345.253-.742.253-1.191v-.119c0-.489-.102-.926-.307-1.312l-.044-.08a2.29 2.29 0 00-.656-.734l-.135-.089-.048-.029a2.173 2.173 0 00-1.111-.295c-.727 0-1.289.239-1.687.716zm2.398 2.802c.169-.176.29-.422.29-.859v-.119c0-.302-.062-.526-.156-.704-.102-.193-.223-.316-.365-.403s-.294-.132-.48-.132c-.414 0-.581.119-.688.248l-.01.012c-.154.181-.285.467-.285.979 0 .524.126.83.279 1.026.101.113.276.231.705.231.313 0 .522-.092.711-.278zm7.814 1.765a2.72 2.72 0 00.343.438c.22.228.48.417.782.568l.179.077c.448.176.962.264 1.543.264.704 0 1.341-.171 1.909-.511a3.57 3.57 0 001.363-1.449c.341-.625.511-1.346.511-2.164 0-1.318-.341-2.323-1.023-3.017-.682-.704-1.574-1.057-2.676-1.057-.62 0-1.164.12-1.631.36a2.907 2.907 0 00-.43.271l-.206.172a3.47 3.47 0 00-.664.85V8.786h-1.772V20.75h1.79l-.017-5.317zm.549-1.178c.142.2.307.372.496.518l.161.114.055.035c.352.204.739.307 1.159.307.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.3 0-.589.055-.865.166a2.45 2.45 0 00-.294.141 2.06 2.06 0 00-.376.263 2.317 2.317 0 00-.476.589l-.085.168a2.65 2.65 0 00-.221 1.11v.119c0 .488.102.926.307 1.312l.14.219zm.998-.847a1.15 1.15 0 00.38.398.97.97 0 00.493.123c.438 0 .611-.122.711-.238.165-.201.29-.496.29-.985 0-.548-.137-.827-.275-.985l-.022-.026c-.081-.098-.239-.229-.704-.229a1.03 1.03 0 00-.521.14l-.012.007a.89.89 0 00-.347.355c-.076.138-.137.336-.137.636v.119a1.48 1.48 0 00.145.684zm16.26-6.444c.239-.239.358-.534.358-.886a1.09 1.09 0 00-.358-.818 1.215 1.215 0 00-.869-.341c-.352 0-.648.114-.886.341a1.09 1.09 0 00-.358.818c0 .352.119.648.358.886s.534.358.886.358.642-.119.869-.358zm4.491 9.646l.034-1.38c.132.279.335.537.61.774l.102.084a3.86 3.86 0 00.328.232l.231.126c.451.223.948.334 1.49.334a3.92 3.92 0 001.943-.494 3.645 3.645 0 001.431-1.415c.364-.614.545-1.335.545-2.164 0-.818-.153-1.534-.46-2.147a3.35 3.35 0 00-1.329-1.449c-.568-.352-1.238-.528-2.011-.528a3.6 3.6 0 00-1.581.356l-.09.045-.17.093c-.123.07-.237.144-.342.221a2.387 2.387 0 00-.68.733 1.96 1.96 0 00-.102.205l.085-1.329V4.083h-1.806v12.526h1.772zm.49-2.598a2.57 2.57 0 00.586.725c.08.067.164.129.253.185l.15.084a2.18 2.18 0 001.009.24c.739 0 1.307-.233 1.704-.699.398-.477.596-1.091.596-1.841 0-.761-.199-1.375-.596-1.841-.386-.477-.954-.716-1.704-.716-.387 0-.737.081-1.051.243a2.205 2.205 0 00-.43.292l-.156.147a2.16 2.16 0 00-.433.615c-.155.331-.232.71-.232 1.14v.119c0 .486.101.921.303 1.305zm2.709-.304c.162-.198.289-.496.289-1.001 0-.529-.134-.819-.285-.996l-.022-.026c-.085-.105-.24-.234-.694-.234a.9.9 0 00-.705.289l-.012.012c-.16.16-.284.394-.284.836v.119c0 .295.059.516.149.692a1.17 1.17 0 00.38.42c.142.085.29.127.471.127.438 0 .611-.122.711-.238zm8.56-3.12c.239-.09.489-.139.75-.146l.071-.001c.341 0 .562.034.665.102l.256-1.858c-.135-.068-.383-.102-.743-.102-.2 0-.386.022-.564.065a2.16 2.16 0 00-.426.153c-.144.07-.282.156-.414.258a2.57 2.57 0 00-.502.517 2.754 2.754 0 00-.331.602l-.053.142V8.786h-1.841v7.822h1.841v-4.022c0-.377.055-.703.164-.977s.269-.49.483-.659a2.61 2.61 0 01.413-.262c.076-.039.153-.072.232-.102zm10.133 2.75l.051-.954c0-1.204-.295-2.136-.886-2.795-.579-.67-1.471-1.005-2.676-1.005-.773 0-1.466.17-2.079.511a3.585 3.585 0 00-1.449 1.432c-.341.625-.511 1.352-.511 2.181 0 .739.148 1.42.443 2.045.295.614.756 1.108 1.38 1.483.625.364 1.403.545 2.335.545.672 0 1.247-.064 1.727-.192l.046-.012.14-.041c.423-.127.762-.273 1.019-.437l-.562-1.312a4.12 4.12 0 01-.664.284l-.308.09c-.352.091-.801.136-1.346.136-.659 0-1.176-.153-1.551-.46a1.629 1.629 0 01-.198-.2c-.253-.304-.43-.73-.531-1.278l-.004-.022h5.624zm-5.621-1.3l-.003.022h3.886v-.143c-.008-.502-.108-.887-.298-1.157a1.093 1.093 0 00-.162-.183c-.318-.295-.773-.443-1.363-.443-.68 0-1.196.209-1.547.626-.262.31-.432.737-.512 1.278zm-28.016 2.868V4.083h-1.926v12.526h5.522v-1.704h-3.596zm7.356-6.118v7.822H60.49V8.786h1.909z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M20.295 10.763l-.784-1.772-.358 1.772-1.159 5.845h-1.892l2.591-12.526h.204l3.443 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.034 5.845h-.102l-3.016-5.845zm15.364 6.016a4.024 4.024 0 01-1.96-.494 3.93 3.93 0 01-1.431-1.432c-.352-.625-.528-1.352-.528-2.181 0-.818.153-1.534.46-2.147.318-.614.767-1.091 1.346-1.432s1.261-.511 2.045-.511a3.41 3.41 0 011.278.239 3.46 3.46 0 011.005.596c.273.227.455.454.545.682l.034-1.312h1.755v7.822H38.47l-.034-1.38c-.193.409-.545.773-1.057 1.091a3.28 3.28 0 01-1.721.46zm.307-1.534c.648 0 1.193-.222 1.636-.665.443-.455.665-1.045.665-1.772v-.119c0-.489-.102-.926-.307-1.312a2.29 2.29 0 00-.835-.903 2.173 2.173 0 00-1.159-.324c-.727 0-1.29.239-1.687.716-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699zm6.753-6.459h1.772v1.449c.625-1.102 1.602-1.653 2.931-1.653 1.102 0 1.994.352 2.676 1.057.682.693 1.023 1.699 1.023 3.017 0 .818-.17 1.54-.511 2.164a3.579 3.579 0 01-1.363 1.449 3.636 3.636 0 01-1.909.511c-.659 0-1.233-.114-1.721-.341a2.76 2.76 0 01-1.125-1.005l.017 5.317H42.72V8.786zm4.192 6.442c.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.409 0-.795.102-1.159.307a2.193 2.193 0 00-.852.852c-.204.364-.307.79-.307 1.278v.119c0 .489.102.926.307 1.312.216.375.5.67.852.886.352.204.739.307 1.159.307z' fill='%23fff'/%3E%3Cpath d='M53.119 4.083h1.926v10.822h3.596v1.704h-5.522V4.083zm7.373 4.703h1.909v7.822h-1.909V8.786zm.937-1.466a1.2 1.2 0 01-.886-.358 1.207 1.207 0 01-.358-.886 1.09 1.09 0 01.358-.818c.239-.227.534-.341.886-.341.341 0 .631.114.869.341a1.09 1.09 0 01.358.818 1.2 1.2 0 01-.358.886 1.146 1.146 0 01-.869.358zm8.156 9.459a3.28 3.28 0 01-1.721-.46c-.5-.318-.846-.682-1.04-1.091l-.034 1.38h-1.772V4.083h1.806v4.823l-.085 1.329c.193-.454.568-.841 1.125-1.159a3.61 3.61 0 011.841-.494c.773 0 1.443.176 2.011.528a3.35 3.35 0 011.329 1.449c.307.614.46 1.329.46 2.147 0 .829-.182 1.551-.545 2.164a3.645 3.645 0 01-1.431 1.415 3.92 3.92 0 01-1.943.494zm-.307-1.534c.739 0 1.306-.233 1.704-.699.398-.477.597-1.091.597-1.841 0-.761-.199-1.375-.597-1.84-.386-.477-.954-.716-1.704-.716a2.19 2.19 0 00-1.636.682c-.443.443-.665 1.028-.665 1.755v.119c0 .489.102.926.307 1.312a2.47 2.47 0 00.835.903c.352.216.739.324 1.159.324zm6.138-6.459h1.841v1.534c.182-.523.477-.943.886-1.261s.875-.477 1.397-.477c.364 0 .614.034.75.102l-.256 1.858c-.102-.068-.324-.102-.665-.102-.534 0-1.023.17-1.466.511-.432.341-.648.886-.648 1.636v4.022h-1.841V8.786zm9.874 7.993c-.932 0-1.71-.182-2.335-.545-.625-.375-1.085-.869-1.38-1.483a4.73 4.73 0 01-.443-2.045c0-.829.17-1.556.511-2.181a3.585 3.585 0 011.449-1.432c.614-.341 1.307-.511 2.079-.511 1.204 0 2.096.335 2.676 1.005.591.659.886 1.591.886 2.795 0 .307-.017.625-.051.954h-5.624c.125.693.369 1.193.733 1.5.375.307.892.46 1.551.46.545 0 .994-.046 1.346-.136a4.27 4.27 0 00.971-.375l.562 1.312c-.284.182-.67.341-1.159.477s-1.079.204-1.772.204zm1.653-4.721c.011-.704-.142-1.199-.46-1.483-.318-.295-.773-.443-1.363-.443-1.193 0-1.88.642-2.062 1.926h3.886z' fill='%23e1e3e9'/%3E%3Cg fill-rule='evenodd'%3E%3Cpath d='M8.422 15.936l-.002.002a1.595 1.595 0 01-2.08 0l-.002-.002-.045-.036-.002-.002-.206-.167H4.498a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H8.676l-.209.169-.045.036zm-1.161-.938a.3.3 0 00.118.024c.07 0 .14-.024.195-.072l.08-.065c.657-.527 4.838-3.877 4.838-7.845 0-2.641-2.293-4.79-5.113-4.79S2.266 4.399 2.266 7.04c0 3.34 2.961 6.241 4.291 7.391h.004l.041.039.502.415.08.065a.65.65 0 00.076.048zm-2.609-.567a17.5 17.5 0 01-1.225-1.362C2.23 11.582.967 9.464.967 7.039.967 3.602 3.924.95 7.38.95s6.413 2.652 6.413 6.09c0 2.424-1.263 4.543-2.46 6.029a17.5 17.5 0 01-1.225 1.362h.156a1.98 1.98 0 011.982 1.982v1.906a1.98 1.98 0 01-1.982 1.982H4.498a1.98 1.98 0 01-1.982-1.982v-1.906a1.98 1.98 0 011.982-1.982h.154zm3.955-7.182c0 .717-.568 1.266-1.228 1.266s-1.228-.548-1.228-1.266.568-1.266 1.228-1.266 1.228.548 1.228 1.266zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814zm2.12 7.985H5.262v-.868H9.5v.868z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M2.267 7.039c0-2.641 2.293-4.79 5.113-4.79s5.113 2.149 5.113 4.79c0 3.968-4.181 7.319-4.838 7.845l-.08.065c-.055.048-.125.072-.195.072s-.14-.024-.195-.072l-.08-.065c-.657-.526-4.838-3.877-4.838-7.845zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814z' fill='%23e1e3e9'/%3E%3Cpath d='M4.498 15.731a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H4.498zM9.5 16.932H5.262v.868H9.5v-.868z' fill='%23fff'/%3E%3C/g%3E%3C/svg%3E\")}a.mapboxgl-ctrl-logo.mapboxgl-compact{width:23px}@media (-ms-high-contrast:active){a.mapboxgl-ctrl-logo{background-color:transparent;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='91' height='23' fill='none'%3E%3Cpath fill-rule='evenodd' d='M17.994 16.609h-1.892l2.59-12.526h.205l3.442 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.033 5.845h-.102l-3.017-5.845-.784-1.772-.358 1.772-1.159 5.845zm2.027-3.541l-.752 3.793a1.3 1.3 0 01-1.275 1.047h-1.892a1.3 1.3 0 01-1.273-1.563l2.59-12.526a1.3 1.3 0 011.273-1.037h.205a1.3 1.3 0 011.159.71l3.305 6.496 3.235-6.486a1.3 1.3 0 011.163-.72h.188a1.3 1.3 0 011.271 1.027l1.494 6.948c.086-.28.194-.552.325-.814l.009-.017a4.788 4.788 0 011.841-1.954c.81-.477 1.727-.691 2.704-.691a4.71 4.71 0 011.761.332l.316.138c.218-.166.491-.265.786-.265h1.755a1.3 1.3 0 011.255.958 1.3 1.3 0 011.255-.958h1.772c.294 0 .564.097.782.261.635-.31 1.358-.466 2.149-.466 1.404 0 2.648.461 3.606 1.449.325.331.586.701.79 1.103v-5.75a1.3 1.3 0 011.3-1.3h1.926a1.3 1.3 0 011.3 1.3v9.522h2.296a1.3 1.3 0 01.551.122V8.786c0-.368.153-.701.399-.937a2.503 2.503 0 01-.706-1.772c0-.688.276-1.297.761-1.759.498-.474 1.122-.699 1.783-.699s1.276.233 1.766.699c.219.208.395.446.522.707v-.942a1.3 1.3 0 011.3-1.3h1.806a1.3 1.3 0 011.3 1.3v3.454a4.93 4.93 0 011.58-.255c.971 0 1.882.222 2.683.715a4.63 4.63 0 011.729 1.805V8.786a1.3 1.3 0 011.3-1.3h1.841c.241 0 .467.066.661.18a3.529 3.529 0 011.623-.385c.359 0 .892.02 1.331.24a1.3 1.3 0 01.713 1.04c.268-.232.563-.436.884-.609.823-.456 1.735-.67 2.702-.67 1.435 0 2.745.404 3.651 1.446.866.971 1.21 2.25 1.21 3.654 0 .355-.02.718-.058 1.088a1.3 1.3 0 01-.981 1.129l.423.986a1.3 1.3 0 01-.494 1.607c-.433.277-.953.479-1.51.634-.635.177-1.351.252-2.122.252-1.097 0-2.116-.214-2.989-.722l-.015-.009c-.827-.496-1.47-1.175-1.883-2.033l-.004-.008a6.022 6.022 0 01-.568-2.601c0-.297.018-.588.055-.873a1.3 1.3 0 01-.345-.089l-.172-.005c-.231 0-.441.065-.666.236-.031.025-.147.144-.147.611v4.022a1.3 1.3 0 01-1.3 1.3h-1.841a1.3 1.3 0 01-1.3-1.3v-1.142l-.034.059a4.948 4.948 0 01-1.926 1.898 5.22 5.22 0 01-2.572.656 4.63 4.63 0 01-2.004-.439 1.297 1.297 0 01-.791.268h-1.772a1.3 1.3 0 01-1.3-1.3V7.175c-.11.233-.257.451-.443.648.262.238.426.581.426.963v7.822a1.3 1.3 0 01-1.3 1.3h-1.909c-.362 0-.69-.148-.926-.387a1.296 1.296 0 01-.926.387h-5.522a1.3 1.3 0 01-1.3-1.3v-1.296l-.064.121a4.87 4.87 0 01-1.845 1.952 4.937 4.937 0 01-2.573.694 5.8 5.8 0 01-1.538-.195l.009 2.862a1.3 1.3 0 01-1.3 1.304h-1.79a1.3 1.3 0 01-1.3-1.3v-3.663a1.3 1.3 0 01-1.209.822h-1.738c-.3 0-.577-.102-.797-.273a4.63 4.63 0 01-2.015.444 5.317 5.317 0 01-2.584-.654l-.018-.01a5.16 5.16 0 01-1.119-.866 1.3 1.3 0 01-1.299 1.359h-1.875a1.3 1.3 0 01-1.271-1.026l-.81-3.754-2.117 4.079a1.3 1.3 0 01-1.154.701h-.102a1.3 1.3 0 01-1.155-.704l-2.135-4.137zm17.145 3.368l.214-.118.231-.155c.341-.246.595-.517.761-.813l.064-.123.034 1.38h1.738V8.786h-1.755l-.034 1.312c-.091-.227-.273-.454-.545-.682l-.033-.028a3.273 3.273 0 00-.692-.444l-.28-.124a3.41 3.41 0 00-1.278-.239c-.784 0-1.466.17-2.045.511s-1.028.818-1.346 1.432c-.307.614-.46 1.329-.46 2.147 0 .829.176 1.557.528 2.182a3.93 3.93 0 001.432 1.431 4.021 4.021 0 001.96.494c.549 0 1.051-.114 1.507-.343zm-2.888-5.571c-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699a2.33 2.33 0 00.967-.197c.172-.078.334-.178.485-.301l.184-.166a2.24 2.24 0 00.411-.581c.169-.345.253-.742.253-1.191v-.119c0-.489-.102-.926-.307-1.312l-.044-.08a2.29 2.29 0 00-.656-.734l-.135-.089-.048-.029a2.173 2.173 0 00-1.111-.295c-.727 0-1.289.239-1.687.716zm2.398 2.802c.169-.176.29-.422.29-.859v-.119c0-.302-.062-.526-.156-.704-.102-.193-.223-.316-.365-.403s-.294-.132-.48-.132c-.414 0-.581.119-.688.248l-.01.012c-.154.181-.285.467-.285.979 0 .524.126.83.279 1.026.101.113.276.231.705.231.313 0 .522-.092.711-.278zm7.814 1.765a2.72 2.72 0 00.343.438c.22.228.48.417.782.568l.179.077c.448.176.962.264 1.543.264.704 0 1.341-.171 1.909-.511a3.57 3.57 0 001.363-1.449c.341-.625.511-1.346.511-2.164 0-1.318-.341-2.323-1.023-3.017-.682-.704-1.574-1.057-2.676-1.057-.62 0-1.164.12-1.631.36a2.907 2.907 0 00-.43.271l-.206.172a3.47 3.47 0 00-.664.85V8.786h-1.772V20.75h1.79l-.017-5.317zm.549-1.178c.142.2.307.372.496.518l.161.114.055.035c.352.204.739.307 1.159.307.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.3 0-.589.055-.865.166a2.45 2.45 0 00-.294.141 2.06 2.06 0 00-.376.263 2.317 2.317 0 00-.476.589l-.085.168a2.65 2.65 0 00-.221 1.11v.119c0 .488.102.926.307 1.312l.14.219zm.998-.847a1.15 1.15 0 00.38.398.97.97 0 00.493.123c.438 0 .611-.122.711-.238.165-.201.29-.496.29-.985 0-.548-.137-.827-.275-.985l-.022-.026c-.081-.098-.239-.229-.704-.229a1.03 1.03 0 00-.521.14l-.012.007a.89.89 0 00-.347.355c-.076.138-.137.336-.137.636v.119a1.48 1.48 0 00.145.684zm16.26-6.444c.239-.239.358-.534.358-.886a1.09 1.09 0 00-.358-.818 1.215 1.215 0 00-.869-.341c-.352 0-.648.114-.886.341a1.09 1.09 0 00-.358.818c0 .352.119.648.358.886s.534.358.886.358.642-.119.869-.358zm4.491 9.646l.034-1.38c.132.279.335.537.61.774l.102.084a3.86 3.86 0 00.328.232l.231.126c.451.223.948.334 1.49.334a3.92 3.92 0 001.943-.494 3.645 3.645 0 001.431-1.415c.364-.614.545-1.335.545-2.164 0-.818-.153-1.534-.46-2.147a3.35 3.35 0 00-1.329-1.449c-.568-.352-1.238-.528-2.011-.528a3.6 3.6 0 00-1.581.356l-.09.045-.17.093c-.123.07-.237.144-.342.221a2.387 2.387 0 00-.68.733 1.96 1.96 0 00-.102.205l.085-1.329V4.083h-1.806v12.526h1.772zm.49-2.598a2.57 2.57 0 00.586.725c.08.067.164.129.253.185l.15.084a2.18 2.18 0 001.009.24c.739 0 1.307-.233 1.704-.699.398-.477.596-1.091.596-1.841 0-.761-.199-1.375-.596-1.841-.386-.477-.954-.716-1.704-.716-.387 0-.737.081-1.051.243a2.205 2.205 0 00-.43.292l-.156.147a2.16 2.16 0 00-.433.615c-.155.331-.232.71-.232 1.14v.119c0 .486.101.921.303 1.305zm2.709-.304c.162-.198.289-.496.289-1.001 0-.529-.134-.819-.285-.996l-.022-.026c-.085-.105-.24-.234-.694-.234a.9.9 0 00-.705.289l-.012.012c-.16.16-.284.394-.284.836v.119c0 .295.059.516.149.692a1.17 1.17 0 00.38.42c.142.085.29.127.471.127.438 0 .611-.122.711-.238zm8.56-3.12c.239-.09.489-.139.75-.146l.071-.001c.341 0 .562.034.665.102l.256-1.858c-.135-.068-.383-.102-.743-.102-.2 0-.386.022-.564.065a2.16 2.16 0 00-.426.153c-.144.07-.282.156-.414.258a2.57 2.57 0 00-.502.517 2.754 2.754 0 00-.331.602l-.053.142V8.786h-1.841v7.822h1.841v-4.022c0-.377.055-.703.164-.977s.269-.49.483-.659a2.61 2.61 0 01.413-.262c.076-.039.153-.072.232-.102zm10.133 2.75l.051-.954c0-1.204-.295-2.136-.886-2.795-.579-.67-1.471-1.005-2.676-1.005-.773 0-1.466.17-2.079.511a3.585 3.585 0 00-1.449 1.432c-.341.625-.511 1.352-.511 2.181 0 .739.148 1.42.443 2.045.295.614.756 1.108 1.38 1.483.625.364 1.403.545 2.335.545.672 0 1.247-.064 1.727-.192l.046-.012.14-.041c.423-.127.762-.273 1.019-.437l-.562-1.312a4.12 4.12 0 01-.664.284l-.308.09c-.352.091-.801.136-1.346.136-.659 0-1.176-.153-1.551-.46a1.629 1.629 0 01-.198-.2c-.253-.304-.43-.73-.531-1.278l-.004-.022h5.624zm-5.621-1.3l-.003.022h3.886v-.143c-.008-.502-.108-.887-.298-1.157a1.093 1.093 0 00-.162-.183c-.318-.295-.773-.443-1.363-.443-.68 0-1.196.209-1.547.626-.262.31-.432.737-.512 1.278zm-28.016 2.868V4.083h-1.926v12.526h5.522v-1.704h-3.596zm7.356-6.118v7.822H60.49V8.786h1.909z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M20.295 10.763l-.784-1.772-.358 1.772-1.159 5.845h-1.892l2.591-12.526h.204l3.443 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.034 5.845h-.102l-3.016-5.845zm15.364 6.016a4.024 4.024 0 01-1.96-.494 3.93 3.93 0 01-1.431-1.432c-.352-.625-.528-1.352-.528-2.181 0-.818.153-1.534.46-2.147.318-.614.767-1.091 1.346-1.432s1.261-.511 2.045-.511a3.41 3.41 0 011.278.239 3.46 3.46 0 011.005.596c.273.227.455.454.545.682l.034-1.312h1.755v7.822H38.47l-.034-1.38c-.193.409-.545.773-1.057 1.091a3.28 3.28 0 01-1.721.46zm.307-1.534c.648 0 1.193-.222 1.636-.665.443-.455.665-1.045.665-1.772v-.119c0-.489-.102-.926-.307-1.312a2.29 2.29 0 00-.835-.903 2.173 2.173 0 00-1.159-.324c-.727 0-1.29.239-1.687.716-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699zm6.753-6.459h1.772v1.449c.625-1.102 1.602-1.653 2.931-1.653 1.102 0 1.994.352 2.676 1.057.682.693 1.023 1.699 1.023 3.017 0 .818-.17 1.54-.511 2.164a3.579 3.579 0 01-1.363 1.449 3.636 3.636 0 01-1.909.511c-.659 0-1.233-.114-1.721-.341a2.76 2.76 0 01-1.125-1.005l.017 5.317H42.72V8.786zm4.192 6.442c.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.409 0-.795.102-1.159.307a2.193 2.193 0 00-.852.852c-.204.364-.307.79-.307 1.278v.119c0 .489.102.926.307 1.312.216.375.5.67.852.886.352.204.739.307 1.159.307z' fill='%23fff'/%3E%3Cpath d='M53.119 4.083h1.926v10.822h3.596v1.704h-5.522V4.083zm7.373 4.703h1.909v7.822h-1.909V8.786zm.937-1.466a1.2 1.2 0 01-.886-.358 1.207 1.207 0 01-.358-.886 1.09 1.09 0 01.358-.818c.239-.227.534-.341.886-.341.341 0 .631.114.869.341a1.09 1.09 0 01.358.818 1.2 1.2 0 01-.358.886 1.146 1.146 0 01-.869.358zm8.156 9.459a3.28 3.28 0 01-1.721-.46c-.5-.318-.846-.682-1.04-1.091l-.034 1.38h-1.772V4.083h1.806v4.823l-.085 1.329c.193-.454.568-.841 1.125-1.159a3.61 3.61 0 011.841-.494c.773 0 1.443.176 2.011.528a3.35 3.35 0 011.329 1.449c.307.614.46 1.329.46 2.147 0 .829-.182 1.551-.545 2.164a3.645 3.645 0 01-1.431 1.415 3.92 3.92 0 01-1.943.494zm-.307-1.534c.739 0 1.306-.233 1.704-.699.398-.477.597-1.091.597-1.841 0-.761-.199-1.375-.597-1.84-.386-.477-.954-.716-1.704-.716a2.19 2.19 0 00-1.636.682c-.443.443-.665 1.028-.665 1.755v.119c0 .489.102.926.307 1.312a2.47 2.47 0 00.835.903c.352.216.739.324 1.159.324zm6.138-6.459h1.841v1.534c.182-.523.477-.943.886-1.261s.875-.477 1.397-.477c.364 0 .614.034.75.102l-.256 1.858c-.102-.068-.324-.102-.665-.102-.534 0-1.023.17-1.466.511-.432.341-.648.886-.648 1.636v4.022h-1.841V8.786zm9.874 7.993c-.932 0-1.71-.182-2.335-.545-.625-.375-1.085-.869-1.38-1.483a4.73 4.73 0 01-.443-2.045c0-.829.17-1.556.511-2.181a3.585 3.585 0 011.449-1.432c.614-.341 1.307-.511 2.079-.511 1.204 0 2.096.335 2.676 1.005.591.659.886 1.591.886 2.795 0 .307-.017.625-.051.954h-5.624c.125.693.369 1.193.733 1.5.375.307.892.46 1.551.46.545 0 .994-.046 1.346-.136a4.27 4.27 0 00.971-.375l.562 1.312c-.284.182-.67.341-1.159.477s-1.079.204-1.772.204zm1.653-4.721c.011-.704-.142-1.199-.46-1.483-.318-.295-.773-.443-1.363-.443-1.193 0-1.88.642-2.062 1.926h3.886z' fill='%23e1e3e9'/%3E%3Cg fill-rule='evenodd'%3E%3Cpath d='M8.422 15.936l-.002.002a1.595 1.595 0 01-2.08 0l-.002-.002-.045-.036-.002-.002-.206-.167H4.498a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H8.676l-.209.169-.045.036zm-1.161-.938a.3.3 0 00.118.024c.07 0 .14-.024.195-.072l.08-.065c.657-.527 4.838-3.877 4.838-7.845 0-2.641-2.293-4.79-5.113-4.79S2.266 4.399 2.266 7.04c0 3.34 2.961 6.241 4.291 7.391h.004l.041.039.502.415.08.065a.65.65 0 00.076.048zm-2.609-.567a17.5 17.5 0 01-1.225-1.362C2.23 11.582.967 9.464.967 7.039.967 3.602 3.924.95 7.38.95s6.413 2.652 6.413 6.09c0 2.424-1.263 4.543-2.46 6.029a17.5 17.5 0 01-1.225 1.362h.156a1.98 1.98 0 011.982 1.982v1.906a1.98 1.98 0 01-1.982 1.982H4.498a1.98 1.98 0 01-1.982-1.982v-1.906a1.98 1.98 0 011.982-1.982h.154zm3.955-7.182c0 .717-.568 1.266-1.228 1.266s-1.228-.548-1.228-1.266.568-1.266 1.228-1.266 1.228.548 1.228 1.266zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814zm2.12 7.985H5.262v-.868H9.5v.868z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M2.267 7.039c0-2.641 2.293-4.79 5.113-4.79s5.113 2.149 5.113 4.79c0 3.968-4.181 7.319-4.838 7.845l-.08.065c-.055.048-.125.072-.195.072s-.14-.024-.195-.072l-.08-.065c-.657-.526-4.838-3.877-4.838-7.845zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814z' fill='%23e1e3e9'/%3E%3Cpath d='M4.498 15.731a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H4.498zM9.5 16.932H5.262v.868H9.5v-.868z' fill='%23fff'/%3E%3C/g%3E%3C/svg%3E\")}}@media (-ms-high-contrast:black-on-white){a.mapboxgl-ctrl-logo{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='91' height='23' fill='none'%3E%3Cpath fill-rule='evenodd' d='M17.994 16.609h-1.892l2.59-12.526h.205l3.442 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.033 5.845h-.102l-3.017-5.845-.784-1.772-.358 1.772-1.159 5.845zm2.027-3.541l-.752 3.793a1.3 1.3 0 01-1.275 1.047h-1.892a1.3 1.3 0 01-1.273-1.563l2.59-12.526a1.3 1.3 0 011.273-1.037h.205a1.3 1.3 0 011.159.71l3.305 6.496 3.235-6.486a1.3 1.3 0 011.163-.72h.188a1.3 1.3 0 011.271 1.027l1.494 6.948c.086-.28.194-.552.325-.814l.009-.017a4.788 4.788 0 011.841-1.954c.81-.477 1.727-.691 2.704-.691a4.71 4.71 0 011.761.332l.316.138c.218-.166.491-.265.786-.265h1.755a1.3 1.3 0 011.255.958 1.3 1.3 0 011.255-.958h1.772c.294 0 .564.097.782.261.635-.31 1.358-.466 2.149-.466 1.404 0 2.648.461 3.606 1.449.325.331.586.701.79 1.103v-5.75a1.3 1.3 0 011.3-1.3h1.926a1.3 1.3 0 011.3 1.3v9.522h2.296a1.3 1.3 0 01.551.122V8.786c0-.368.153-.701.399-.937a2.503 2.503 0 01-.706-1.772c0-.688.276-1.297.761-1.759.498-.474 1.122-.699 1.783-.699s1.276.233 1.766.699c.219.208.395.446.522.707v-.942a1.3 1.3 0 011.3-1.3h1.806a1.3 1.3 0 011.3 1.3v3.454a4.93 4.93 0 011.58-.255c.971 0 1.882.222 2.683.715a4.63 4.63 0 011.729 1.805V8.786a1.3 1.3 0 011.3-1.3h1.841c.241 0 .467.066.661.18a3.529 3.529 0 011.623-.385c.359 0 .892.02 1.331.24a1.3 1.3 0 01.713 1.04c.268-.232.563-.436.884-.609.823-.456 1.735-.67 2.702-.67 1.435 0 2.745.404 3.651 1.446.866.971 1.21 2.25 1.21 3.654 0 .355-.02.718-.058 1.088a1.3 1.3 0 01-.981 1.129l.423.986a1.3 1.3 0 01-.494 1.607c-.433.277-.953.479-1.51.634-.635.177-1.351.252-2.122.252-1.097 0-2.116-.214-2.989-.722l-.015-.009c-.827-.496-1.47-1.175-1.883-2.033l-.004-.008a6.022 6.022 0 01-.568-2.601c0-.297.018-.588.055-.873a1.3 1.3 0 01-.345-.089l-.172-.005c-.231 0-.441.065-.666.236-.031.025-.147.144-.147.611v4.022a1.3 1.3 0 01-1.3 1.3h-1.841a1.3 1.3 0 01-1.3-1.3v-1.142l-.034.059a4.948 4.948 0 01-1.926 1.898 5.22 5.22 0 01-2.572.656 4.63 4.63 0 01-2.004-.439 1.297 1.297 0 01-.791.268h-1.772a1.3 1.3 0 01-1.3-1.3V7.175c-.11.233-.257.451-.443.648.262.238.426.581.426.963v7.822a1.3 1.3 0 01-1.3 1.3h-1.909c-.362 0-.69-.148-.926-.387a1.296 1.296 0 01-.926.387h-5.522a1.3 1.3 0 01-1.3-1.3v-1.296l-.064.121a4.87 4.87 0 01-1.845 1.952 4.937 4.937 0 01-2.573.694 5.8 5.8 0 01-1.538-.195l.009 2.862a1.3 1.3 0 01-1.3 1.304h-1.79a1.3 1.3 0 01-1.3-1.3v-3.663a1.3 1.3 0 01-1.209.822h-1.738c-.3 0-.577-.102-.797-.273a4.63 4.63 0 01-2.015.444 5.317 5.317 0 01-2.584-.654l-.018-.01a5.16 5.16 0 01-1.119-.866 1.3 1.3 0 01-1.299 1.359h-1.875a1.3 1.3 0 01-1.271-1.026l-.81-3.754-2.117 4.079a1.3 1.3 0 01-1.154.701h-.102a1.3 1.3 0 01-1.155-.704l-2.135-4.137zm17.145 3.368l.214-.118.231-.155c.341-.246.595-.517.761-.813l.064-.123.034 1.38h1.738V8.786h-1.755l-.034 1.312c-.091-.227-.273-.454-.545-.682l-.033-.028a3.273 3.273 0 00-.692-.444l-.28-.124a3.41 3.41 0 00-1.278-.239c-.784 0-1.466.17-2.045.511s-1.028.818-1.346 1.432c-.307.614-.46 1.329-.46 2.147 0 .829.176 1.557.528 2.182a3.93 3.93 0 001.432 1.431 4.021 4.021 0 001.96.494c.549 0 1.051-.114 1.507-.343zm-2.888-5.571c-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699a2.33 2.33 0 00.967-.197c.172-.078.334-.178.485-.301l.184-.166a2.24 2.24 0 00.411-.581c.169-.345.253-.742.253-1.191v-.119c0-.489-.102-.926-.307-1.312l-.044-.08a2.29 2.29 0 00-.656-.734l-.135-.089-.048-.029a2.173 2.173 0 00-1.111-.295c-.727 0-1.289.239-1.687.716zm2.398 2.802c.169-.176.29-.422.29-.859v-.119c0-.302-.062-.526-.156-.704-.102-.193-.223-.316-.365-.403s-.294-.132-.48-.132c-.414 0-.581.119-.688.248l-.01.012c-.154.181-.285.467-.285.979 0 .524.126.83.279 1.026.101.113.276.231.705.231.313 0 .522-.092.711-.278zm7.814 1.765a2.72 2.72 0 00.343.438c.22.228.48.417.782.568l.179.077c.448.176.962.264 1.543.264.704 0 1.341-.171 1.909-.511a3.57 3.57 0 001.363-1.449c.341-.625.511-1.346.511-2.164 0-1.318-.341-2.323-1.023-3.017-.682-.704-1.574-1.057-2.676-1.057-.62 0-1.164.12-1.631.36a2.907 2.907 0 00-.43.271l-.206.172a3.47 3.47 0 00-.664.85V8.786h-1.772V20.75h1.79l-.017-5.317zm.549-1.178c.142.2.307.372.496.518l.161.114.055.035c.352.204.739.307 1.159.307.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.3 0-.589.055-.865.166a2.45 2.45 0 00-.294.141 2.06 2.06 0 00-.376.263 2.317 2.317 0 00-.476.589l-.085.168a2.65 2.65 0 00-.221 1.11v.119c0 .488.102.926.307 1.312l.14.219zm.998-.847a1.15 1.15 0 00.38.398.97.97 0 00.493.123c.438 0 .611-.122.711-.238.165-.201.29-.496.29-.985 0-.548-.137-.827-.275-.985l-.022-.026c-.081-.098-.239-.229-.704-.229a1.03 1.03 0 00-.521.14l-.012.007a.89.89 0 00-.347.355c-.076.138-.137.336-.137.636v.119a1.48 1.48 0 00.145.684zm16.26-6.444c.239-.239.358-.534.358-.886a1.09 1.09 0 00-.358-.818 1.215 1.215 0 00-.869-.341c-.352 0-.648.114-.886.341a1.09 1.09 0 00-.358.818c0 .352.119.648.358.886s.534.358.886.358.642-.119.869-.358zm4.491 9.646l.034-1.38c.132.279.335.537.61.774l.102.084a3.86 3.86 0 00.328.232l.231.126c.451.223.948.334 1.49.334a3.92 3.92 0 001.943-.494 3.645 3.645 0 001.431-1.415c.364-.614.545-1.335.545-2.164 0-.818-.153-1.534-.46-2.147a3.35 3.35 0 00-1.329-1.449c-.568-.352-1.238-.528-2.011-.528a3.6 3.6 0 00-1.581.356l-.09.045-.17.093c-.123.07-.237.144-.342.221a2.387 2.387 0 00-.68.733 1.96 1.96 0 00-.102.205l.085-1.329V4.083h-1.806v12.526h1.772zm.49-2.598a2.57 2.57 0 00.586.725c.08.067.164.129.253.185l.15.084a2.18 2.18 0 001.009.24c.739 0 1.307-.233 1.704-.699.398-.477.596-1.091.596-1.841 0-.761-.199-1.375-.596-1.841-.386-.477-.954-.716-1.704-.716-.387 0-.737.081-1.051.243a2.205 2.205 0 00-.43.292l-.156.147a2.16 2.16 0 00-.433.615c-.155.331-.232.71-.232 1.14v.119c0 .486.101.921.303 1.305zm2.709-.304c.162-.198.289-.496.289-1.001 0-.529-.134-.819-.285-.996l-.022-.026c-.085-.105-.24-.234-.694-.234a.9.9 0 00-.705.289l-.012.012c-.16.16-.284.394-.284.836v.119c0 .295.059.516.149.692a1.17 1.17 0 00.38.42c.142.085.29.127.471.127.438 0 .611-.122.711-.238zm8.56-3.12c.239-.09.489-.139.75-.146l.071-.001c.341 0 .562.034.665.102l.256-1.858c-.135-.068-.383-.102-.743-.102-.2 0-.386.022-.564.065a2.16 2.16 0 00-.426.153c-.144.07-.282.156-.414.258a2.57 2.57 0 00-.502.517 2.754 2.754 0 00-.331.602l-.053.142V8.786h-1.841v7.822h1.841v-4.022c0-.377.055-.703.164-.977s.269-.49.483-.659a2.61 2.61 0 01.413-.262c.076-.039.153-.072.232-.102zm10.133 2.75l.051-.954c0-1.204-.295-2.136-.886-2.795-.579-.67-1.471-1.005-2.676-1.005-.773 0-1.466.17-2.079.511a3.585 3.585 0 00-1.449 1.432c-.341.625-.511 1.352-.511 2.181 0 .739.148 1.42.443 2.045.295.614.756 1.108 1.38 1.483.625.364 1.403.545 2.335.545.672 0 1.247-.064 1.727-.192l.046-.012.14-.041c.423-.127.762-.273 1.019-.437l-.562-1.312a4.12 4.12 0 01-.664.284l-.308.09c-.352.091-.801.136-1.346.136-.659 0-1.176-.153-1.551-.46a1.629 1.629 0 01-.198-.2c-.253-.304-.43-.73-.531-1.278l-.004-.022h5.624zm-5.621-1.3l-.003.022h3.886v-.143c-.008-.502-.108-.887-.298-1.157a1.093 1.093 0 00-.162-.183c-.318-.295-.773-.443-1.363-.443-.68 0-1.196.209-1.547.626-.262.31-.432.737-.512 1.278zm-28.016 2.868V4.083h-1.926v12.526h5.522v-1.704h-3.596zm7.356-6.118v7.822H60.49V8.786h1.909z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M20.295 10.763l-.784-1.772-.358 1.772-1.159 5.845h-1.892l2.591-12.526h.204l3.443 6.766 1.023 2.267 1.023-2.267 3.374-6.766h.188l2.693 12.526h-1.875l-1.261-5.845-.375-1.772-.682 1.772-3.034 5.845h-.102l-3.016-5.845zm15.364 6.016a4.024 4.024 0 01-1.96-.494 3.93 3.93 0 01-1.431-1.432c-.352-.625-.528-1.352-.528-2.181 0-.818.153-1.534.46-2.147.318-.614.767-1.091 1.346-1.432s1.261-.511 2.045-.511a3.41 3.41 0 011.278.239 3.46 3.46 0 011.005.596c.273.227.455.454.545.682l.034-1.312h1.755v7.822H38.47l-.034-1.38c-.193.409-.545.773-1.057 1.091a3.28 3.28 0 01-1.721.46zm.307-1.534c.648 0 1.193-.222 1.636-.665.443-.455.665-1.045.665-1.772v-.119c0-.489-.102-.926-.307-1.312a2.29 2.29 0 00-.835-.903 2.173 2.173 0 00-1.159-.324c-.727 0-1.29.239-1.687.716-.398.466-.596 1.074-.596 1.824 0 .761.193 1.38.579 1.858.398.466.966.699 1.704.699zm6.753-6.459h1.772v1.449c.625-1.102 1.602-1.653 2.931-1.653 1.102 0 1.994.352 2.676 1.057.682.693 1.023 1.699 1.023 3.017 0 .818-.17 1.54-.511 2.164a3.579 3.579 0 01-1.363 1.449 3.636 3.636 0 01-1.909.511c-.659 0-1.233-.114-1.721-.341a2.76 2.76 0 01-1.125-1.005l.017 5.317H42.72V8.786zm4.192 6.442c.739 0 1.307-.233 1.704-.699.398-.477.596-1.085.596-1.824 0-.773-.199-1.386-.596-1.841-.386-.466-.954-.699-1.704-.699-.409 0-.795.102-1.159.307a2.193 2.193 0 00-.852.852c-.204.364-.307.79-.307 1.278v.119c0 .489.102.926.307 1.312.216.375.5.67.852.886.352.204.739.307 1.159.307z' fill='%23fff'/%3E%3Cpath d='M53.119 4.083h1.926v10.822h3.596v1.704h-5.522V4.083zm7.373 4.703h1.909v7.822h-1.909V8.786zm.937-1.466a1.2 1.2 0 01-.886-.358 1.207 1.207 0 01-.358-.886 1.09 1.09 0 01.358-.818c.239-.227.534-.341.886-.341.341 0 .631.114.869.341a1.09 1.09 0 01.358.818 1.2 1.2 0 01-.358.886 1.146 1.146 0 01-.869.358zm8.156 9.459a3.28 3.28 0 01-1.721-.46c-.5-.318-.846-.682-1.04-1.091l-.034 1.38h-1.772V4.083h1.806v4.823l-.085 1.329c.193-.454.568-.841 1.125-1.159a3.61 3.61 0 011.841-.494c.773 0 1.443.176 2.011.528a3.35 3.35 0 011.329 1.449c.307.614.46 1.329.46 2.147 0 .829-.182 1.551-.545 2.164a3.645 3.645 0 01-1.431 1.415 3.92 3.92 0 01-1.943.494zm-.307-1.534c.739 0 1.306-.233 1.704-.699.398-.477.597-1.091.597-1.841 0-.761-.199-1.375-.597-1.84-.386-.477-.954-.716-1.704-.716a2.19 2.19 0 00-1.636.682c-.443.443-.665 1.028-.665 1.755v.119c0 .489.102.926.307 1.312a2.47 2.47 0 00.835.903c.352.216.739.324 1.159.324zm6.138-6.459h1.841v1.534c.182-.523.477-.943.886-1.261s.875-.477 1.397-.477c.364 0 .614.034.75.102l-.256 1.858c-.102-.068-.324-.102-.665-.102-.534 0-1.023.17-1.466.511-.432.341-.648.886-.648 1.636v4.022h-1.841V8.786zm9.874 7.993c-.932 0-1.71-.182-2.335-.545-.625-.375-1.085-.869-1.38-1.483a4.73 4.73 0 01-.443-2.045c0-.829.17-1.556.511-2.181a3.585 3.585 0 011.449-1.432c.614-.341 1.307-.511 2.079-.511 1.204 0 2.096.335 2.676 1.005.591.659.886 1.591.886 2.795 0 .307-.017.625-.051.954h-5.624c.125.693.369 1.193.733 1.5.375.307.892.46 1.551.46.545 0 .994-.046 1.346-.136a4.27 4.27 0 00.971-.375l.562 1.312c-.284.182-.67.341-1.159.477s-1.079.204-1.772.204zm1.653-4.721c.011-.704-.142-1.199-.46-1.483-.318-.295-.773-.443-1.363-.443-1.193 0-1.88.642-2.062 1.926h3.886z' fill='%23e1e3e9'/%3E%3Cg fill-rule='evenodd'%3E%3Cpath d='M8.422 15.936l-.002.002a1.595 1.595 0 01-2.08 0l-.002-.002-.045-.036-.002-.002-.206-.167H4.498a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H8.676l-.209.169-.045.036zm-1.161-.938a.3.3 0 00.118.024c.07 0 .14-.024.195-.072l.08-.065c.657-.527 4.838-3.877 4.838-7.845 0-2.641-2.293-4.79-5.113-4.79S2.266 4.399 2.266 7.04c0 3.34 2.961 6.241 4.291 7.391h.004l.041.039.502.415.08.065a.65.65 0 00.076.048zm-2.609-.567a17.5 17.5 0 01-1.225-1.362C2.23 11.582.967 9.464.967 7.039.967 3.602 3.924.95 7.38.95s6.413 2.652 6.413 6.09c0 2.424-1.263 4.543-2.46 6.029a17.5 17.5 0 01-1.225 1.362h.156a1.98 1.98 0 011.982 1.982v1.906a1.98 1.98 0 01-1.982 1.982H4.498a1.98 1.98 0 01-1.982-1.982v-1.906a1.98 1.98 0 011.982-1.982h.154zm3.955-7.182c0 .717-.568 1.266-1.228 1.266s-1.228-.548-1.228-1.266.568-1.266 1.228-1.266 1.228.548 1.228 1.266zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814zm2.12 7.985H5.262v-.868H9.5v.868z' fill='%23000' fill-opacity='.4'/%3E%3Cpath d='M2.267 7.039c0-2.641 2.293-4.79 5.113-4.79s5.113 2.149 5.113 4.79c0 3.968-4.181 7.319-4.838 7.845l-.08.065c-.055.048-.125.072-.195.072s-.14-.024-.195-.072l-.08-.065c-.657-.526-4.838-3.877-4.838-7.845zM7.38 9.814c1.396 0 2.528-1.149 2.528-2.566S8.776 4.683 7.38 4.683 4.852 5.832 4.852 7.249 5.984 9.814 7.38 9.814z' fill='%23e1e3e9'/%3E%3Cpath d='M4.498 15.731a.68.68 0 00-.682.682v1.906a.68.68 0 00.682.682h5.764a.68.68 0 00.682-.682v-1.906a.68.68 0 00-.682-.682H4.498zM9.5 16.932H5.262v.868H9.5v-.868z' fill='%23fff'/%3E%3C/g%3E%3C/svg%3E\")}}.mapboxgl-ctrl.mapboxgl-ctrl-attrib{padding:0 5px;background-color:hsla(0,0%,100%,.5);margin:0}@media screen{.mapboxgl-ctrl-attrib.mapboxgl-compact{min-height:20px;padding:2px 24px 2px 0;margin:10px;position:relative;background-color:#fff;border-radius:12px}.mapboxgl-ctrl-attrib.mapboxgl-compact-show{padding:2px 28px 2px 8px;visibility:visible}.mapboxgl-ctrl-bottom-left>.mapboxgl-ctrl-attrib.mapboxgl-compact-show,.mapboxgl-ctrl-top-left>.mapboxgl-ctrl-attrib.mapboxgl-compact-show{padding:2px 8px 2px 28px;border-radius:12px}.mapboxgl-ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-inner{display:none}.mapboxgl-ctrl-attrib-button{display:none;cursor:pointer;position:absolute;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd'%3E%3Cpath d='M4 10a6 6 0 1012 0 6 6 0 10-12 0m5-3a1 1 0 102 0 1 1 0 10-2 0m0 3a1 1 0 112 0v3a1 1 0 11-2 0'/%3E%3C/svg%3E\");background-color:hsla(0,0%,100%,.5);width:24px;height:24px;box-sizing:border-box;border-radius:12px;outline:none;top:0;right:0;border:0}.mapboxgl-ctrl-bottom-left .mapboxgl-ctrl-attrib-button,.mapboxgl-ctrl-top-left .mapboxgl-ctrl-attrib-button{left:0}.mapboxgl-ctrl-attrib.mapboxgl-compact-show .mapboxgl-ctrl-attrib-inner,.mapboxgl-ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-button{display:block}.mapboxgl-ctrl-attrib.mapboxgl-compact-show .mapboxgl-ctrl-attrib-button{background-color:rgba(0,0,0,.05)}.mapboxgl-ctrl-bottom-right>.mapboxgl-ctrl-attrib.mapboxgl-compact:after{bottom:0;right:0}.mapboxgl-ctrl-top-right>.mapboxgl-ctrl-attrib.mapboxgl-compact:after{top:0;right:0}.mapboxgl-ctrl-top-left>.mapboxgl-ctrl-attrib.mapboxgl-compact:after{top:0;left:0}.mapboxgl-ctrl-bottom-left>.mapboxgl-ctrl-attrib.mapboxgl-compact:after{bottom:0;left:0}}@media screen and (-ms-high-contrast:active){.mapboxgl-ctrl-attrib.mapboxgl-compact:after{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' fill='%23fff'%3E%3Cpath d='M4 10a6 6 0 1012 0 6 6 0 10-12 0m5-3a1 1 0 102 0 1 1 0 10-2 0m0 3a1 1 0 112 0v3a1 1 0 11-2 0'/%3E%3C/svg%3E\")}}@media screen and (-ms-high-contrast:black-on-white){.mapboxgl-ctrl-attrib.mapboxgl-compact:after{background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd'%3E%3Cpath d='M4 10a6 6 0 1012 0 6 6 0 10-12 0m5-3a1 1 0 102 0 1 1 0 10-2 0m0 3a1 1 0 112 0v3a1 1 0 11-2 0'/%3E%3C/svg%3E\")}}.mapboxgl-ctrl-attrib a{color:rgba(0,0,0,.75);text-decoration:none}.mapboxgl-ctrl-attrib a:hover{color:inherit;text-decoration:underline}.mapboxgl-ctrl-attrib .mapbox-improve-map{font-weight:700;margin-left:2px}.mapboxgl-attrib-empty{display:none}.mapboxgl-ctrl-scale{background-color:hsla(0,0%,100%,.75);font-size:10px;border:2px solid #333;border-top:#333;padding:0 5px;color:#333;box-sizing:border-box}.mapboxgl-popup{position:absolute;top:0;left:0;display:-webkit-flex;display:flex;will-change:transform;pointer-events:none}.mapboxgl-popup-anchor-top,.mapboxgl-popup-anchor-top-left,.mapboxgl-popup-anchor-top-right{-webkit-flex-direction:column;flex-direction:column}.mapboxgl-popup-anchor-bottom,.mapboxgl-popup-anchor-bottom-left,.mapboxgl-popup-anchor-bottom-right{-webkit-flex-direction:column-reverse;flex-direction:column-reverse}.mapboxgl-popup-anchor-left{-webkit-flex-direction:row;flex-direction:row}.mapboxgl-popup-anchor-right{-webkit-flex-direction:row-reverse;flex-direction:row-reverse}.mapboxgl-popup-tip{width:0;height:0;border:10px solid transparent;z-index:1}.mapboxgl-popup-anchor-top .mapboxgl-popup-tip{-webkit-align-self:center;align-self:center;border-top:none;border-bottom-color:#fff}.mapboxgl-popup-anchor-top-left .mapboxgl-popup-tip{-webkit-align-self:flex-start;align-self:flex-start;border-top:none;border-left:none;border-bottom-color:#fff}.mapboxgl-popup-anchor-top-right .mapboxgl-popup-tip{-webkit-align-self:flex-end;align-self:flex-end;border-top:none;border-right:none;border-bottom-color:#fff}.mapboxgl-popup-anchor-bottom .mapboxgl-popup-tip{-webkit-align-self:center;align-self:center;border-bottom:none;border-top-color:#fff}.mapboxgl-popup-anchor-bottom-left .mapboxgl-popup-tip{-webkit-align-self:flex-start;align-self:flex-start;border-bottom:none;border-left:none;border-top-color:#fff}.mapboxgl-popup-anchor-bottom-right .mapboxgl-popup-tip{-webkit-align-self:flex-end;align-self:flex-end;border-bottom:none;border-right:none;border-top-color:#fff}.mapboxgl-popup-anchor-left .mapboxgl-popup-tip{-webkit-align-self:center;align-self:center;border-left:none;border-right-color:#fff}.mapboxgl-popup-anchor-right .mapboxgl-popup-tip{-webkit-align-self:center;align-self:center;border-right:none;border-left-color:#fff}.mapboxgl-popup-close-button{position:absolute;right:0;top:0;border:0;border-radius:0 3px 0 0;cursor:pointer;background-color:transparent}.mapboxgl-popup-close-button:hover{background-color:rgba(0,0,0,.05)}.mapboxgl-popup-content{position:relative;background:#fff;border-radius:3px;box-shadow:0 1px 2px rgba(0,0,0,.1);padding:10px 10px 15px;pointer-events:auto}.mapboxgl-popup-anchor-top-left .mapboxgl-popup-content{border-top-left-radius:0}.mapboxgl-popup-anchor-top-right .mapboxgl-popup-content{border-top-right-radius:0}.mapboxgl-popup-anchor-bottom-left .mapboxgl-popup-content{border-bottom-left-radius:0}.mapboxgl-popup-anchor-bottom-right .mapboxgl-popup-content{border-bottom-right-radius:0}.mapboxgl-popup-track-pointer{display:none}.mapboxgl-popup-track-pointer *{pointer-events:none;user-select:none}.mapboxgl-map:hover .mapboxgl-popup-track-pointer{display:flex}.mapboxgl-map:active .mapboxgl-popup-track-pointer{display:none}.mapboxgl-marker{position:absolute;top:0;left:0;will-change:transform}.mapboxgl-user-location-dot,.mapboxgl-user-location-dot:before{background-color:#1da1f2;width:15px;height:15px;border-radius:50%}.mapboxgl-user-location-dot:before{content:\"\";position:absolute;-webkit-animation:mapboxgl-user-location-dot-pulse 2s infinite;-moz-animation:mapboxgl-user-location-dot-pulse 2s infinite;-ms-animation:mapboxgl-user-location-dot-pulse 2s infinite;animation:mapboxgl-user-location-dot-pulse 2s infinite}.mapboxgl-user-location-dot:after{border-radius:50%;border:2px solid #fff;content:\"\";height:19px;left:-2px;position:absolute;top:-2px;width:19px;box-sizing:border-box;box-shadow:0 0 3px rgba(0,0,0,.35)}@-webkit-keyframes mapboxgl-user-location-dot-pulse{0%{-webkit-transform:scale(1);opacity:1}70%{-webkit-transform:scale(3);opacity:0}to{-webkit-transform:scale(1);opacity:0}}@-ms-keyframes mapboxgl-user-location-dot-pulse{0%{-ms-transform:scale(1);opacity:1}70%{-ms-transform:scale(3);opacity:0}to{-ms-transform:scale(1);opacity:0}}@keyframes mapboxgl-user-location-dot-pulse{0%{transform:scale(1);opacity:1}70%{transform:scale(3);opacity:0}to{transform:scale(1);opacity:0}}.mapboxgl-user-location-dot-stale{background-color:#aaa}.mapboxgl-user-location-dot-stale:after{display:none}.mapboxgl-user-location-accuracy-circle{background-color:rgba(29,161,242,.2);width:1px;height:1px;border-radius:100%}.mapboxgl-crosshair,.mapboxgl-crosshair .mapboxgl-interactive,.mapboxgl-crosshair .mapboxgl-interactive:active{cursor:crosshair}.mapboxgl-boxzoom{position:absolute;top:0;left:0;width:0;height:0;background:#fff;border:2px dotted #202020;opacity:.5}@media print{.mapbox-improve-map{display:none}}",""]),t.exports=e},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i,r,n,o=t[1]||"",s=t[3];if(!s)return o;if(e&&"function"==typeof btoa){var a=(i=s,r=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(n," */")),l=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([a]).join("\n")}return[o].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,r){"string"==typeof t&&(t=[[null,t,""]]);var n={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(n[s]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);r&&n[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),e.push(l))}},e}},702:function(t,e,i){t.exports=function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},r=0,n=void 0,o=void 0,s=function(t,e){d[r]=t,d[r+1]=e,2===(r+=2)&&(o?o(p):y())};var a="undefined"!=typeof window?window:void 0,l=a||{},h=l.MutationObserver||l.WebKitMutationObserver,c="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),u="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var t=setTimeout;return function(){return t(p,1)}}var d=new Array(1e3);function p(){for(var t=0;t<r;t+=2)(0,d[t])(d[t+1]),d[t]=void 0,d[t+1]=void 0;r=0}var g,m,v,b,y=void 0;function x(t,e){var i=this,r=new this.constructor(S);void 0===r[_]&&j(r);var n=i._state;if(n){var o=arguments[n-1];s((function(){return E(n,r,o,i._result)}))}else N(i,r,t,e);return r}function w(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(S);return L(e,t),e}y=c?function(){return process.nextTick(p)}:h?(m=0,v=new h(p),b=document.createTextNode(""),v.observe(b,{characterData:!0}),function(){b.data=m=++m%2}):u?((g=new MessageChannel).port1.onmessage=p,function(){return g.port2.postMessage(0)}):void 0===a?function(){try{var t=Function("return this")().require("vertx");return void 0!==(n=t.runOnLoop||t.runOnContext)?function(){n(p)}:f()}catch(t){return f()}}():f();var _=Math.random().toString(36).substring(2);function S(){}var C=void 0;function A(e,i,r){i.constructor===e.constructor&&r===x&&i.constructor.resolve===w?function(t,e){1===e._state?k(t,e._result):2===e._state?O(t,e._result):N(e,void 0,(function(e){return L(t,e)}),(function(e){return O(t,e)}))}(e,i):void 0===r?k(e,i):t(r)?function(t,e,i){s((function(t){var r=!1,n=function(t,e,i,r){try{t.call(e,i,r)}catch(t){return t}}(i,e,(function(i){r||(r=!0,e!==i?L(t,i):k(t,i))}),(function(e){r||(r=!0,O(t,e))}),t._label);!r&&n&&(r=!0,O(t,n))}),t)}(e,i,r):k(e,i)}function L(t,e){if(t===e)O(t,new TypeError("You cannot resolve a promise with itself"));else if(n=typeof(r=e),null===r||"object"!==n&&"function"!==n)k(t,e);else{var i=void 0;try{i=e.then}catch(e){return void O(t,e)}A(t,e,i)}var r,n}function T(t){t._onerror&&t._onerror(t._result),P(t)}function k(t,e){t._state===C&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(P,t))}function O(t,e){t._state===C&&(t._state=2,t._result=e,s(T,t))}function N(t,e,i,r){var n=t._subscribers,o=n.length;t._onerror=null,n[o]=e,n[o+1]=i,n[o+2]=r,0===o&&t._state&&s(P,t)}function P(t){var e=t._subscribers,i=t._state;if(0!==e.length){for(var r=void 0,n=void 0,o=t._result,s=0;s<e.length;s+=3)r=e[s],n=e[s+i],r?E(i,r,n,o):n(o);t._subscribers.length=0}}function E(e,i,r,n){var o=t(r),s=void 0,a=void 0,l=!0;if(o){try{s=r(n)}catch(t){l=!1,a=t}if(i===s)return void O(i,new TypeError("A promises callback cannot return that same promise."))}else s=n;i._state!==C||(o&&l?L(i,s):!1===l?O(i,a):1===e?k(i,s):2===e&&O(i,s))}var F=0;function j(t){t[_]=F++,t._state=void 0,t._result=void 0,t._subscribers=[]}var I=function(){function t(t,i){this._instanceConstructor=t,this.promise=new t(S),this.promise[_]||j(this.promise),e(i)?(this.length=i.length,this._remaining=i.length,this._result=new Array(this.length),0===this.length?k(this.promise,this._result):(this.length=this.length||0,this._enumerate(i),0===this._remaining&&k(this.promise,this._result))):O(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===C&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var i=this._instanceConstructor,r=i.resolve;if(r===w){var n=void 0,o=void 0,s=!1;try{n=t.then}catch(t){s=!0,o=t}if(n===x&&t._state!==C)this._settledAt(t._state,e,t._result);else if("function"!=typeof n)this._remaining--,this._result[e]=t;else if(i===M){var a=new i(S);s?O(a,o):A(a,t,n),this._willSettleAt(a,e)}else this._willSettleAt(new i((function(e){return e(t)})),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,i){var r=this.promise;r._state===C&&(this._remaining--,2===t?O(r,i):this._result[e]=i),0===this._remaining&&k(r,this._result)},t.prototype._willSettleAt=function(t,e){var i=this;N(t,void 0,(function(t){return i._settledAt(1,e,t)}),(function(t){return i._settledAt(2,e,t)}))},t}();var M=function(){function e(t){this[_]=F++,this._result=this._state=void 0,this._subscribers=[],S!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){L(t,e)}),(function(e){O(t,e)}))}catch(e){O(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var i=this,r=i.constructor;return t(e)?i.then((function(t){return r.resolve(e()).then((function(){return t}))}),(function(t){return r.resolve(e()).then((function(){throw t}))})):i.then(e,e)},e}();return M.prototype.then=x,M.all=function(t){return new I(this,t).promise},M.race=function(t){var i=this;return e(t)?new i((function(e,r){for(var n=t.length,o=0;o<n;o++)i.resolve(t[o]).then(e,r)})):new i((function(t,e){return e(new TypeError("You must pass an array to race."))}))},M.resolve=w,M.reject=function(t){var e=new this(S);return O(e,t),e},M._setScheduler=function(t){o=t},M._setAsap=function(t){s=t},M._asap=s,M.polyfill=function(){var t=void 0;if(void 0!==i.g)t=i.g;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=M},M.Promise=M,M}()},777:(t,e,i)=>{var r,n,o,s,a,l,h,c,u,f,d,p,g,m,v,b,y,x,w,_,S,C,A=A||{version:"4.3.1"};if(e.fabric=A,"undefined"!=typeof document&&"undefined"!=typeof window)document instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document)?A.document=document:A.document=document.implementation.createHTMLDocument(""),A.window=window;else{var L=new(i(960).JSDOM)(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),{features:{FetchExternalResources:["img"]},resources:"usable"}).window;A.document=L.document,A.jsdomImplForWrapper=i(759).implForWrapper,A.nodeCanvas=i(272).Canvas,A.window=L,DOMParser=A.window.DOMParser}function T(t,e){var i=t.canvas,r=e.targetCanvas,n=r.getContext("2d");n.translate(0,r.height),n.scale(1,-1);var o=i.height-r.height;n.drawImage(i,0,o,r.width,r.height,0,0,r.width,r.height)}function k(t,e){var i=e.targetCanvas.getContext("2d"),r=e.destinationWidth,n=e.destinationHeight,o=r*n*4,s=new Uint8Array(this.imageBuffer,0,o),a=new Uint8ClampedArray(this.imageBuffer,0,o);t.readPixels(0,0,r,n,t.RGBA,t.UNSIGNED_BYTE,s);var l=new ImageData(a,r,n);i.putImageData(l,0,0)}A.isTouchSupported="ontouchstart"in A.window||"ontouchstart"in A.document||A.window&&A.window.navigator&&A.window.navigator.maxTouchPoints>0,A.isLikelyNode="undefined"!=typeof Buffer&&"undefined"==typeof window,A.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-dashoffset","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id","paint-order","vector-effect","instantiated_by_use","clip-path"],A.DPI=96,A.reNum="(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)",A.commaWsp="(?:\\s+,?\\s*|,\\s*)",A.rePathCommand=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/gi,A.reNonWord=/[ \n\.,;!\?\-]/,A.fontPaths={},A.iMatrix=[1,0,0,1,0,0],A.svgNS="http://www.w3.org/2000/svg",A.perfLimitSizeTotal=2097152,A.maxCacheSideLimit=4096,A.minCacheSideLimit=256,A.charWidthsCache={},A.textureSize=2048,A.disableStyleCopyPaste=!1,A.enableGLFiltering=!0,A.devicePixelRatio=A.window.devicePixelRatio||A.window.webkitDevicePixelRatio||A.window.mozDevicePixelRatio||1,A.browserShadowBlurConstant=1,A.arcToSegmentsCache={},A.boundsOfCurveCache={},A.cachesBoundsOfCurve=!0,A.forceGLPutImageData=!1,A.initFilterBackend=function(){return A.enableGLFiltering&&A.isWebglSupported&&A.isWebglSupported(A.textureSize)?(console.log("max texture size: "+A.maxTextureSize),new A.WebglFilterBackend({tileSize:A.textureSize})):A.Canvas2dFilterBackend?new A.Canvas2dFilterBackend:void 0},"undefined"!=typeof document&&"undefined"!=typeof window&&(window.fabric=A),function(){function t(t,e){if(this.__eventListeners[t]){var i=this.__eventListeners[t];e?i[i.indexOf(e)]=!1:A.util.array.fill(i,!1)}}A.Observable={fire:function(t,e){if(!this.__eventListeners)return this;var i=this.__eventListeners[t];if(!i)return this;for(var r=0,n=i.length;r<n;r++)i[r]&&i[r].call(this,e||{});return this.__eventListeners[t]=i.filter((function(t){return!1!==t})),this},on:function(t,e){if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var i in t)this.on(i,t[i]);else this.__eventListeners[t]||(this.__eventListeners[t]=[]),this.__eventListeners[t].push(e);return this},off:function(e,i){if(!this.__eventListeners)return this;if(0===arguments.length)for(e in this.__eventListeners)t.call(this,e);else if(1===arguments.length&&"object"==typeof arguments[0])for(var r in e)t.call(this,r,e[r]);else t.call(this,e,i);return this}}}(),A.Collection={_objects:[],add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var t=0,e=arguments.length;t<e;t++)this._onObjectAdded(arguments[t]);return this.renderOnAddRemove&&this.requestRenderAll(),this},insertAt:function(t,e,i){var r=this._objects;return i?r[e]=t:r.splice(e,0,t),this._onObjectAdded&&this._onObjectAdded(t),this.renderOnAddRemove&&this.requestRenderAll(),this},remove:function(){for(var t,e=this._objects,i=!1,r=0,n=arguments.length;r<n;r++)-1!==(t=e.indexOf(arguments[r]))&&(i=!0,e.splice(t,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[r]));return this.renderOnAddRemove&&i&&this.requestRenderAll(),this},forEachObject:function(t,e){for(var i=this.getObjects(),r=0,n=i.length;r<n;r++)t.call(e,i[r],r,i);return this},getObjects:function(t){return void 0===t?this._objects.concat():this._objects.filter((function(e){return e.type===t}))},item:function(t){return this._objects[t]},isEmpty:function(){return 0===this._objects.length},size:function(){return this._objects.length},contains:function(t){return this._objects.indexOf(t)>-1},complexity:function(){return this._objects.reduce((function(t,e){return t+(e.complexity?e.complexity():0)}),0)}},A.CommonMethods={_setOptions:function(t){for(var e in t)this.set(e,t[e])},_initGradient:function(t,e){!t||!t.colorStops||t instanceof A.Gradient||this.set(e,new A.Gradient(t))},_initPattern:function(t,e,i){!t||!t.source||t instanceof A.Pattern?i&&i():this.set(e,new A.Pattern(t,i))},_setObject:function(t){for(var e in t)this._set(e,t[e])},set:function(t,e){return"object"==typeof t?this._setObject(t):this._set(t,e),this},_set:function(t,e){this[t]=e},toggle:function(t){var e=this.get(t);return"boolean"==typeof e&&this.set(t,!e),this},get:function(t){return this[t]}},r=e,n=Math.sqrt,o=Math.atan2,s=Math.pow,a=Math.PI/180,l=Math.PI/2,A.util={cos:function(t){if(0===t)return 1;switch(t<0&&(t=-t),t/l){case 1:case 3:return 0;case 2:return-1}return Math.cos(t)},sin:function(t){if(0===t)return 0;var e=1;switch(t<0&&(e=-1),t/l){case 1:return e;case 2:return 0;case 3:return-e}return Math.sin(t)},removeFromArray:function(t,e){var i=t.indexOf(e);return-1!==i&&t.splice(i,1),t},getRandomInt:function(t,e){return Math.floor(Math.random()*(e-t+1))+t},degreesToRadians:function(t){return t*a},radiansToDegrees:function(t){return t/a},rotatePoint:function(t,e,i){t.subtractEquals(e);var r=A.util.rotateVector(t,i);return new A.Point(r.x,r.y).addEquals(e)},rotateVector:function(t,e){var i=A.util.sin(e),r=A.util.cos(e);return{x:t.x*r-t.y*i,y:t.x*i+t.y*r}},transformPoint:function(t,e,i){return i?new A.Point(e[0]*t.x+e[2]*t.y,e[1]*t.x+e[3]*t.y):new A.Point(e[0]*t.x+e[2]*t.y+e[4],e[1]*t.x+e[3]*t.y+e[5])},makeBoundingBoxFromPoints:function(t,e){if(e)for(var i=0;i<t.length;i++)t[i]=A.util.transformPoint(t[i],e);var r=[t[0].x,t[1].x,t[2].x,t[3].x],n=A.util.array.min(r),o=A.util.array.max(r)-n,s=[t[0].y,t[1].y,t[2].y,t[3].y],a=A.util.array.min(s);return{left:n,top:a,width:o,height:A.util.array.max(s)-a}},invertTransform:function(t){var e=1/(t[0]*t[3]-t[1]*t[2]),i=[e*t[3],-e*t[1],-e*t[2],e*t[0]],r=A.util.transformPoint({x:t[4],y:t[5]},i,!0);return i[4]=-r.x,i[5]=-r.y,i},toFixed:function(t,e){return parseFloat(Number(t).toFixed(e))},parseUnit:function(t,e){var i=/\D{0,2}$/.exec(t),r=parseFloat(t);switch(e||(e=A.Text.DEFAULT_SVG_FONT_SIZE),i[0]){case"mm":return r*A.DPI/25.4;case"cm":return r*A.DPI/2.54;case"in":return r*A.DPI;case"pt":return r*A.DPI/72;case"pc":return r*A.DPI/72*12;case"em":return r*e;default:return r}},falseFunction:function(){return!1},getKlass:function(t,e){return t=A.util.string.camelize(t.charAt(0).toUpperCase()+t.slice(1)),A.util.resolveNamespace(e)[t]},getSvgAttributes:function(t){var e=["instantiated_by_use","style","id","class"];switch(t){case"linearGradient":e=e.concat(["x1","y1","x2","y2","gradientUnits","gradientTransform"]);break;case"radialGradient":e=e.concat(["gradientUnits","gradientTransform","cx","cy","r","fx","fy","fr"]);break;case"stop":e=e.concat(["offset","stop-color","stop-opacity"])}return e},resolveNamespace:function(t){if(!t)return A;var e,i=t.split("."),n=i.length,o=r||A.window;for(e=0;e<n;++e)o=o[i[e]];return o},loadImage:function(t,e,i,r){if(t){var n=A.util.createImage(),o=function(){e&&e.call(i,n,!1),n=n.onload=n.onerror=null};n.onload=o,n.onerror=function(){A.log("Error loading "+n.src),e&&e.call(i,null,!0),n=n.onload=n.onerror=null},0!==t.indexOf("data")&&null!=r&&(n.crossOrigin=r),"data:image/svg"===t.substring(0,14)&&(n.onload=null,A.util.loadImageInDom(n,o)),n.src=t}else e&&e.call(i,t)},loadImageInDom:function(t,e){var i=A.document.createElement("div");i.style.width=i.style.height="1px",i.style.left=i.style.top="-100%",i.style.position="absolute",i.appendChild(t),A.document.querySelector("body").appendChild(i),t.onload=function(){e(),i.parentNode.removeChild(i),i=null}},enlivenObjects:function(t,e,i,r){var n=[],o=0,s=(t=t||[]).length;function a(){++o===s&&e&&e(n.filter((function(t){return t})))}s?t.forEach((function(t,e){t&&t.type?A.util.getKlass(t.type,i).fromObject(t,(function(i,o){o||(n[e]=i),r&&r(t,i,o),a()})):a()})):e&&e(n)},enlivenPatterns:function(t,e){function i(){++n===o&&e&&e(r)}var r=[],n=0,o=(t=t||[]).length;o?t.forEach((function(t,e){t&&t.source?new A.Pattern(t,(function(t){r[e]=t,i()})):(r[e]=t,i())})):e&&e(r)},groupSVGElements:function(t,e,i){var r;return t&&1===t.length?t[0]:(e&&(e.width&&e.height?e.centerPoint={x:e.width/2,y:e.height/2}:(delete e.width,delete e.height)),r=new A.Group(t,e),void 0!==i&&(r.sourcePath=i),r)},populateWithProperties:function(t,e,i){if(i&&"[object Array]"===Object.prototype.toString.call(i))for(var r=0,n=i.length;r<n;r++)i[r]in t&&(e[i[r]]=t[i[r]])},drawDashedLine:function(t,e,i,r,s,a){var l=r-e,h=s-i,c=n(l*l+h*h),u=o(h,l),f=a.length,d=0,p=!0;for(t.save(),t.translate(e,i),t.moveTo(0,0),t.rotate(u),e=0;c>e;)(e+=a[d++%f])>c&&(e=c),t[p?"lineTo":"moveTo"](e,0),p=!p;t.restore()},createCanvasElement:function(){return A.document.createElement("canvas")},copyCanvasElement:function(t){var e=A.util.createCanvasElement();return e.width=t.width,e.height=t.height,e.getContext("2d").drawImage(t,0,0),e},toDataURL:function(t,e,i){return t.toDataURL("image/"+e,i)},createImage:function(){return A.document.createElement("img")},multiplyTransformMatrices:function(t,e,i){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],i?0:t[0]*e[4]+t[2]*e[5]+t[4],i?0:t[1]*e[4]+t[3]*e[5]+t[5]]},qrDecompose:function(t){var e=o(t[1],t[0]),i=s(t[0],2)+s(t[1],2),r=n(i),l=(t[0]*t[3]-t[2]*t[1])/r,h=o(t[0]*t[2]+t[1]*t[3],i);return{angle:e/a,scaleX:r,scaleY:l,skewX:h/a,skewY:0,translateX:t[4],translateY:t[5]}},calcRotateMatrix:function(t){if(!t.angle)return A.iMatrix.concat();var e=A.util.degreesToRadians(t.angle),i=A.util.cos(e),r=A.util.sin(e);return[i,r,-r,i,0,0]},calcDimensionsMatrix:function(t){var e=void 0===t.scaleX?1:t.scaleX,i=void 0===t.scaleY?1:t.scaleY,r=[t.flipX?-e:e,0,0,t.flipY?-i:i,0,0],n=A.util.multiplyTransformMatrices,o=A.util.degreesToRadians;return t.skewX&&(r=n(r,[1,0,Math.tan(o(t.skewX)),1],!0)),t.skewY&&(r=n(r,[1,Math.tan(o(t.skewY)),0,1],!0)),r},composeMatrix:function(t){var e=[1,0,0,1,t.translateX||0,t.translateY||0],i=A.util.multiplyTransformMatrices;return t.angle&&(e=i(e,A.util.calcRotateMatrix(t))),(1!==t.scaleX||1!==t.scaleY||t.skewX||t.skewY||t.flipX||t.flipY)&&(e=i(e,A.util.calcDimensionsMatrix(t))),e},resetObjectTransform:function(t){t.scaleX=1,t.scaleY=1,t.skewX=0,t.skewY=0,t.flipX=!1,t.flipY=!1,t.rotate(0)},saveObjectTransform:function(t){return{scaleX:t.scaleX,scaleY:t.scaleY,skewX:t.skewX,skewY:t.skewY,angle:t.angle,left:t.left,flipX:t.flipX,flipY:t.flipY,top:t.top}},isTransparent:function(t,e,i,r){r>0&&(e>r?e-=r:e=0,i>r?i-=r:i=0);var n,o=!0,s=t.getImageData(e,i,2*r||1,2*r||1),a=s.data.length;for(n=3;n<a&&0!=(o=s.data[n]<=0);n+=4);return s=null,o},parsePreserveAspectRatioAttribute:function(t){var e,i="meet",r=t.split(" ");return r&&r.length&&("meet"!==(i=r.pop())&&"slice"!==i?(e=i,i="meet"):r.length&&(e=r.pop())),{meetOrSlice:i,alignX:"none"!==e?e.slice(1,4):"none",alignY:"none"!==e?e.slice(5,8):"none"}},clearFabricFontCache:function(t){(t=(t||"").toLowerCase())?A.charWidthsCache[t]&&delete A.charWidthsCache[t]:A.charWidthsCache={}},limitDimsByArea:function(t,e){var i=Math.sqrt(e*t),r=Math.floor(e/i);return{x:Math.floor(i),y:r}},capValue:function(t,e,i){return Math.max(t,Math.min(e,i))},findScaleToFit:function(t,e){return Math.min(e.width/t.width,e.height/t.height)},findScaleToCover:function(t,e){return Math.max(e.width/t.width,e.height/t.height)},matrixToSVG:function(t){return"matrix("+t.map((function(t){return A.util.toFixed(t,A.Object.NUM_FRACTION_DIGITS)})).join(" ")+")"},sizeAfterTransform:function(t,e,i){var r=t/2,n=e/2,o=[{x:-r,y:-n},{x:r,y:-n},{x:-r,y:n},{x:r,y:n}],s=A.util.calcDimensionsMatrix(i),a=A.util.makeBoundingBoxFromPoints(o,s);return{x:a.width,y:a.height}}},function(){var t=Array.prototype.join,e={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},i={m:"l",M:"L"};function r(t,e,i,r,n,o,s,a,l,h,c){var u=A.util.cos(t),f=A.util.sin(t),d=A.util.cos(e),p=A.util.sin(e),g=i*n*d-r*o*p+s,m=r*n*d+i*o*p+a;return["C",h+l*(-i*n*f-r*o*u),c+l*(-r*n*f+i*o*u),g+l*(i*n*p+r*o*d),m+l*(r*n*p-i*o*d),g,m]}function n(t,e,i,n,s,a,l){var h=Math.PI,c=l*h/180,u=A.util.sin(c),f=A.util.cos(c),d=0,p=0,g=-f*t*.5-u*e*.5,m=-f*e*.5+u*t*.5,v=(i=Math.abs(i))*i,b=(n=Math.abs(n))*n,y=m*m,x=g*g,w=v*b-v*y-b*x,_=0;if(w<0){var S=Math.sqrt(1-w/(v*b));i*=S,n*=S}else _=(s===a?-1:1)*Math.sqrt(w/(v*y+b*x));var C=_*i*m/n,L=-_*n*g/i,T=f*C-u*L+.5*t,k=u*C+f*L+.5*e,O=o(1,0,(g-C)/i,(m-L)/n),N=o((g-C)/i,(m-L)/n,(-g-C)/i,(-m-L)/n);0===a&&N>0?N-=2*h:1===a&&N<0&&(N+=2*h);for(var P=Math.ceil(Math.abs(N/h*2)),E=[],F=N/P,j=8/3*Math.sin(F/4)*Math.sin(F/4)/Math.sin(F/2),I=O+F,M=0;M<P;M++)E[M]=r(O,I,f,u,i,n,T,k,j,d,p),d=E[M][5],p=E[M][6],O=I,I+=F;return E}function o(t,e,i,r){var n=Math.atan2(e,t),o=Math.atan2(r,i);return o>=n?o-n:2*Math.PI-(n-o)}function s(e,i,r,n,o,s,a,l){var h;if(A.cachesBoundsOfCurve&&(h=t.call(arguments),A.boundsOfCurveCache[h]))return A.boundsOfCurveCache[h];var c,u,f,d,p,g,m,v,b=Math.sqrt,y=Math.min,x=Math.max,w=Math.abs,_=[],S=[[],[]];u=6*e-12*r+6*o,c=-3*e+9*r-9*o+3*a,f=3*r-3*e;for(var C=0;C<2;++C)if(C>0&&(u=6*i-12*n+6*s,c=-3*i+9*n-9*s+3*l,f=3*n-3*i),w(c)<1e-12){if(w(u)<1e-12)continue;0<(d=-f/u)&&d<1&&_.push(d)}else(m=u*u-4*f*c)<0||(0<(p=(-u+(v=b(m)))/(2*c))&&p<1&&_.push(p),0<(g=(-u-v)/(2*c))&&g<1&&_.push(g));for(var L,T,k,O=_.length,N=O;O--;)L=(k=1-(d=_[O]))*k*k*e+3*k*k*d*r+3*k*d*d*o+d*d*d*a,S[0][O]=L,T=k*k*k*i+3*k*k*d*n+3*k*d*d*s+d*d*d*l,S[1][O]=T;S[0][N]=e,S[1][N]=i,S[0][N+1]=a,S[1][N+1]=l;var P=[{x:y.apply(null,S[0]),y:y.apply(null,S[1])},{x:x.apply(null,S[0]),y:x.apply(null,S[1])}];return A.cachesBoundsOfCurve&&(A.boundsOfCurveCache[h]=P),P}function a(t,e,i){for(var r=i[1],o=i[2],s=i[3],a=i[4],l=i[5],h=n(i[6]-t,i[7]-e,r,o,a,l,s),c=0,u=h.length;c<u;c++)h[c][1]+=t,h[c][2]+=e,h[c][3]+=t,h[c][4]+=e,h[c][5]+=t,h[c][6]+=e;return h}function l(t,e,i,r){return Math.sqrt((i-t)*(i-t)+(r-e)*(r-e))}function h(t,e,i,r,n,o,s,a){return function(l){var h,c=(h=l)*h*h,u=function(t){return 3*t*t*(1-t)}(l),f=function(t){return 3*t*(1-t)*(1-t)}(l),d=function(t){return(1-t)*(1-t)*(1-t)}(l);return{x:s*c+n*u+i*f+t*d,y:a*c+o*u+r*f+e*d}}}function c(t,e,i,r,n,o,s,a){return function(l){var h=1-l,c=3*h*h*(i-t)+6*h*l*(n-i)+3*l*l*(s-n),u=3*h*h*(r-e)+6*h*l*(o-r)+3*l*l*(a-o);return Math.atan2(u,c)}}function u(t,e,i,r,n,o){return function(s){var a,l=(a=s)*a,h=function(t){return 2*t*(1-t)}(s),c=function(t){return(1-t)*(1-t)}(s);return{x:n*l+i*h+t*c,y:o*l+r*h+e*c}}}function f(t,e,i,r,n,o){return function(s){var a=1-s,l=2*a*(i-t)+2*s*(n-i),h=2*a*(r-e)+2*s*(o-r);return Math.atan2(h,l)}}function d(t,e,i){var r,n,o={x:e,y:i},s=0;for(n=.01;n<=1;n+=.01)r=t(n),s+=l(o.x,o.y,r.x,r.y),o=r;return s}function p(t){for(var e,i,r,n,o=0,s=t.length,a=0,p=0,g=0,m=0,v=[],b=0;b<s;b++){switch(r={x:a,y:p,command:(e=t[b])[0]},e[0]){case"M":r.length=0,g=a=e[1],m=p=e[2];break;case"L":r.length=l(a,p,e[1],e[2]),a=e[1],p=e[2];break;case"C":i=h(a,p,e[1],e[2],e[3],e[4],e[5],e[6]),n=c(a,p,e[1],e[2],e[3],e[4],e[5],e[6]),r.iterator=i,r.angleFinder=n,r.length=d(i,a,p),a=e[5],p=e[6];break;case"Q":i=u(a,p,e[1],e[2],e[3],e[4]),n=f(a,p,e[1],e[2],e[3],e[4]),r.iterator=i,r.angleFinder=n,r.length=d(i,a,p),a=e[3],p=e[4];break;case"Z":case"z":r.destX=g,r.destY=m,r.length=l(a,p,g,m),a=g,p=m}o+=r.length,v.push(r)}return v.push({length:o,x:a,y:p}),v}A.util.parsePath=function(t){var r,n,o,s,a,l=[],h=[],c=A.rePathCommand,u="[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*",f="("+u+")"+A.commaWsp,d="([01])"+A.commaWsp+"?",p=new RegExp(f+"?"+f+"?"+f+d+d+f+"?("+u+")","g");if(!t||!t.match)return l;for(var g,m=0,v=(a=t.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi)).length;m<v;m++){s=(r=a[m]).slice(1).trim(),h.length=0;var b=r.charAt(0);if(g=[b],"a"===b.toLowerCase())for(var y;y=p.exec(s);)for(var x=1;x<y.length;x++)h.push(y[x]);else for(;o=c.exec(s);)h.push(o[0]);x=0;for(var w=h.length;x<w;x++)n=parseFloat(h[x]),isNaN(n)||g.push(n);var _=e[b.toLowerCase()],S=i[b]||b;if(g.length-1>_)for(var C=1,L=g.length;C<L;C+=_)l.push([b].concat(g.slice(C,C+_))),b=S;else l.push(g)}return l},A.util.makePathSimpler=function(t){var e,i,r,n,o,s,l=0,h=0,c=t.length,u=0,f=0,d=[];for(i=0;i<c;++i){switch(r=!1,(e=t[i].slice(0))[0]){case"l":e[0]="L",e[1]+=l,e[2]+=h;case"L":l=e[1],h=e[2];break;case"h":e[1]+=l;case"H":e[0]="L",e[2]=h,l=e[1];break;case"v":e[1]+=h;case"V":e[0]="L",h=e[1],e[1]=l,e[2]=h;break;case"m":e[0]="M",e[1]+=l,e[2]+=h;case"M":l=e[1],h=e[2],u=e[1],f=e[2];break;case"c":e[0]="C",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h,e[5]+=l,e[6]+=h;case"C":o=e[3],s=e[4],l=e[5],h=e[6];break;case"s":e[0]="S",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h;case"S":"C"===n?(o=2*l-o,s=2*h-s):(o=l,s=h),l=e[3],h=e[4],e[0]="C",e[5]=e[3],e[6]=e[4],e[3]=e[1],e[4]=e[2],e[1]=o,e[2]=s,o=e[3],s=e[4];break;case"q":e[0]="Q",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h;case"Q":o=e[1],s=e[2],l=e[3],h=e[4];break;case"t":e[0]="T",e[1]+=l,e[2]+=h;case"T":"Q"===n?(o=2*l-o,s=2*h-s):(o=l,s=h),e[0]="Q",l=e[1],h=e[2],e[1]=o,e[2]=s,e[3]=l,e[4]=h;break;case"a":e[0]="A",e[6]+=l,e[7]+=h;case"A":r=!0,d=d.concat(a(l,h,e)),l=e[6],h=e[7];break;case"z":case"Z":l=u,h=f}r||d.push(e),n=e[0]}return d},A.util.getPathSegmentsInfo=p,A.util.fromArcToBeziers=a,A.util.fromArcToBeizers=a,A.util.getBoundsOfCurve=s,A.util.getPointOnPath=function(t,e,i){i||(i=p(t));for(var r=0;e-i[r].length>0&&r<i.length-2;)e-=i[r].length,r++;var n,o=i[r],s=e/o.length,a=o.command,h=t[r];switch(a){case"M":return{x:o.x,y:o.y,angle:0};case"Z":case"z":return(n=new A.Point(o.x,o.y).lerp(new A.Point(o.destX,o.destY),s)).angle=Math.atan2(o.destY-o.y,o.destX-o.x),n;case"L":return(n=new A.Point(o.x,o.y).lerp(new A.Point(h[1],h[2]),s)).angle=Math.atan2(h[2]-o.y,h[1]-o.x),n;case"C":case"Q":return function(t,e){for(var i,r,n,o=0,s=0,a=t.iterator,h={x:t.x,y:t.y},c=.01,u=t.angleFinder;s<e&&o<=1&&c>1e-4;)i=a(o),n=o,(r=l(h.x,h.y,i.x,i.y))+s>e?o-=c/=2:(h=i,o+=c,s+=r);return i.angle=u(n),i}(o,e)}},A.util.getBoundsOfArc=function(t,e,i,r,o,a,l,h,c){for(var u,f=0,d=0,p=[],g=n(h-t,c-e,i,r,a,l,o),m=0,v=g.length;m<v;m++)u=s(f,d,g[m][1],g[m][2],g[m][3],g[m][4],g[m][5],g[m][6]),p.push({x:u[0].x+t,y:u[0].y+e}),p.push({x:u[1].x+t,y:u[1].y+e}),f=g[m][5],d=g[m][6];return p},A.util.drawArc=function(t,e,i,r){a(e,i,r=r.slice(0).unshift("X")).forEach((function(e){t.bezierCurveTo.apply(t,e.slice(1))}))}}(),function(){var t=Array.prototype.slice;function e(t,e,i){if(t&&0!==t.length){var r=t.length-1,n=e?t[r][e]:t[r];if(e)for(;r--;)i(t[r][e],n)&&(n=t[r][e]);else for(;r--;)i(t[r],n)&&(n=t[r]);return n}}A.util.array={fill:function(t,e){for(var i=t.length;i--;)t[i]=e;return t},invoke:function(e,i){for(var r=t.call(arguments,2),n=[],o=0,s=e.length;o<s;o++)n[o]=r.length?e[o][i].apply(e[o],r):e[o][i].call(e[o]);return n},min:function(t,i){return e(t,i,(function(t,e){return t<e}))},max:function(t,i){return e(t,i,(function(t,e){return t>=e}))}}}(),function(){function t(e,i,r){if(r)if(!A.isLikelyNode&&i instanceof Element)e=i;else if(i instanceof Array){e=[];for(var n=0,o=i.length;n<o;n++)e[n]=t({},i[n],r)}else if(i&&"object"==typeof i)for(var s in i)"canvas"===s||"group"===s?e[s]=null:i.hasOwnProperty(s)&&(e[s]=t({},i[s],r));else e=i;else for(var s in i)e[s]=i[s];return e}A.util.object={extend:t,clone:function(e,i){return t({},e,i)}},A.util.object.extend(A.util,A.Observable)}(),function(){function t(t,e){var i=t.charCodeAt(e);if(isNaN(i))return"";if(i<55296||i>57343)return t.charAt(e);if(55296<=i&&i<=56319){if(t.length<=e+1)throw"High surrogate without following low surrogate";var r=t.charCodeAt(e+1);if(56320>r||r>57343)throw"High surrogate without following low surrogate";return t.charAt(e)+t.charAt(e+1)}if(0===e)throw"Low surrogate without preceding high surrogate";var n=t.charCodeAt(e-1);if(55296>n||n>56319)throw"Low surrogate without preceding high surrogate";return!1}A.util.string={camelize:function(t){return t.replace(/-+(.)?/g,(function(t,e){return e?e.toUpperCase():""}))},capitalize:function(t,e){return t.charAt(0).toUpperCase()+(e?t.slice(1):t.slice(1).toLowerCase())},escapeXml:function(t){return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},graphemeSplit:function(e){var i,r=0,n=[];for(r=0;r<e.length;r++)!1!==(i=t(e,r))&&n.push(i);return n}}}(),function(){var t=Array.prototype.slice,e=function(){},i=function(){for(var t in{toString:1})if("toString"===t)return!1;return!0}(),r=function(t,e,r){for(var n in e)n in t.prototype&&"function"==typeof t.prototype[n]&&(e[n]+"").indexOf("callSuper")>-1?t.prototype[n]=function(t){return function(){var i=this.constructor.superclass;this.constructor.superclass=r;var n=e[t].apply(this,arguments);if(this.constructor.superclass=i,"initialize"!==t)return n}}(n):t.prototype[n]=e[n],i&&(e.toString!==Object.prototype.toString&&(t.prototype.toString=e.toString),e.valueOf!==Object.prototype.valueOf&&(t.prototype.valueOf=e.valueOf))};function n(){}function o(e){for(var i=null,r=this;r.constructor.superclass;){var n=r.constructor.superclass.prototype[e];if(r[e]!==n){i=n;break}r=r.constructor.superclass.prototype}return i?arguments.length>1?i.apply(this,t.call(arguments,1)):i.call(this):console.log("tried to callSuper "+e+", method not found in prototype chain",this)}A.util.createClass=function(){var i=null,s=t.call(arguments,0);function a(){this.initialize.apply(this,arguments)}"function"==typeof s[0]&&(i=s.shift()),a.superclass=i,a.subclasses=[],i&&(n.prototype=i.prototype,a.prototype=new n,i.subclasses.push(a));for(var l=0,h=s.length;l<h;l++)r(a,s[l],i);return a.prototype.initialize||(a.prototype.initialize=e),a.prototype.constructor=a,a.prototype.callSuper=o,a}}(),h=!!A.document.createElement("div").attachEvent,c=["touchstart","touchmove","touchend"],A.util.addListener=function(t,e,i,r){t&&t.addEventListener(e,i,!h&&r)},A.util.removeListener=function(t,e,i,r){t&&t.removeEventListener(e,i,!h&&r)},A.util.getPointer=function(t){var e=t.target,i=A.util.getScrollLeftTop(e),r=function(t){var e=t.changedTouches;return e&&e[0]?e[0]:t}(t);return{x:r.clientX+i.left,y:r.clientY+i.top}},A.util.isTouchEvent=function(t){return c.indexOf(t.type)>-1||"touch"===t.pointerType},f="string"==typeof(u=A.document.createElement("div")).style.opacity,d="string"==typeof u.style.filter,p=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,g=function(t){return t},f?g=function(t,e){return t.style.opacity=e,t}:d&&(g=function(t,e){var i=t.style;return t.currentStyle&&!t.currentStyle.hasLayout&&(i.zoom=1),p.test(i.filter)?(e=e>=.9999?"":"alpha(opacity="+100*e+")",i.filter=i.filter.replace(p,e)):i.filter+=" alpha(opacity="+100*e+")",t}),A.util.setStyle=function(t,e){var i=t.style;if(!i)return t;if("string"==typeof e)return t.style.cssText+=";"+e,e.indexOf("opacity")>-1?g(t,e.match(/opacity:\s*(\d?\.?\d*)/)[1]):t;for(var r in e)"opacity"===r?g(t,e[r]):i["float"===r||"cssFloat"===r?void 0===i.styleFloat?"cssFloat":"styleFloat":r]=e[r];return t},function(){var t,e,i,r,n=Array.prototype.slice,o=function(t){return n.call(t,0)};try{t=o(A.document.childNodes)instanceof Array}catch(t){}function s(t,e){var i=A.document.createElement(t);for(var r in e)"class"===r?i.className=e[r]:"for"===r?i.htmlFor=e[r]:i.setAttribute(r,e[r]);return i}function a(t){for(var e=0,i=0,r=A.document.documentElement,n=A.document.body||{scrollLeft:0,scrollTop:0};t&&(t.parentNode||t.host)&&((t=t.parentNode||t.host)===A.document?(e=n.scrollLeft||r.scrollLeft||0,i=n.scrollTop||r.scrollTop||0):(e+=t.scrollLeft||0,i+=t.scrollTop||0),1!==t.nodeType||"fixed"!==t.style.position););return{left:e,top:i}}t||(o=function(t){for(var e=new Array(t.length),i=t.length;i--;)e[i]=t[i];return e}),e=A.document.defaultView&&A.document.defaultView.getComputedStyle?function(t,e){var i=A.document.defaultView.getComputedStyle(t,null);return i?i[e]:void 0}:function(t,e){var i=t.style[e];return!i&&t.currentStyle&&(i=t.currentStyle[e]),i},i=A.document.documentElement.style,r="userSelect"in i?"userSelect":"MozUserSelect"in i?"MozUserSelect":"WebkitUserSelect"in i?"WebkitUserSelect":"KhtmlUserSelect"in i?"KhtmlUserSelect":"",A.util.makeElementUnselectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=A.util.falseFunction),r?t.style[r]="none":"string"==typeof t.unselectable&&(t.unselectable="on"),t},A.util.makeElementSelectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=null),r?t.style[r]="":"string"==typeof t.unselectable&&(t.unselectable=""),t},A.util.setImageSmoothing=function(t,e){t.imageSmoothingEnabled=t.imageSmoothingEnabled||t.webkitImageSmoothingEnabled||t.mozImageSmoothingEnabled||t.msImageSmoothingEnabled||t.oImageSmoothingEnabled,t.imageSmoothingEnabled=e},A.util.getById=function(t){return"string"==typeof t?A.document.getElementById(t):t},A.util.toArray=o,A.util.addClass=function(t,e){t&&-1===(" "+t.className+" ").indexOf(" "+e+" ")&&(t.className+=(t.className?" ":"")+e)},A.util.makeElement=s,A.util.wrapElement=function(t,e,i){return"string"==typeof e&&(e=s(e,i)),t.parentNode&&t.parentNode.replaceChild(e,t),e.appendChild(t),e},A.util.getScrollLeftTop=a,A.util.getElementOffset=function(t){var i,r,n=t&&t.ownerDocument,o={left:0,top:0},s={left:0,top:0},l={borderLeftWidth:"left",borderTopWidth:"top",paddingLeft:"left",paddingTop:"top"};if(!n)return s;for(var h in l)s[l[h]]+=parseInt(e(t,h),10)||0;return i=n.documentElement,void 0!==t.getBoundingClientRect&&(o=t.getBoundingClientRect()),r=a(t),{left:o.left+r.left-(i.clientLeft||0)+s.left,top:o.top+r.top-(i.clientTop||0)+s.top}},A.util.getNodeCanvas=function(t){var e=A.jsdomImplForWrapper(t);return e._canvas||e._image},A.util.cleanUpJsdomNode=function(t){if(A.isLikelyNode){var e=A.jsdomImplForWrapper(t);e&&(e._image=null,e._canvas=null,e._currentSrc=null,e._attributes=null,e._classList=null)}}}(),function(){function t(){}A.util.request=function(e,i){i||(i={});var r=i.method?i.method.toUpperCase():"GET",n=i.onComplete||function(){},o=new A.window.XMLHttpRequest,s=i.body||i.parameters;return o.onreadystatechange=function(){4===o.readyState&&(n(o),o.onreadystatechange=t)},"GET"===r&&(s=null,"string"==typeof i.parameters&&(e=function(t,e){return t+(/\?/.test(t)?"&":"?")+e}(e,i.parameters))),o.open(r,e,!0),"POST"!==r&&"PUT"!==r||o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),o.send(s),o}}(),A.log=console.log,A.warn=console.warn,function(){function t(){return!1}function e(t,e,i,r){return-i*Math.cos(t/r*(Math.PI/2))+i+e}var i=A.window.requestAnimationFrame||A.window.webkitRequestAnimationFrame||A.window.mozRequestAnimationFrame||A.window.oRequestAnimationFrame||A.window.msRequestAnimationFrame||function(t){return A.window.setTimeout(t,1e3/60)},r=A.window.cancelAnimationFrame||A.window.clearTimeout;function n(){return i.apply(A.window,arguments)}A.util.animate=function(i){n((function(r){i||(i={});var o,s=r||+new Date,a=i.duration||500,l=s+a,h=i.onChange||t,c=i.abort||t,u=i.onComplete||t,f=i.easing||e,d="startValue"in i?i.startValue:0,p="endValue"in i?i.endValue:100,g=i.byValue||p-d;i.onStart&&i.onStart(),function t(e){var i=(o=e||+new Date)>l?a:o-s,r=i/a,m=f(i,d,g,a),v=Math.abs((m-d)/g);if(!c())return o>l?(h(p,1,1),void u(p,1,1)):(h(m,v,r),void n(t));u(p,1,1)}(s)}))},A.util.requestAnimFrame=n,A.util.cancelAnimFrame=function(){return r.apply(A.window,arguments)}}(),function(){function t(t,e,i){var r="rgba("+parseInt(t[0]+i*(e[0]-t[0]),10)+","+parseInt(t[1]+i*(e[1]-t[1]),10)+","+parseInt(t[2]+i*(e[2]-t[2]),10);return(r+=","+(t&&e?parseFloat(t[3]+i*(e[3]-t[3])):1))+")"}A.util.animateColor=function(e,i,r,n){var o=new A.Color(e).getSource(),s=new A.Color(i).getSource(),a=n.onComplete,l=n.onChange;n=n||{},A.util.animate(A.util.object.extend(n,{duration:r||500,startValue:o,endValue:s,byValue:s,easing:function(e,i,r,o){return t(i,r,n.colorEasing?n.colorEasing(e,o):1-Math.cos(e/o*(Math.PI/2)))},onComplete:function(e,i,r){if(a)return a(t(s,s,0),i,r)},onChange:function(e,i,r){if(l){if(Array.isArray(e))return l(t(e,e,0),i,r);l(e,i,r)}}}))}}(),function(){function t(t,e,i,r){return t<Math.abs(e)?(t=e,r=i/4):r=0===e&&0===t?i/(2*Math.PI)*Math.asin(1):i/(2*Math.PI)*Math.asin(e/t),{a:t,c:e,p:i,s:r}}function e(t,e,i){return t.a*Math.pow(2,10*(e-=1))*Math.sin((e*i-t.s)*(2*Math.PI)/t.p)}function i(t,e,i,n){return i-r(n-t,0,i,n)+e}function r(t,e,i,r){return(t/=r)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}A.util.ease={easeInQuad:function(t,e,i,r){return i*(t/=r)*t+e},easeOutQuad:function(t,e,i,r){return-i*(t/=r)*(t-2)+e},easeInOutQuad:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,r){return i*(t/=r)*t*t+e},easeOutCubic:function(t,e,i,r){return i*((t=t/r-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,r){return i*(t/=r)*t*t*t+e},easeOutQuart:function(t,e,i,r){return-i*((t=t/r-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,r){return i*(t/=r)*t*t*t*t+e},easeOutQuint:function(t,e,i,r){return i*((t=t/r-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,r){return-i*Math.cos(t/r*(Math.PI/2))+i+e},easeOutSine:function(t,e,i,r){return i*Math.sin(t/r*(Math.PI/2))+e},easeInOutSine:function(t,e,i,r){return-i/2*(Math.cos(Math.PI*t/r)-1)+e},easeInExpo:function(t,e,i,r){return 0===t?e:i*Math.pow(2,10*(t/r-1))+e},easeOutExpo:function(t,e,i,r){return t===r?e+i:i*(1-Math.pow(2,-10*t/r))+e},easeInOutExpo:function(t,e,i,r){return 0===t?e:t===r?e+i:(t/=r/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,r){return-i*(Math.sqrt(1-(t/=r)*t)-1)+e},easeOutCirc:function(t,e,i,r){return i*Math.sqrt(1-(t=t/r-1)*t)+e},easeInOutCirc:function(t,e,i,r){return(t/=r/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(i,r,n,o){var s=0;return 0===i?r:1==(i/=o)?r+n:(s||(s=.3*o),-e(t(n,n,s,1.70158),i,o)+r)},easeOutElastic:function(e,i,r,n){var o=0;if(0===e)return i;if(1==(e/=n))return i+r;o||(o=.3*n);var s=t(r,r,o,1.70158);return s.a*Math.pow(2,-10*e)*Math.sin((e*n-s.s)*(2*Math.PI)/s.p)+s.c+i},easeInOutElastic:function(i,r,n,o){var s=0;if(0===i)return r;if(2==(i/=o/2))return r+n;s||(s=o*(.3*1.5));var a=t(n,n,s,1.70158);return i<1?-.5*e(a,i,o)+r:a.a*Math.pow(2,-10*(i-=1))*Math.sin((i*o-a.s)*(2*Math.PI)/a.p)*.5+a.c+r},easeInBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),i*(t/=r)*t*((n+1)*t-n)+e},easeOutBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),i*((t=t/r-1)*t*((n+1)*t+n)+1)+e},easeInOutBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),(t/=r/2)<1?i/2*(t*t*((1+(n*=1.525))*t-n))+e:i/2*((t-=2)*t*((1+(n*=1.525))*t+n)+2)+e},easeInBounce:i,easeOutBounce:r,easeInOutBounce:function(t,e,n,o){return t<o/2?.5*i(2*t,0,n,o)+e:.5*r(2*t-o,0,n,o)+.5*n+e}}}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n=e.util.toFixed,o=e.util.parseUnit,s=e.util.multiplyTransformMatrices,a={cx:"left",x:"left",r:"radius",cy:"top",y:"top",display:"visible",visibility:"visible",transform:"transformMatrix","fill-opacity":"fillOpacity","fill-rule":"fillRule","font-family":"fontFamily","font-size":"fontSize","font-style":"fontStyle","font-weight":"fontWeight","letter-spacing":"charSpacing","paint-order":"paintFirst","stroke-dasharray":"strokeDashArray","stroke-dashoffset":"strokeDashOffset","stroke-linecap":"strokeLineCap","stroke-linejoin":"strokeLineJoin","stroke-miterlimit":"strokeMiterLimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-decoration":"textDecoration","text-anchor":"textAnchor",opacity:"opacity","clip-path":"clipPath","clip-rule":"clipRule","vector-effect":"strokeUniform","image-rendering":"imageSmoothing"},l={stroke:"strokeOpacity",fill:"fillOpacity"},h="font-size",c="clip-path";function u(t){return t in a?a[t]:t}function f(t,i,r,n){var a,l="[object Array]"===Object.prototype.toString.call(i);if("fill"!==t&&"stroke"!==t||"none"!==i){if("strokeUniform"===t)return"non-scaling-stroke"===i;if("strokeDashArray"===t)i="none"===i?null:i.replace(/,/g," ").split(/\s+/).map(parseFloat);else if("transformMatrix"===t)i=r&&r.transformMatrix?s(r.transformMatrix,e.parseTransformAttribute(i)):e.parseTransformAttribute(i);else if("visible"===t)i="none"!==i&&"hidden"!==i,r&&!1===r.visible&&(i=!1);else if("opacity"===t)i=parseFloat(i),r&&void 0!==r.opacity&&(i*=r.opacity);else if("textAnchor"===t)i="start"===i?"left":"end"===i?"right":"center";else if("charSpacing"===t)a=o(i,n)/n*1e3;else if("paintFirst"===t){var h=i.indexOf("fill"),c=i.indexOf("stroke");i="fill",(h>-1&&c>-1&&c<h||-1===h&&c>-1)&&(i="stroke")}else{if("href"===t||"xlink:href"===t||"font"===t)return i;if("imageSmoothing"===t)return"optimizeQuality"===i;a=l?i.map(o):o(i,n)}}else i="";return!l&&isNaN(a)?i:a}function d(t){return new RegExp("^("+t.join("|")+")\\b","i")}function p(t,e){var i,r,n,o,s=[];for(n=0,o=e.length;n<o;n++)i=e[n],r=t.getElementsByTagName(i),s=s.concat(Array.prototype.slice.call(r));return s}function g(t,e){var i,r=!0;return(i=m(t,e.pop()))&&e.length&&(r=function(t,e){for(var i,r=!0;t.parentNode&&1===t.parentNode.nodeType&&e.length;)r&&(i=e.pop()),r=m(t=t.parentNode,i);return 0===e.length}(t,e)),i&&r&&0===e.length}function m(t,e){var i,r,n=t.nodeName,o=t.getAttribute("class"),s=t.getAttribute("id");if(i=new RegExp("^"+n,"i"),e=e.replace(i,""),s&&e.length&&(i=new RegExp("#"+s+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"")),o&&e.length)for(r=(o=o.split(" ")).length;r--;)i=new RegExp("\\."+o[r]+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"");return 0===e.length}function v(t,e){var i;if(t.getElementById&&(i=t.getElementById(e)),i)return i;var r,n,o,s=t.getElementsByTagName("*");for(n=0,o=s.length;n<o;n++)if(e===(r=s[n]).getAttribute("id"))return r}e.svgValidTagNamesRegEx=d(["path","circle","polygon","polyline","ellipse","rect","line","image","text"]),e.svgViewBoxElementsRegEx=d(["symbol","image","marker","pattern","view","svg"]),e.svgInvalidAncestorsRegEx=d(["pattern","defs","symbol","metadata","clipPath","mask","desc"]),e.svgValidParentsRegEx=d(["symbol","g","a","svg","clipPath","defs"]),e.cssRules={},e.gradientDefs={},e.clipPaths={},e.parseTransformAttribute=function(){function t(t,i,r){t[r]=Math.tan(e.util.degreesToRadians(i[0]))}var i=e.iMatrix,r=e.reNum,n=e.commaWsp,o="(?:(?:(matrix)\\s*\\(\\s*("+r+")"+n+"("+r+")"+n+"("+r+")"+n+"("+r+")"+n+"("+r+")"+n+"("+r+")\\s*\\))|(?:(translate)\\s*\\(\\s*("+r+")(?:"+n+"("+r+"))?\\s*\\))|(?:(scale)\\s*\\(\\s*("+r+")(?:"+n+"("+r+"))?\\s*\\))|(?:(rotate)\\s*\\(\\s*("+r+")(?:"+n+"("+r+")"+n+"("+r+"))?\\s*\\))|(?:(skewX)\\s*\\(\\s*("+r+")\\s*\\))|(?:(skewY)\\s*\\(\\s*("+r+")\\s*\\)))",s=new RegExp("^\\s*(?:(?:"+o+"(?:"+n+"*"+o+")*)?)\\s*$"),a=new RegExp(o,"g");return function(r){var n=i.concat(),l=[];if(!r||r&&!s.test(r))return n;r.replace(a,(function(r){var s=new RegExp(o).exec(r).filter((function(t){return!!t})),a=s[1],h=s.slice(2).map(parseFloat);switch(a){case"translate":!function(t,e){t[4]=e[0],2===e.length&&(t[5]=e[1])}(n,h);break;case"rotate":h[0]=e.util.degreesToRadians(h[0]),function(t,i){var r=e.util.cos(i[0]),n=e.util.sin(i[0]),o=0,s=0;3===i.length&&(o=i[1],s=i[2]),t[0]=r,t[1]=n,t[2]=-n,t[3]=r,t[4]=o-(r*o-n*s),t[5]=s-(n*o+r*s)}(n,h);break;case"scale":!function(t,e){var i=e[0],r=2===e.length?e[1]:e[0];t[0]=i,t[3]=r}(n,h);break;case"skewX":t(n,h,2);break;case"skewY":t(n,h,1);break;case"matrix":n=h}l.push(n.concat()),n=i.concat()}));for(var h=l[0];l.length>1;)l.shift(),h=e.util.multiplyTransformMatrices(h,l[0]);return h}}();var b=new RegExp("^\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*$");function y(t){if(e.svgViewBoxElementsRegEx.test(t.nodeName)){var i,r,n,s,a,l,h=t.getAttribute("viewBox"),c=1,u=1,f=t.getAttribute("width"),d=t.getAttribute("height"),p=t.getAttribute("x")||0,g=t.getAttribute("y")||0,m=t.getAttribute("preserveAspectRatio")||"",v=!h||!(h=h.match(b)),y=!f||!d||"100%"===f||"100%"===d,x=v&&y,w={},_="",S=0,C=0;if(w.width=0,w.height=0,w.toBeParsed=x,v&&(p||g)&&"#document"!==t.parentNode.nodeName&&(_=" translate("+o(p)+" "+o(g)+") ",a=(t.getAttribute("transform")||"")+_,t.setAttribute("transform",a),t.removeAttribute("x"),t.removeAttribute("y")),x)return w;if(v)return w.width=o(f),w.height=o(d),w;if(i=-parseFloat(h[1]),r=-parseFloat(h[2]),n=parseFloat(h[3]),s=parseFloat(h[4]),w.minX=i,w.minY=r,w.viewBoxWidth=n,w.viewBoxHeight=s,y?(w.width=n,w.height=s):(w.width=o(f),w.height=o(d),c=w.width/n,u=w.height/s),"none"!==(m=e.util.parsePreserveAspectRatioAttribute(m)).alignX&&("meet"===m.meetOrSlice&&(u=c=c>u?u:c),"slice"===m.meetOrSlice&&(u=c=c>u?c:u),S=w.width-n*c,C=w.height-s*c,"Mid"===m.alignX&&(S/=2),"Mid"===m.alignY&&(C/=2),"Min"===m.alignX&&(S=0),"Min"===m.alignY&&(C=0)),1===c&&1===u&&0===i&&0===r&&0===p&&0===g)return w;if((p||g)&&"#document"!==t.parentNode.nodeName&&(_=" translate("+o(p)+" "+o(g)+") "),a=_+" matrix("+c+" 0 0 "+u+" "+(i*c+S)+" "+(r*u+C)+") ","svg"===t.nodeName){for(l=t.ownerDocument.createElementNS(e.svgNS,"g");t.firstChild;)l.appendChild(t.firstChild);t.appendChild(l)}else(l=t).removeAttribute("x"),l.removeAttribute("y"),a=l.getAttribute("transform")+a;return l.setAttribute("transform",a),w}}function x(t,e){var i="xlink:href",r=v(t,e.getAttribute(i).substr(1));if(r&&r.getAttribute(i)&&x(t,r),["gradientTransform","x1","x2","y1","y2","gradientUnits","cx","cy","r","fx","fy"].forEach((function(t){r&&!e.hasAttribute(t)&&r.hasAttribute(t)&&e.setAttribute(t,r.getAttribute(t))})),!e.children.length)for(var n=r.cloneNode(!0);n.firstChild;)e.appendChild(n.firstChild);e.removeAttribute(i)}e.parseSVGDocument=function(t,i,n,o){if(t){!function(t){for(var i=p(t,["use","svg:use"]),r=0;i.length&&r<i.length;){var n,o,s,a,l=i[r],h=(l.getAttribute("xlink:href")||l.getAttribute("href")).substr(1),c=l.getAttribute("x")||0,u=l.getAttribute("y")||0,f=v(t,h).cloneNode(!0),d=(f.getAttribute("transform")||"")+" translate("+c+", "+u+")",g=i.length,m=e.svgNS;if(y(f),/^svg$/i.test(f.nodeName)){var b=f.ownerDocument.createElementNS(m,"g");for(o=0,a=(s=f.attributes).length;o<a;o++)n=s.item(o),b.setAttributeNS(m,n.nodeName,n.nodeValue);for(;f.firstChild;)b.appendChild(f.firstChild);f=b}for(o=0,a=(s=l.attributes).length;o<a;o++)"x"!==(n=s.item(o)).nodeName&&"y"!==n.nodeName&&"xlink:href"!==n.nodeName&&"href"!==n.nodeName&&("transform"===n.nodeName?d=n.nodeValue+" "+d:f.setAttribute(n.nodeName,n.nodeValue));f.setAttribute("transform",d),f.setAttribute("instantiated_by_use","1"),f.removeAttribute("id"),l.parentNode.replaceChild(f,l),i.length===g&&r++}}(t);var s,a,l=e.Object.__uid++,h=y(t),c=e.util.toArray(t.getElementsByTagName("*"));if(h.crossOrigin=o&&o.crossOrigin,h.svgUid=l,0===c.length&&e.isLikelyNode){var u=[];for(s=0,a=(c=t.selectNodes('//*[name(.)!="svg"]')).length;s<a;s++)u[s]=c[s];c=u}var f=c.filter((function(t){return y(t),e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))&&!function(t,e){for(;t&&(t=t.parentNode);)if(t.nodeName&&e.test(t.nodeName.replace("svg:",""))&&!t.getAttribute("instantiated_by_use"))return!0;return!1}(t,e.svgInvalidAncestorsRegEx)}));if(!f||f&&!f.length)i&&i([],{});else{var d={};c.filter((function(t){return"clipPath"===t.nodeName.replace("svg:","")})).forEach((function(t){var i=t.getAttribute("id");d[i]=e.util.toArray(t.getElementsByTagName("*")).filter((function(t){return e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))}))})),e.gradientDefs[l]=e.getGradientDefs(t),e.cssRules[l]=e.getCSSRules(t),e.clipPaths[l]=d,e.parseElements(f,(function(t,r){i&&(i(t,h,r,c),delete e.gradientDefs[l],delete e.cssRules[l],delete e.clipPaths[l])}),r(h),n,o)}}};var w=new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*("+e.reNum+"(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|"+e.reNum+"))?\\s+(.*)");i(e,{parseFontDeclaration:function(t,e){var i=t.match(w);if(i){var r=i[1],n=i[3],s=i[4],a=i[5],l=i[6];r&&(e.fontStyle=r),n&&(e.fontWeight=isNaN(parseFloat(n))?n:parseFloat(n)),s&&(e.fontSize=o(s)),l&&(e.fontFamily=l),a&&(e.lineHeight="normal"===a?1:a)}},getGradientDefs:function(t){var e,i=p(t,["linearGradient","radialGradient","svg:linearGradient","svg:radialGradient"]),r=0,n={};for(r=i.length;r--;)(e=i[r]).getAttribute("xlink:href")&&x(t,e),n[e.getAttribute("id")]=e;return n},parseAttributes:function(t,r,s){if(t){var a,d,p,m={};void 0===s&&(s=t.getAttribute("svgUid")),t.parentNode&&e.svgValidParentsRegEx.test(t.parentNode.nodeName)&&(m=e.parseAttributes(t.parentNode,r,s));var v=r.reduce((function(e,i){return(a=t.getAttribute(i))&&(e[i]=a),e}),{}),b=i(function(t,i){var r={};for(var n in e.cssRules[i])if(g(t,n.split(" ")))for(var o in e.cssRules[i][n])r[o]=e.cssRules[i][n][o];return r}(t,s),e.parseStyleAttribute(t));v=i(v,b),b[c]&&t.setAttribute(c,b[c]),d=p=m.fontSize||e.Text.DEFAULT_SVG_FONT_SIZE,v[h]&&(v[h]=d=o(v[h],p));var y,x,w={};for(var _ in v)x=f(y=u(_),v[_],m,d),w[y]=x;w&&w.font&&e.parseFontDeclaration(w.font,w);var S=i(m,w);return e.svgValidParentsRegEx.test(t.nodeName)?S:function(t){for(var i in l)if(void 0!==t[l[i]]&&""!==t[i]){if(void 0===t[i]){if(!e.Object.prototype[i])continue;t[i]=e.Object.prototype[i]}if(0!==t[i].indexOf("url(")){var r=new e.Color(t[i]);t[i]=r.setAlpha(n(r.getAlpha()*t[l[i]],2)).toRgba()}}return t}(S)}},parseElements:function(t,i,r,n,o){new e.ElementsParser(t,i,r,n,o).parse()},parseStyleAttribute:function(t){var e={},i=t.getAttribute("style");return i?("string"==typeof i?function(t,e){var i,r;t.replace(/;\s*$/,"").split(";").forEach((function(t){var n=t.split(":");i=n[0].trim().toLowerCase(),r=n[1].trim(),e[i]=r}))}(i,e):function(t,e){var i,r;for(var n in t)void 0!==t[n]&&(i=n.toLowerCase(),r=t[n],e[i]=r)}(i,e),e):e},parsePointsAttribute:function(t){if(!t)return null;var e,i,r=[];for(e=0,i=(t=(t=t.replace(/,/g," ").trim()).split(/\s+/)).length;e<i;e+=2)r.push({x:parseFloat(t[e]),y:parseFloat(t[e+1])});return r},getCSSRules:function(t){var i,r,n=t.getElementsByTagName("style"),o={};for(i=0,r=n.length;i<r;i++){var s=n[i].textContent;""!==(s=s.replace(/\/\*[\s\S]*?\*\//g,"")).trim()&&s.match(/[^{]*\{[\s\S]*?\}/g).map((function(t){return t.trim()})).forEach((function(t){var n=t.match(/([\s\S]*?)\s*\{([^}]*)\}/),s={},a=n[2].trim().replace(/;$/,"").split(/\s*;\s*/);for(i=0,r=a.length;i<r;i++){var l=a[i].split(/\s*:\s*/),h=l[0],c=l[1];s[h]=c}(t=n[1]).split(",").forEach((function(t){""!==(t=t.replace(/^svg/i,"").trim())&&(o[t]?e.util.object.extend(o[t],s):o[t]=e.util.object.clone(s))}))}))}return o},loadSVGFromURL:function(t,i,r,n){t=t.replace(/^\n\s*/,"").trim(),new e.util.request(t,{method:"get",onComplete:function(t){var o=t.responseXML;if(!o||!o.documentElement)return i&&i(null),!1;e.parseSVGDocument(o.documentElement,(function(t,e,r,n){i&&i(t,e,r,n)}),r,n)}})},loadSVGFromString:function(t,i,r,n){var o=(new e.window.DOMParser).parseFromString(t.trim(),"text/xml");e.parseSVGDocument(o.documentElement,(function(t,e,r,n){i(t,e,r,n)}),r,n)}})}(e),A.ElementsParser=function(t,e,i,r,n,o){this.elements=t,this.callback=e,this.options=i,this.reviver=r,this.svgUid=i&&i.svgUid||0,this.parsingOptions=n,this.regexUrl=/^url\(['"]?#([^'"]+)['"]?\)/g,this.doc=o},(m=A.ElementsParser.prototype).parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},m.createObjects=function(){var t=this;this.elements.forEach((function(e,i){e.setAttribute("svgUid",t.svgUid),t.createObject(e,i)}))},m.findTag=function(t){return A[A.util.string.capitalize(t.tagName.replace("svg:",""))]},m.createObject=function(t,e){var i=this.findTag(t);if(i&&i.fromElement)try{i.fromElement(t,this.createCallback(e,t),this.options)}catch(t){A.log(t)}else this.checkIfDone()},m.createCallback=function(t,e){var i=this;return function(r){var n;i.resolveGradient(r,e,"fill"),i.resolveGradient(r,e,"stroke"),r instanceof A.Image&&r._originalElement&&(n=r.parsePreserveAspectRatioAttribute(e)),r._removeTransformMatrix(n),i.resolveClipPath(r,e),i.reviver&&i.reviver(e,r),i.instances[t]=r,i.checkIfDone()}},m.extractPropertyDefinition=function(t,e,i){var r=t[e],n=this.regexUrl;if(n.test(r)){n.lastIndex=0;var o=n.exec(r)[1];return n.lastIndex=0,A[i][this.svgUid][o]}},m.resolveGradient=function(t,e,i){var r=this.extractPropertyDefinition(t,i,"gradientDefs");if(r){var n=e.getAttribute(i+"-opacity"),o=A.Gradient.fromElement(r,t,n,this.options);t.set(i,o)}},m.createClipPathCallback=function(t,e){return function(t){t._removeTransformMatrix(),t.fillRule=t.clipRule,e.push(t)}},m.resolveClipPath=function(t,e){var i,r,n,o,s=this.extractPropertyDefinition(t,"clipPath","clipPaths");if(s){n=[],r=A.util.invertTransform(t.calcTransformMatrix());for(var a=s[0].parentNode,l=e;l.parentNode&&l.getAttribute("clip-path")!==t.clipPath;)l=l.parentNode;l.parentNode.appendChild(a);for(var h=0;h<s.length;h++)i=s[h],this.findTag(i).fromElement(i,this.createClipPathCallback(t,n),this.options);s=1===n.length?n[0]:new A.Group(n),o=A.util.multiplyTransformMatrices(r,s.calcTransformMatrix()),s.clipPath&&this.resolveClipPath(s,l);var c=A.util.qrDecompose(o);s.flipX=!1,s.flipY=!1,s.set("scaleX",c.scaleX),s.set("scaleY",c.scaleY),s.angle=c.angle,s.skewX=c.skewX,s.skewY=0,s.setPositionByOrigin({x:c.translateX,y:c.translateY},"center","center"),t.clipPath=s}else delete t.clipPath},m.checkIfDone=function(){0==--this.numElements&&(this.instances=this.instances.filter((function(t){return null!=t})),this.callback(this.instances,this.elements))},function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t,e){this.x=t,this.y=e}e.Point?e.warn("fabric.Point is already defined"):(e.Point=i,i.prototype={type:"point",constructor:i,add:function(t){return new i(this.x+t.x,this.y+t.y)},addEquals:function(t){return this.x+=t.x,this.y+=t.y,this},scalarAdd:function(t){return new i(this.x+t,this.y+t)},scalarAddEquals:function(t){return this.x+=t,this.y+=t,this},subtract:function(t){return new i(this.x-t.x,this.y-t.y)},subtractEquals:function(t){return this.x-=t.x,this.y-=t.y,this},scalarSubtract:function(t){return new i(this.x-t,this.y-t)},scalarSubtractEquals:function(t){return this.x-=t,this.y-=t,this},multiply:function(t){return new i(this.x*t,this.y*t)},multiplyEquals:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return new i(this.x/t,this.y/t)},divideEquals:function(t){return this.x/=t,this.y/=t,this},eq:function(t){return this.x===t.x&&this.y===t.y},lt:function(t){return this.x<t.x&&this.y<t.y},lte:function(t){return this.x<=t.x&&this.y<=t.y},gt:function(t){return this.x>t.x&&this.y>t.y},gte:function(t){return this.x>=t.x&&this.y>=t.y},lerp:function(t,e){return void 0===e&&(e=.5),e=Math.max(Math.min(1,e),0),new i(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)},distanceFrom:function(t){var e=this.x-t.x,i=this.y-t.y;return Math.sqrt(e*e+i*i)},midPointFrom:function(t){return this.lerp(t)},min:function(t){return new i(Math.min(this.x,t.x),Math.min(this.y,t.y))},max:function(t){return new i(Math.max(this.x,t.x),Math.max(this.y,t.y))},toString:function(){return this.x+","+this.y},setXY:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setFromPoint:function(t){return this.x=t.x,this.y=t.y,this},swap:function(t){var e=this.x,i=this.y;this.x=t.x,this.y=t.y,t.x=e,t.y=i},clone:function(){return new i(this.x,this.y)}})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){this.status=t,this.points=[]}e.Intersection?e.warn("fabric.Intersection is already defined"):(e.Intersection=i,e.Intersection.prototype={constructor:i,appendPoint:function(t){return this.points.push(t),this},appendPoints:function(t){return this.points=this.points.concat(t),this}},e.Intersection.intersectLineLine=function(t,r,n,o){var s,a=(o.x-n.x)*(t.y-n.y)-(o.y-n.y)*(t.x-n.x),l=(r.x-t.x)*(t.y-n.y)-(r.y-t.y)*(t.x-n.x),h=(o.y-n.y)*(r.x-t.x)-(o.x-n.x)*(r.y-t.y);if(0!==h){var c=a/h,u=l/h;0<=c&&c<=1&&0<=u&&u<=1?(s=new i("Intersection")).appendPoint(new e.Point(t.x+c*(r.x-t.x),t.y+c*(r.y-t.y))):s=new i}else s=new i(0===a||0===l?"Coincident":"Parallel");return s},e.Intersection.intersectLinePolygon=function(t,e,r){var n,o,s,a,l=new i,h=r.length;for(a=0;a<h;a++)n=r[a],o=r[(a+1)%h],s=i.intersectLineLine(t,e,n,o),l.appendPoints(s.points);return l.points.length>0&&(l.status="Intersection"),l},e.Intersection.intersectPolygonPolygon=function(t,e){var r,n=new i,o=t.length;for(r=0;r<o;r++){var s=t[r],a=t[(r+1)%o],l=i.intersectLinePolygon(s,a,e);n.appendPoints(l.points)}return n.points.length>0&&(n.status="Intersection"),n},e.Intersection.intersectPolygonRectangle=function(t,r,n){var o=r.min(n),s=r.max(n),a=new e.Point(s.x,o.y),l=new e.Point(o.x,s.y),h=i.intersectLinePolygon(o,a,t),c=i.intersectLinePolygon(a,s,t),u=i.intersectLinePolygon(s,l,t),f=i.intersectLinePolygon(l,o,t),d=new i;return d.appendPoints(h.points),d.appendPoints(c.points),d.appendPoints(u.points),d.appendPoints(f.points),d.points.length>0&&(d.status="Intersection"),d})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){t?this._tryParsingColor(t):this.setSource([0,0,0,1])}function r(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}e.Color?e.warn("fabric.Color is already defined."):(e.Color=i,e.Color.prototype={_tryParsingColor:function(t){var e;t in i.colorNameMap&&(t=i.colorNameMap[t]),"transparent"===t&&(e=[255,255,255,0]),e||(e=i.sourceFromHex(t)),e||(e=i.sourceFromRgb(t)),e||(e=i.sourceFromHsl(t)),e||(e=[0,0,0,1]),e&&this.setSource(e)},_rgbToHsl:function(t,i,r){t/=255,i/=255,r/=255;var n,o,s,a=e.util.array.max([t,i,r]),l=e.util.array.min([t,i,r]);if(s=(a+l)/2,a===l)n=o=0;else{var h=a-l;switch(o=s>.5?h/(2-a-l):h/(a+l),a){case t:n=(i-r)/h+(i<r?6:0);break;case i:n=(r-t)/h+2;break;case r:n=(t-i)/h+4}n/=6}return[Math.round(360*n),Math.round(100*o),Math.round(100*s)]},getSource:function(){return this._source},setSource:function(t){this._source=t},toRgb:function(){var t=this.getSource();return"rgb("+t[0]+","+t[1]+","+t[2]+")"},toRgba:function(){var t=this.getSource();return"rgba("+t[0]+","+t[1]+","+t[2]+","+t[3]+")"},toHsl:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsl("+e[0]+","+e[1]+"%,"+e[2]+"%)"},toHsla:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsla("+e[0]+","+e[1]+"%,"+e[2]+"%,"+t[3]+")"},toHex:function(){var t,e,i,r=this.getSource();return t=1===(t=r[0].toString(16)).length?"0"+t:t,e=1===(e=r[1].toString(16)).length?"0"+e:e,i=1===(i=r[2].toString(16)).length?"0"+i:i,t.toUpperCase()+e.toUpperCase()+i.toUpperCase()},toHexa:function(){var t,e=this.getSource();return t=1===(t=(t=Math.round(255*e[3])).toString(16)).length?"0"+t:t,this.toHex()+t.toUpperCase()},getAlpha:function(){return this.getSource()[3]},setAlpha:function(t){var e=this.getSource();return e[3]=t,this.setSource(e),this},toGrayscale:function(){var t=this.getSource(),e=parseInt((.3*t[0]+.59*t[1]+.11*t[2]).toFixed(0),10),i=t[3];return this.setSource([e,e,e,i]),this},toBlackWhite:function(t){var e=this.getSource(),i=(.3*e[0]+.59*e[1]+.11*e[2]).toFixed(0),r=e[3];return t=t||127,i=Number(i)<Number(t)?0:255,this.setSource([i,i,i,r]),this},overlayWith:function(t){t instanceof i||(t=new i(t));var e,r=[],n=this.getAlpha(),o=this.getSource(),s=t.getSource();for(e=0;e<3;e++)r.push(Math.round(.5*o[e]+.5*s[e]));return r[3]=n,this.setSource(r),this}},e.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i,e.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i,e.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,e.Color.colorNameMap={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aqua:"#00FFFF",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blue:"#0000FF",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",darkgreen:"#006400",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",fuchsia:"#FF00FF",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",lightgreen:"#90EE90",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",lime:"#00FF00",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",maroon:"#800000",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",navy:"#000080",oldlace:"#FDF5E6",olive:"#808000",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",purple:"#800080",rebeccapurple:"#663399",red:"#FF0000",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",silver:"#C0C0C0",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",teal:"#008080",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",white:"#FFFFFF",whitesmoke:"#F5F5F5",yellow:"#FFFF00",yellowgreen:"#9ACD32"},e.Color.fromRgb=function(t){return i.fromSource(i.sourceFromRgb(t))},e.Color.sourceFromRgb=function(t){var e=t.match(i.reRGBa);if(e){var r=parseInt(e[1],10)/(/%$/.test(e[1])?100:1)*(/%$/.test(e[1])?255:1),n=parseInt(e[2],10)/(/%$/.test(e[2])?100:1)*(/%$/.test(e[2])?255:1),o=parseInt(e[3],10)/(/%$/.test(e[3])?100:1)*(/%$/.test(e[3])?255:1);return[parseInt(r,10),parseInt(n,10),parseInt(o,10),e[4]?parseFloat(e[4]):1]}},e.Color.fromRgba=i.fromRgb,e.Color.fromHsl=function(t){return i.fromSource(i.sourceFromHsl(t))},e.Color.sourceFromHsl=function(t){var e=t.match(i.reHSLa);if(e){var n,o,s,a=(parseFloat(e[1])%360+360)%360/360,l=parseFloat(e[2])/(/%$/.test(e[2])?100:1),h=parseFloat(e[3])/(/%$/.test(e[3])?100:1);if(0===l)n=o=s=h;else{var c=h<=.5?h*(l+1):h+l-h*l,u=2*h-c;n=r(u,c,a+1/3),o=r(u,c,a),s=r(u,c,a-1/3)}return[Math.round(255*n),Math.round(255*o),Math.round(255*s),e[4]?parseFloat(e[4]):1]}},e.Color.fromHsla=i.fromHsl,e.Color.fromHex=function(t){return i.fromSource(i.sourceFromHex(t))},e.Color.sourceFromHex=function(t){if(t.match(i.reHex)){var e=t.slice(t.indexOf("#")+1),r=3===e.length||4===e.length,n=8===e.length||4===e.length,o=r?e.charAt(0)+e.charAt(0):e.substring(0,2),s=r?e.charAt(1)+e.charAt(1):e.substring(2,4),a=r?e.charAt(2)+e.charAt(2):e.substring(4,6),l=n?r?e.charAt(3)+e.charAt(3):e.substring(6,8):"FF";return[parseInt(o,16),parseInt(s,16),parseInt(a,16),parseFloat((parseInt(l,16)/255).toFixed(2))]}},e.Color.fromSource=function(t){var e=new i;return e.setSource(t),e})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=["e","se","s","sw","w","nw","n","ne","e"],r=["ns","nesw","ew","nwse"],n={},o="left",s="top",a="right",l="bottom",h="center",c={top:l,bottom:s,left:a,right:o,center:h},u=e.util.radiansToDegrees,f=Math.sign||function(t){return(t>0)-(t<0)||+t};function d(t,e){var i=t.angle+u(Math.atan2(e.y,e.x))+360;return Math.round(i%360/45)}function p(t,i){var r=i.transform.target,n=r.canvas,o=e.util.object.clone(i);o.target=r,n&&n.fire("object:"+t,o),r.fire(t,i)}function g(t,e){var i=e.canvas,r=t[i.uniScaleKey];return i.uniformScaling&&!r||!i.uniformScaling&&r}function m(t){return t.originX===h&&t.originY===h}function v(t,e,i){var r=t.lockScalingX,n=t.lockScalingY;return!((!r||!n)&&(e||!r&&!n||!i)&&(!r||"x"!==e)&&(!n||"y"!==e))}function b(t,e,i,r){return{e:t,transform:e,pointer:{x:i,y:r}}}function y(t){return function(e,i,r,n){var o=i.target,s=o.getCenterPoint(),a=o.translateToOriginPoint(s,i.originX,i.originY),l=t(e,i,r,n);return o.setPositionByOrigin(a,i.originX,i.originY),l}}function x(t,i,r,n,o){var s=t.target,a=s.controls[t.corner],l=s.canvas.getZoom(),h=s.padding/l,c=s.toLocalPoint(new e.Point(n,o),i,r);return c.x>=h&&(c.x-=h),c.x<=-h&&(c.x+=h),c.y>=h&&(c.y-=h),c.y<=h&&(c.y+=h),c.x-=a.offsetX,c.y-=a.offsetY,c}function w(t){return t.flipX!==t.flipY}function _(t,e,i,r,n){if(0!==t[e]){var o=n/t._getTransformedDimensions()[r]*t[i];t.set(i,o)}}function S(t,e,i,r){var n,h=e.target,c=h._getTransformedDimensions(0,h.skewY),f=x(e,e.originX,e.originY,i,r),d=Math.abs(2*f.x)-c.x,g=h.skewX;d<2?n=0:(n=u(Math.atan2(d/h.scaleX,c.y/h.scaleY)),e.originX===o&&e.originY===l&&(n=-n),e.originX===a&&e.originY===s&&(n=-n),w(h)&&(n=-n));var m=g!==n;if(m){var v=h._getTransformedDimensions().y;h.set("skewX",n),_(h,"skewY","scaleY","y",v),p("skewing",b(t,e,i,r))}return m}function C(t,e,i,r){var n,h=e.target,c=h._getTransformedDimensions(h.skewX,0),f=x(e,e.originX,e.originY,i,r),d=Math.abs(2*f.y)-c.y,g=h.skewY;d<2?n=0:(n=u(Math.atan2(d/h.scaleY,c.x/h.scaleX)),e.originX===o&&e.originY===l&&(n=-n),e.originX===a&&e.originY===s&&(n=-n),w(h)&&(n=-n));var m=g!==n;if(m){var v=h._getTransformedDimensions().x;h.set("skewY",n),_(h,"skewX","scaleX","x",v),p("skewing",b(t,e,i,r))}return m}function A(t,e,i,r,n){n=n||{};var o,s,a,l,h,u,d=e.target,y=d.lockScalingX,w=d.lockScalingY,_=n.by,S=g(t,d),C=v(d,_,S),A=e.gestureScale;if(C)return!1;if(A)s=e.scaleX*A,a=e.scaleY*A;else{if(o=x(e,e.originX,e.originY,i,r),h="y"!==_?f(o.x):1,u="x"!==_?f(o.y):1,e.signX||(e.signX=h),e.signY||(e.signY=u),d.lockScalingFlip&&(e.signX!==h||e.signY!==u))return!1;if(l=d._getTransformedDimensions(),S&&!_){var L,T=Math.abs(o.x)+Math.abs(o.y),k=e.original,O=T/(Math.abs(l.x*k.scaleX/d.scaleX)+Math.abs(l.y*k.scaleY/d.scaleY));s=k.scaleX*O,a=k.scaleY*O}else s=Math.abs(o.x*d.scaleX/l.x),a=Math.abs(o.y*d.scaleY/l.y);m(e)&&(s*=2,a*=2),e.signX!==h&&"y"!==_&&(e.originX=c[e.originX],s*=-1,e.signX=h),e.signY!==u&&"x"!==_&&(e.originY=c[e.originY],a*=-1,e.signY=u)}var N=d.scaleX,P=d.scaleY;return _?("x"===_&&d.set("scaleX",s),"y"===_&&d.set("scaleY",a)):(!y&&d.set("scaleX",s),!w&&d.set("scaleY",a)),(L=N!==d.scaleX||P!==d.scaleY)&&p("scaling",b(t,e,i,r)),L}n.scaleCursorStyleHandler=function(t,e,r){var n=g(t,r),o="";if(0!==e.x&&0===e.y?o="x":0===e.x&&0!==e.y&&(o="y"),v(r,o,n))return"not-allowed";var s=d(r,e);return i[s]+"-resize"},n.skewCursorStyleHandler=function(t,e,i){var n="not-allowed";if(0!==e.x&&i.lockSkewingY)return n;if(0!==e.y&&i.lockSkewingX)return n;var o=d(i,e)%4;return r[o]+"-resize"},n.scaleSkewCursorStyleHandler=function(t,e,i){return t[i.canvas.altActionKey]?n.skewCursorStyleHandler(t,e,i):n.scaleCursorStyleHandler(t,e,i)},n.rotationWithSnapping=y((function(t,e,i,r){var n=e,o=n.target,s=o.translateToOriginPoint(o.getCenterPoint(),n.originX,n.originY);if(o.lockRotation)return!1;var a,l=Math.atan2(n.ey-s.y,n.ex-s.x),h=Math.atan2(r-s.y,i-s.x),c=u(h-l+n.theta);if(o.snapAngle>0){var f=o.snapAngle,d=o.snapThreshold||f,g=Math.ceil(c/f)*f,m=Math.floor(c/f)*f;Math.abs(c-m)<d?c=m:Math.abs(c-g)<d&&(c=g)}return c<0&&(c=360+c),c%=360,a=o.angle!==c,o.angle=c,a&&p("rotating",b(t,e,i,r)),a})),n.scalingEqually=y((function(t,e,i,r){return A(t,e,i,r)})),n.scalingX=y((function(t,e,i,r){return A(t,e,i,r,{by:"x"})})),n.scalingY=y((function(t,e,i,r){return A(t,e,i,r,{by:"y"})})),n.scalingYOrSkewingX=function(t,e,i,r){return t[e.target.canvas.altActionKey]?n.skewHandlerX(t,e,i,r):n.scalingY(t,e,i,r)},n.scalingXOrSkewingY=function(t,e,i,r){return t[e.target.canvas.altActionKey]?n.skewHandlerY(t,e,i,r):n.scalingX(t,e,i,r)},n.changeWidth=y((function(t,e,i,r){var n,o=e.target,s=x(e,e.originX,e.originY,i,r),a=o.strokeWidth/(o.strokeUniform?o.scaleX:1),l=m(e)?2:1,h=o.width,c=Math.abs(s.x*l/o.scaleX)-a;return o.set("width",Math.max(c,0)),(n=h!==c)&&p("resizing",b(t,e,i,r)),n})),n.skewHandlerX=function(t,e,i,r){var n,l=e.target,c=l.skewX,u=e.originY;return!l.lockSkewingX&&(0===c?n=x(e,h,h,i,r).x>0?o:a:(c>0&&(n=u===s?o:a),c<0&&(n=u===s?a:o),w(l)&&(n=n===o?a:o)),e.originX=n,y(S)(t,e,i,r))},n.skewHandlerY=function(t,e,i,r){var n,a=e.target,c=a.skewY,u=e.originX;return!a.lockSkewingY&&(0===c?n=x(e,h,h,i,r).y>0?s:l:(c>0&&(n=u===o?s:l),c<0&&(n=u===o?l:s),w(a)&&(n=n===s?l:s)),e.originY=n,y(C)(t,e,i,r))},n.dragHandler=function(t,e,i,r){var n=e.target,o=i-e.offsetX,s=r-e.offsetY,a=!n.get("lockMovementX")&&n.left!==o,l=!n.get("lockMovementY")&&n.top!==s;return a&&n.set("left",o),l&&n.set("top",s),(a||l)&&p("moving",b(t,e,i,r)),a||l},n.scaleOrSkewActionName=function(t,e,i){var r=t[i.canvas.altActionKey];return 0===e.x?r?"skewX":"scaleY":0===e.y?r?"skewY":"scaleX":void 0},n.rotationStyleHandler=function(t,e,i){return i.lockRotation?"not-allowed":e.cursorStyle},n.fireEvent=p,n.wrapWithFixedAnchor=y,n.getLocalPoint=x,e.controlsUtils=n}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians,r=e.controlsUtils;r.renderCircleControl=function(t,e,i,r,n){r=r||{};var o,s=this.sizeX||r.cornerSize||n.cornerSize,a=this.sizeY||r.cornerSize||n.cornerSize,l=void 0!==r.transparentCorners?r.transparentCorners:this.transparentCorners,h=l?"stroke":"fill",c=!l&&(r.cornerStrokeColor||n.cornerStrokeColor),u=e,f=i;t.save(),t.fillStyle=r.cornerColor||n.cornerColor,t.strokeStyle=r.cornerStrokeColor||n.cornerStrokeColor,s>a?(o=s,t.scale(1,a/s),f=i*s/a):a>s?(o=a,t.scale(s/a,1),u=e*a/s):o=s,t.lineWidth=1,t.beginPath(),t.arc(u,f,o/2,0,2*Math.PI,!1),t[h](),c&&t.stroke(),t.restore()},r.renderSquareControl=function(t,e,r,n,o){n=n||{};var s=this.sizeX||n.cornerSize||o.cornerSize,a=this.sizeY||n.cornerSize||o.cornerSize,l=void 0!==n.transparentCorners?n.transparentCorners:o.transparentCorners,h=l?"stroke":"fill",c=!l&&(n.cornerStrokeColor||o.cornerStrokeColor),u=s/2,f=a/2;t.save(),t.fillStyle=n.cornerColor||o.cornerColor,t.strokeStyle=n.strokeCornerColor||o.strokeCornerColor,t.lineWidth=1,t.translate(e,r),t.rotate(i(o.angle)),t[h+"Rect"](-u,-f,s,a),c&&t.strokeRect(-u,-f,s,a),t.restore()}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Control=function(t){for(var e in t)this[e]=t[e]},e.Control.prototype={visible:!0,actionName:"scale",angle:0,x:0,y:0,offsetX:0,offsetY:0,sizeX:null,sizeY:null,touchSizeX:null,touchSizeY:null,cursorStyle:"crosshair",withConnection:!1,actionHandler:function(){},mouseDownHandler:function(){},mouseUpHandler:function(){},getActionHandler:function(){return this.actionHandler},getMouseDownHandler:function(){return this.mouseDownHandler},getMouseUpHandler:function(){return this.mouseUpHandler},cursorStyleHandler:function(t,e){return e.cursorStyle},getActionName:function(t,e){return e.actionName},getVisibility:function(t,e){var i=t._controlsVisibility;return i&&void 0!==i[e]?i[e]:this.visible},setVisibility:function(t){this.visible=t},positionHandler:function(t,i){return e.util.transformPoint({x:this.x*t.x+this.offsetX,y:this.y*t.y+this.offsetY},i)},calcCornerCoords:function(t,i,r,n,o){var s,a,l,h,c=o?this.touchSizeX:this.sizeX,u=o?this.touchSizeY:this.sizeY;if(c&&u&&c!==u){var f=Math.atan2(u,c),d=Math.sqrt(c*c+u*u)/2,p=f-e.util.degreesToRadians(t),g=Math.PI/2-f-e.util.degreesToRadians(t);s=d*e.util.cos(p),a=d*e.util.sin(p),l=d*e.util.cos(g),h=d*e.util.sin(g)}else d=.7071067812*(c&&u?c:i),p=e.util.degreesToRadians(45-t),s=l=d*e.util.cos(p),a=h=d*e.util.sin(p);return{tl:{x:r-h,y:n-l},tr:{x:r+s,y:n-a},bl:{x:r-s,y:n+a},br:{x:r+h,y:n+l}}},render:function(t,i,r,n,o){switch((n=n||{}).cornerStyle||o.cornerStyle){case"circle":e.controlsUtils.renderCircleControl.call(this,t,i,r,n,o);break;default:e.controlsUtils.renderSquareControl.call(this,t,i,r,n,o)}}}}(e),function(){function t(t,e){var i,r,n,o,s=t.getAttribute("style"),a=t.getAttribute("offset")||0;if(a=(a=parseFloat(a)/(/%$/.test(a)?100:1))<0?0:a>1?1:a,s){var l=s.split(/\s*;\s*/);for(""===l[l.length-1]&&l.pop(),o=l.length;o--;){var h=l[o].split(/\s*:\s*/),c=h[0].trim(),u=h[1].trim();"stop-color"===c?i=u:"stop-opacity"===c&&(n=u)}}return i||(i=t.getAttribute("stop-color")||"rgb(0,0,0)"),n||(n=t.getAttribute("stop-opacity")),r=(i=new A.Color(i)).getAlpha(),n=isNaN(parseFloat(n))?1:parseFloat(n),n*=r*e,{offset:a,color:i.toRgb(),opacity:n}}var e=A.util.object.clone;A.Gradient=A.util.createClass({offsetX:0,offsetY:0,gradientTransform:null,gradientUnits:"pixels",type:"linear",initialize:function(t){t||(t={}),t.coords||(t.coords={});var e,i=this;Object.keys(t).forEach((function(e){i[e]=t[e]})),this.id?this.id+="_"+A.Object.__uid++:this.id=A.Object.__uid++,e={x1:t.coords.x1||0,y1:t.coords.y1||0,x2:t.coords.x2||0,y2:t.coords.y2||0},"radial"===this.type&&(e.r1=t.coords.r1||0,e.r2=t.coords.r2||0),this.coords=e,this.colorStops=t.colorStops.slice()},addColorStop:function(t){for(var e in t){var i=new A.Color(t[e]);this.colorStops.push({offset:parseFloat(e),color:i.toRgb(),opacity:i.getAlpha()})}return this},toObject:function(t){var e={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};return A.util.populateWithProperties(this,e,t),e},toSVG:function(t,i){var r,n,o,s,a=e(this.coords,!0),l=(i=i||{},e(this.colorStops,!0)),h=a.r1>a.r2,c=this.gradientTransform?this.gradientTransform.concat():A.iMatrix.concat(),u=-this.offsetX,f=-this.offsetY,d=!!i.additionalTransform,p="pixels"===this.gradientUnits?"userSpaceOnUse":"objectBoundingBox";if(l.sort((function(t,e){return t.offset-e.offset})),"objectBoundingBox"===p?(u/=t.width,f/=t.height):(u+=t.width/2,f+=t.height/2),"path"===t.type&&"percentage"!==this.gradientUnits&&(u-=t.pathOffset.x,f-=t.pathOffset.y),c[4]-=u,c[5]-=f,s='id="SVGID_'+this.id+'" gradientUnits="'+p+'"',s+=' gradientTransform="'+(d?i.additionalTransform+" ":"")+A.util.matrixToSVG(c)+'" ',"linear"===this.type?o=["<linearGradient ",s,' x1="',a.x1,'" y1="',a.y1,'" x2="',a.x2,'" y2="',a.y2,'">\n']:"radial"===this.type&&(o=["<radialGradient ",s,' cx="',h?a.x1:a.x2,'" cy="',h?a.y1:a.y2,'" r="',h?a.r1:a.r2,'" fx="',h?a.x2:a.x1,'" fy="',h?a.y2:a.y1,'">\n']),"radial"===this.type){if(h)for((l=l.concat()).reverse(),r=0,n=l.length;r<n;r++)l[r].offset=1-l[r].offset;var g=Math.min(a.r1,a.r2);if(g>0){var m=g/Math.max(a.r1,a.r2);for(r=0,n=l.length;r<n;r++)l[r].offset+=m*(1-l[r].offset)}}for(r=0,n=l.length;r<n;r++){var v=l[r];o.push("<stop ",'offset="',100*v.offset+"%",'" style="stop-color:',v.color,void 0!==v.opacity?";stop-opacity: "+v.opacity:";",'"/>\n')}return o.push("linear"===this.type?"</linearGradient>\n":"</radialGradient>\n"),o.join("")},toLive:function(t){var e,i,r,n=A.util.object.clone(this.coords);if(this.type){for("linear"===this.type?e=t.createLinearGradient(n.x1,n.y1,n.x2,n.y2):"radial"===this.type&&(e=t.createRadialGradient(n.x1,n.y1,n.r1,n.x2,n.y2,n.r2)),i=0,r=this.colorStops.length;i<r;i++){var o=this.colorStops[i].color,s=this.colorStops[i].opacity,a=this.colorStops[i].offset;void 0!==s&&(o=new A.Color(o).setAlpha(s).toRgba()),e.addColorStop(a,o)}return e}}}),A.util.object.extend(A.Gradient,{fromElement:function(e,i,r,n){var o=parseFloat(r)/(/%$/.test(r)?100:1);o=o<0?0:o>1?1:o,isNaN(o)&&(o=1);var s,a,l,h,c=e.getElementsByTagName("stop"),u="userSpaceOnUse"===e.getAttribute("gradientUnits")?"pixels":"percentage",f=e.getAttribute("gradientTransform")||"",d=[],p=0,g=0;for("linearGradient"===e.nodeName||"LINEARGRADIENT"===e.nodeName?(s="linear",a=function(t){return{x1:t.getAttribute("x1")||0,y1:t.getAttribute("y1")||0,x2:t.getAttribute("x2")||"100%",y2:t.getAttribute("y2")||0}}(e)):(s="radial",a=function(t){return{x1:t.getAttribute("fx")||t.getAttribute("cx")||"50%",y1:t.getAttribute("fy")||t.getAttribute("cy")||"50%",r1:0,x2:t.getAttribute("cx")||"50%",y2:t.getAttribute("cy")||"50%",r2:t.getAttribute("r")||"50%"}}(e)),l=c.length;l--;)d.push(t(c[l],o));return h=A.parseTransformAttribute(f),function(t,e,i,r){var n,o;Object.keys(e).forEach((function(t){"Infinity"===(n=e[t])?o=1:"-Infinity"===n?o=0:(o=parseFloat(e[t],10),"string"==typeof n&&/^(\d+\.\d+)%|(\d+)%$/.test(n)&&(o*=.01,"pixels"===r&&("x1"!==t&&"x2"!==t&&"r2"!==t||(o*=i.viewBoxWidth||i.width),"y1"!==t&&"y2"!==t||(o*=i.viewBoxHeight||i.height)))),e[t]=o}))}(0,a,n,u),"pixels"===u&&(p=-i.left,g=-i.top),new A.Gradient({id:e.getAttribute("id"),type:s,coords:a,colorStops:d,gradientUnits:u,gradientTransform:h,offsetX:p,offsetY:g})}})}(),function(){"use strict";var t=A.util.toFixed;A.Pattern=A.util.createClass({repeat:"repeat",offsetX:0,offsetY:0,crossOrigin:"",patternTransform:null,initialize:function(t,e){if(t||(t={}),this.id=A.Object.__uid++,this.setOptions(t),!t.source||t.source&&"string"!=typeof t.source)e&&e(this);else{var i=this;this.source=A.util.createImage(),A.util.loadImage(t.source,(function(t,r){i.source=t,e&&e(i,r)}),null,this.crossOrigin)}},toObject:function(e){var i,r,n=A.Object.NUM_FRACTION_DIGITS;return"string"==typeof this.source.src?i=this.source.src:"object"==typeof this.source&&this.source.toDataURL&&(i=this.source.toDataURL()),r={type:"pattern",source:i,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:t(this.offsetX,n),offsetY:t(this.offsetY,n),patternTransform:this.patternTransform?this.patternTransform.concat():null},A.util.populateWithProperties(this,r,e),r},toSVG:function(t){var e="function"==typeof this.source?this.source():this.source,i=e.width/t.width,r=e.height/t.height,n=this.offsetX/t.width,o=this.offsetY/t.height,s="";return"repeat-x"!==this.repeat&&"no-repeat"!==this.repeat||(r=1,o&&(r+=Math.abs(o))),"repeat-y"!==this.repeat&&"no-repeat"!==this.repeat||(i=1,n&&(i+=Math.abs(n))),e.src?s=e.src:e.toDataURL&&(s=e.toDataURL()),'<pattern id="SVGID_'+this.id+'" x="'+n+'" y="'+o+'" width="'+i+'" height="'+r+'">\n<image x="0" y="0" width="'+e.width+'" height="'+e.height+'" xlink:href="'+s+'"></image>\n</pattern>\n'},setOptions:function(t){for(var e in t)this[e]=t[e]},toLive:function(t){var e=this.source;if(!e)return"";if(void 0!==e.src){if(!e.complete)return"";if(0===e.naturalWidth||0===e.naturalHeight)return""}return t.createPattern(e,this.repeat)}})}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.toFixed;e.Shadow?e.warn("fabric.Shadow is already defined."):(e.Shadow=e.util.createClass({color:"rgb(0,0,0)",blur:0,offsetX:0,offsetY:0,affectStroke:!1,includeDefaultValues:!0,nonScaling:!1,initialize:function(t){for(var i in"string"==typeof t&&(t=this._parseShadow(t)),t)this[i]=t[i];this.id=e.Object.__uid++},_parseShadow:function(t){var i=t.trim(),r=e.Shadow.reOffsetsAndBlur.exec(i)||[];return{color:(i.replace(e.Shadow.reOffsetsAndBlur,"")||"rgb(0,0,0)").trim(),offsetX:parseInt(r[1],10)||0,offsetY:parseInt(r[2],10)||0,blur:parseInt(r[3],10)||0}},toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join("px ")},toSVG:function(t){var r=40,n=40,o=e.Object.NUM_FRACTION_DIGITS,s=e.util.rotateVector({x:this.offsetX,y:this.offsetY},e.util.degreesToRadians(-t.angle)),a=new e.Color(this.color);return t.width&&t.height&&(r=100*i((Math.abs(s.x)+this.blur)/t.width,o)+20,n=100*i((Math.abs(s.y)+this.blur)/t.height,o)+20),t.flipX&&(s.x*=-1),t.flipY&&(s.y*=-1),'<filter id="SVGID_'+this.id+'" y="-'+n+'%" height="'+(100+2*n)+'%" x="-'+r+'%" width="'+(100+2*r)+'%" >\n\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+i(this.blur?this.blur/2:0,o)+'"></feGaussianBlur>\n\t<feOffset dx="'+i(s.x,o)+'" dy="'+i(s.y,o)+'" result="oBlur" ></feOffset>\n\t<feFlood flood-color="'+a.toRgb()+'" flood-opacity="'+a.getAlpha()+'"/>\n\t<feComposite in2="oBlur" operator="in" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n\t</feMerge>\n</filter>\n'},toObject:function(){if(this.includeDefaultValues)return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling};var t={},i=e.Shadow.prototype;return["color","blur","offsetX","offsetY","affectStroke","nonScaling"].forEach((function(e){this[e]!==i[e]&&(t[e]=this[e])}),this),t}}),e.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:px)?(?:\s?|$))?(-?\d+(?:px)?(?:\s?|$))?(\d+(?:px)?)?(?:\s?|$)(?:$|\s)/)}(e),function(){"use strict";if(A.StaticCanvas)A.warn("fabric.StaticCanvas is already defined.");else{var t=A.util.object.extend,e=A.util.getElementOffset,i=A.util.removeFromArray,r=A.util.toFixed,n=A.util.transformPoint,o=A.util.invertTransform,s=A.util.getNodeCanvas,a=A.util.createCanvasElement,l=new Error("Could not initialize `canvas` element");A.StaticCanvas=A.util.createClass(A.CommonMethods,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e)},backgroundColor:"",backgroundImage:null,overlayColor:"",overlayImage:null,includeDefaultValues:!0,stateful:!1,renderOnAddRemove:!0,controlsAboveOverlay:!1,allowTouchScrolling:!1,imageSmoothingEnabled:!0,viewportTransform:A.iMatrix.concat(),backgroundVpt:!0,overlayVpt:!0,enableRetinaScaling:!0,vptCoords:{},skipOffscreen:!0,clipPath:void 0,_initStatic:function(t,e){var i=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(t),this._initOptions(e),this.interactive||this._initRetinaScaling(),e.overlayImage&&this.setOverlayImage(e.overlayImage,i),e.backgroundImage&&this.setBackgroundImage(e.backgroundImage,i),e.backgroundColor&&this.setBackgroundColor(e.backgroundColor,i),e.overlayColor&&this.setOverlayColor(e.overlayColor,i),this.calcOffset()},_isRetinaScaling:function(){return 1!==A.devicePixelRatio&&this.enableRetinaScaling},getRetinaScaling:function(){return this._isRetinaScaling()?A.devicePixelRatio:1},_initRetinaScaling:function(){if(this._isRetinaScaling()){var t=A.devicePixelRatio;this.__initRetinaScaling(t,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(t,this.upperCanvasEl,this.contextTop)}},__initRetinaScaling:function(t,e,i){e.setAttribute("width",this.width*t),e.setAttribute("height",this.height*t),i.scale(t,t)},calcOffset:function(){return this._offset=e(this.lowerCanvasEl),this},setOverlayImage:function(t,e,i){return this.__setBgOverlayImage("overlayImage",t,e,i)},setBackgroundImage:function(t,e,i){return this.__setBgOverlayImage("backgroundImage",t,e,i)},setOverlayColor:function(t,e){return this.__setBgOverlayColor("overlayColor",t,e)},setBackgroundColor:function(t,e){return this.__setBgOverlayColor("backgroundColor",t,e)},__setBgOverlayImage:function(t,e,i,r){return"string"==typeof e?A.util.loadImage(e,(function(e,n){if(e){var o=new A.Image(e,r);this[t]=o,o.canvas=this}i&&i(e,n)}),this,r&&r.crossOrigin):(r&&e.setOptions(r),this[t]=e,e&&(e.canvas=this),i&&i(e,!1)),this},__setBgOverlayColor:function(t,e,i){return this[t]=e,this._initGradient(e,t),this._initPattern(e,t,i),this},_createCanvasElement:function(){var t=a();if(!t)throw l;if(t.style||(t.style={}),void 0===t.getContext)throw l;return t},_initOptions:function(t){var e=this.lowerCanvasEl;this._setOptions(t),this.width=this.width||parseInt(e.width,10)||0,this.height=this.height||parseInt(e.height,10)||0,this.lowerCanvasEl.style&&(e.width=this.width,e.height=this.height,e.style.width=this.width+"px",e.style.height=this.height+"px",this.viewportTransform=this.viewportTransform.slice())},_createLowerCanvas:function(t){t&&t.getContext?this.lowerCanvasEl=t:this.lowerCanvasEl=A.util.getById(t)||this._createCanvasElement(),A.util.addClass(this.lowerCanvasEl,"lower-canvas"),this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext("2d")},getWidth:function(){return this.width},getHeight:function(){return this.height},setWidth:function(t,e){return this.setDimensions({width:t},e)},setHeight:function(t,e){return this.setDimensions({height:t},e)},setDimensions:function(t,e){var i;for(var r in e=e||{},t)i=t[r],e.cssOnly||(this._setBackstoreDimension(r,t[r]),i+="px",this.hasLostContext=!0),e.backstoreOnly||this._setCssDimension(r,i);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(),this._initRetinaScaling(),this.calcOffset(),e.cssOnly||this.requestRenderAll(),this},_setBackstoreDimension:function(t,e){return this.lowerCanvasEl[t]=e,this.upperCanvasEl&&(this.upperCanvasEl[t]=e),this.cacheCanvasEl&&(this.cacheCanvasEl[t]=e),this[t]=e,this},_setCssDimension:function(t,e){return this.lowerCanvasEl.style[t]=e,this.upperCanvasEl&&(this.upperCanvasEl.style[t]=e),this.wrapperEl&&(this.wrapperEl.style[t]=e),this},getZoom:function(){return this.viewportTransform[0]},setViewportTransform:function(t){var e,i,r,n=this._activeObject,o=this.backgroundImage,s=this.overlayImage;for(this.viewportTransform=t,i=0,r=this._objects.length;i<r;i++)(e=this._objects[i]).group||e.setCoords(!0);return n&&n.setCoords(),o&&o.setCoords(!0),s&&s.setCoords(!0),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},zoomToPoint:function(t,e){var i=t,r=this.viewportTransform.slice(0);t=n(t,o(this.viewportTransform)),r[0]=e,r[3]=e;var s=n(t,r);return r[4]+=i.x-s.x,r[5]+=i.y-s.y,this.setViewportTransform(r)},setZoom:function(t){return this.zoomToPoint(new A.Point(0,0),t),this},absolutePan:function(t){var e=this.viewportTransform.slice(0);return e[4]=-t.x,e[5]=-t.y,this.setViewportTransform(e)},relativePan:function(t){return this.absolutePan(new A.Point(-t.x-this.viewportTransform[4],-t.y-this.viewportTransform[5]))},getElement:function(){return this.lowerCanvasEl},_onObjectAdded:function(t){this.stateful&&t.setupState(),t._set("canvas",this),t.setCoords(),this.fire("object:added",{target:t}),t.fire("added")},_onObjectRemoved:function(t){this.fire("object:removed",{target:t}),t.fire("removed"),delete t.canvas},clearContext:function(t){return t.clearRect(0,0,this.width,this.height),this},getContext:function(){return this.contextContainer},clear:function(){return this._objects.length=0,this.backgroundImage=null,this.overlayImage=null,this.backgroundColor="",this.overlayColor="",this._hasITextHandlers&&(this.off("mouse:up",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire("canvas:cleared"),this.renderOnAddRemove&&this.requestRenderAll(),this},renderAll:function(){var t=this.contextContainer;return this.renderCanvas(t,this._objects),this},renderAndReset:function(){this.isRendering=0,this.renderAll()},requestRenderAll:function(){return this.isRendering||(this.isRendering=A.util.requestAnimFrame(this.renderAndResetBound)),this},calcViewportBoundaries:function(){var t={},e=this.width,i=this.height,r=o(this.viewportTransform);return t.tl=n({x:0,y:0},r),t.br=n({x:e,y:i},r),t.tr=new A.Point(t.br.x,t.tl.y),t.bl=new A.Point(t.tl.x,t.br.y),this.vptCoords=t,t},cancelRequestedRender:function(){this.isRendering&&(A.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},renderCanvas:function(t,e){var i=this.viewportTransform,r=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(t),A.util.setImageSmoothing(t,this.imageSmoothingEnabled),this.fire("before:render",{ctx:t}),this._renderBackground(t),t.save(),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this._renderObjects(t,e),t.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),r&&(r.canvas=this,r.shouldCache(),r._transformDone=!0,r.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(t)),this._renderOverlay(t),this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),this.fire("after:render",{ctx:t})},drawClipPathOnCanvas:function(t){var e=this.viewportTransform,i=this.clipPath;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t.globalCompositeOperation="destination-in",i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},_renderObjects:function(t,e){var i,r;for(i=0,r=e.length;i<r;++i)e[i]&&e[i].render(t)},_renderBackgroundOrOverlay:function(t,e){var i=this[e+"Color"],r=this[e+"Image"],n=this.viewportTransform,o=this[e+"Vpt"];if(i||r){if(i){t.save(),t.beginPath(),t.moveTo(0,0),t.lineTo(this.width,0),t.lineTo(this.width,this.height),t.lineTo(0,this.height),t.closePath(),t.fillStyle=i.toLive?i.toLive(t,this):i,o&&t.transform(n[0],n[1],n[2],n[3],n[4],n[5]),t.transform(1,0,0,1,i.offsetX||0,i.offsetY||0);var s=i.gradientTransform||i.patternTransform;s&&t.transform(s[0],s[1],s[2],s[3],s[4],s[5]),t.fill(),t.restore()}r&&(t.save(),o&&t.transform(n[0],n[1],n[2],n[3],n[4],n[5]),r.render(t),t.restore())}},_renderBackground:function(t){this._renderBackgroundOrOverlay(t,"background")},_renderOverlay:function(t){this._renderBackgroundOrOverlay(t,"overlay")},getCenter:function(){return{top:this.height/2,left:this.width/2}},centerObjectH:function(t){return this._centerObject(t,new A.Point(this.getCenter().left,t.getCenterPoint().y))},centerObjectV:function(t){return this._centerObject(t,new A.Point(t.getCenterPoint().x,this.getCenter().top))},centerObject:function(t){var e=this.getCenter();return this._centerObject(t,new A.Point(e.left,e.top))},viewportCenterObject:function(t){var e=this.getVpCenter();return this._centerObject(t,e)},viewportCenterObjectH:function(t){var e=this.getVpCenter();return this._centerObject(t,new A.Point(e.x,t.getCenterPoint().y)),this},viewportCenterObjectV:function(t){var e=this.getVpCenter();return this._centerObject(t,new A.Point(t.getCenterPoint().x,e.y))},getVpCenter:function(){var t=this.getCenter(),e=o(this.viewportTransform);return n({x:t.left,y:t.top},e)},_centerObject:function(t,e){return t.setPositionByOrigin(e,"center","center"),t.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},toDatalessJSON:function(t){return this.toDatalessObject(t)},toObject:function(t){return this._toObjectMethod("toObject",t)},toDatalessObject:function(t){return this._toObjectMethod("toDatalessObject",t)},_toObjectMethod:function(e,i){var r=this.clipPath,n={version:A.version,objects:this._toObjects(e,i)};return r&&(n.clipPath=this._toObject(this.clipPath,e,i)),t(n,this.__serializeBgOverlay(e,i)),A.util.populateWithProperties(this,n,i),n},_toObjects:function(t,e){return this._objects.filter((function(t){return!t.excludeFromExport})).map((function(i){return this._toObject(i,t,e)}),this)},_toObject:function(t,e,i){var r;this.includeDefaultValues||(r=t.includeDefaultValues,t.includeDefaultValues=!1);var n=t[e](i);return this.includeDefaultValues||(t.includeDefaultValues=r),n},__serializeBgOverlay:function(t,e){var i={},r=this.backgroundImage,n=this.overlayImage;return this.backgroundColor&&(i.background=this.backgroundColor.toObject?this.backgroundColor.toObject(e):this.backgroundColor),this.overlayColor&&(i.overlay=this.overlayColor.toObject?this.overlayColor.toObject(e):this.overlayColor),r&&!r.excludeFromExport&&(i.backgroundImage=this._toObject(r,t,e)),n&&!n.excludeFromExport&&(i.overlayImage=this._toObject(n,t,e)),i},svgViewportTransformation:!0,toSVG:function(t,e){t||(t={}),t.reviver=e;var i=[];return this._setSVGPreamble(i,t),this._setSVGHeader(i,t),this.clipPath&&i.push('<g clip-path="url(#'+this.clipPath.clipPathId+')" >\n'),this._setSVGBgOverlayColor(i,"background"),this._setSVGBgOverlayImage(i,"backgroundImage",e),this._setSVGObjects(i,e),this.clipPath&&i.push("</g>\n"),this._setSVGBgOverlayColor(i,"overlay"),this._setSVGBgOverlayImage(i,"overlayImage",e),i.push("</svg>"),i.join("")},_setSVGPreamble:function(t,e){e.suppressPreamble||t.push('<?xml version="1.0" encoding="',e.encoding||"UTF-8",'" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n')},_setSVGHeader:function(t,e){var i,n=e.width||this.width,o=e.height||this.height,s='viewBox="0 0 '+this.width+" "+this.height+'" ',a=A.Object.NUM_FRACTION_DIGITS;e.viewBox?s='viewBox="'+e.viewBox.x+" "+e.viewBox.y+" "+e.viewBox.width+" "+e.viewBox.height+'" ':this.svgViewportTransformation&&(i=this.viewportTransform,s='viewBox="'+r(-i[4]/i[0],a)+" "+r(-i[5]/i[3],a)+" "+r(this.width/i[0],a)+" "+r(this.height/i[3],a)+'" '),t.push("<svg ",'xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',n,'" ','height="',o,'" ',s,'xml:space="preserve">\n',"<desc>Created with Fabric.js ",A.version,"</desc>\n","<defs>\n",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(e),"</defs>\n")},createSVGClipPathMarkup:function(t){var e=this.clipPath;return e?(e.clipPathId="CLIPPATH_"+A.Object.__uid++,'<clipPath id="'+e.clipPathId+'" >\n'+this.clipPath.toClipPathSVG(t.reviver)+"</clipPath>\n"):""},createSVGRefElementsMarkup:function(){var t=this;return["background","overlay"].map((function(e){var i=t[e+"Color"];if(i&&i.toLive){var r=t[e+"Vpt"],n=t.viewportTransform,o={width:t.width/(r?n[0]:1),height:t.height/(r?n[3]:1)};return i.toSVG(o,{additionalTransform:r?A.util.matrixToSVG(n):""})}})).join("")},createSVGFontFacesMarkup:function(){var t,e,i,r,n,o,s,a,l="",h={},c=A.fontPaths,u=[];for(this._objects.forEach((function t(e){u.push(e),e._objects&&e._objects.forEach(t)})),s=0,a=u.length;s<a;s++)if(e=(t=u[s]).fontFamily,-1!==t.type.indexOf("text")&&!h[e]&&c[e]&&(h[e]=!0,t.styles))for(n in i=t.styles)for(o in r=i[n])!h[e=r[o].fontFamily]&&c[e]&&(h[e]=!0);for(var f in h)l+=["\t\t@font-face {\n","\t\t\tfont-family: '",f,"';\n","\t\t\tsrc: url('",c[f],"');\n","\t\t}\n"].join("");return l&&(l=['\t<style type="text/css">',"<![CDATA[\n",l,"]]>","</style>\n"].join("")),l},_setSVGObjects:function(t,e){var i,r,n,o=this._objects;for(r=0,n=o.length;r<n;r++)(i=o[r]).excludeFromExport||this._setSVGObject(t,i,e)},_setSVGObject:function(t,e,i){t.push(e.toSVG(i))},_setSVGBgOverlayImage:function(t,e,i){this[e]&&!this[e].excludeFromExport&&this[e].toSVG&&t.push(this[e].toSVG(i))},_setSVGBgOverlayColor:function(t,e){var i=this[e+"Color"],r=this.viewportTransform,n=this.width,o=this.height;if(i)if(i.toLive){var s=i.repeat,a=A.util.invertTransform(r),l=this[e+"Vpt"]?A.util.matrixToSVG(a):"";t.push('<rect transform="'+l+" translate(",n/2,",",o/2,')"',' x="',i.offsetX-n/2,'" y="',i.offsetY-o/2,'" ','width="',"repeat-y"===s||"no-repeat"===s?i.source.width:n,'" height="',"repeat-x"===s||"no-repeat"===s?i.source.height:o,'" fill="url(#SVGID_'+i.id+')"',"></rect>\n")}else t.push('<rect x="0" y="0" width="100%" height="100%" ','fill="',i,'"',"></rect>\n")},sendToBack:function(t){if(!t)return this;var e,r,n,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(e=(n=o._objects).length;e--;)r=n[e],i(this._objects,r),this._objects.unshift(r);else i(this._objects,t),this._objects.unshift(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},bringToFront:function(t){if(!t)return this;var e,r,n,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(n=o._objects,e=0;e<n.length;e++)r=n[e],i(this._objects,r),this._objects.push(r);else i(this._objects,t),this._objects.push(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},sendBackwards:function(t,e){if(!t)return this;var r,n,o,s,a,l=this._activeObject,h=0;if(t===l&&"activeSelection"===t.type)for(a=l._objects,r=0;r<a.length;r++)n=a[r],(o=this._objects.indexOf(n))>0+h&&(s=o-1,i(this._objects,n),this._objects.splice(s,0,n)),h++;else 0!==(o=this._objects.indexOf(t))&&(s=this._findNewLowerIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewLowerIndex:function(t,e,i){var r,n;if(i){for(r=e,n=e-1;n>=0;--n)if(t.intersectsWithObject(this._objects[n])||t.isContainedWithinObject(this._objects[n])||this._objects[n].isContainedWithinObject(t)){r=n;break}}else r=e-1;return r},bringForward:function(t,e){if(!t)return this;var r,n,o,s,a,l=this._activeObject,h=0;if(t===l&&"activeSelection"===t.type)for(r=(a=l._objects).length;r--;)n=a[r],(o=this._objects.indexOf(n))<this._objects.length-1-h&&(s=o+1,i(this._objects,n),this._objects.splice(s,0,n)),h++;else(o=this._objects.indexOf(t))!==this._objects.length-1&&(s=this._findNewUpperIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewUpperIndex:function(t,e,i){var r,n,o;if(i){for(r=e,n=e+1,o=this._objects.length;n<o;++n)if(t.intersectsWithObject(this._objects[n])||t.isContainedWithinObject(this._objects[n])||this._objects[n].isContainedWithinObject(t)){r=n;break}}else r=e+1;return r},moveTo:function(t,e){return i(this._objects,t),this._objects.splice(e,0,t),this.renderOnAddRemove&&this.requestRenderAll()},dispose:function(){return this.isRendering&&(A.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,A.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},toString:function(){return"#<fabric.Canvas ("+this.complexity()+"): { objects: "+this._objects.length+" }>"}}),t(A.StaticCanvas.prototype,A.Observable),t(A.StaticCanvas.prototype,A.Collection),t(A.StaticCanvas.prototype,A.DataURLExporter),t(A.StaticCanvas,{EMPTY_JSON:'{"objects": [], "background": "white"}',supports:function(t){var e=a();if(!e||!e.getContext)return null;var i=e.getContext("2d");if(!i)return null;switch(t){case"setLineDash":return void 0!==i.setLineDash;default:return null}}}),A.StaticCanvas.prototype.toJSON=A.StaticCanvas.prototype.toObject,A.isLikelyNode&&(A.StaticCanvas.prototype.createPNGStream=function(){var t=s(this.lowerCanvasEl);return t&&t.createPNGStream()},A.StaticCanvas.prototype.createJPEGStream=function(t){var e=s(this.lowerCanvasEl);return e&&e.createJPEGStream(t)})}}(),A.BaseBrush=A.util.createClass({color:"rgb(0, 0, 0)",width:1,shadow:null,strokeLineCap:"round",strokeLineJoin:"round",strokeMiterLimit:10,strokeDashArray:null,_setBrushStyles:function(){var t=this.canvas.contextTop;t.strokeStyle=this.color,t.lineWidth=this.width,t.lineCap=this.strokeLineCap,t.miterLimit=this.strokeMiterLimit,t.lineJoin=this.strokeLineJoin,A.StaticCanvas.supports("setLineDash")&&t.setLineDash(this.strokeDashArray||[])},_saveAndTransform:function(t){var e=this.canvas.viewportTransform;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},_setShadow:function(){if(this.shadow){var t=this.canvas,e=this.shadow,i=t.contextTop,r=t.getZoom();t&&t._isRetinaScaling()&&(r*=A.devicePixelRatio),i.shadowColor=e.color,i.shadowBlur=e.blur*r,i.shadowOffsetX=e.offsetX*r,i.shadowOffsetY=e.offsetY*r}},needsFullRender:function(){return new A.Color(this.color).getAlpha()<1||!!this.shadow},_resetShadow:function(){var t=this.canvas.contextTop;t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0}}),A.PencilBrush=A.util.createClass(A.BaseBrush,{decimate:.4,initialize:function(t){this.canvas=t,this._points=[]},_drawSegment:function(t,e,i){var r=e.midPointFrom(i);return t.quadraticCurveTo(e.x,e.y,r.x,r.y),r},onMouseDown:function(t,e){this.canvas._isMainEvent(e.e)&&(this._prepareForDrawing(t),this._captureDrawingPath(t),this._render())},onMouseMove:function(t,e){if(this.canvas._isMainEvent(e.e)&&this._captureDrawingPath(t)&&this._points.length>1)if(this.needsFullRender())this.canvas.clearContext(this.canvas.contextTop),this._render();else{var i=this._points,r=i.length,n=this.canvas.contextTop;this._saveAndTransform(n),this.oldEnd&&(n.beginPath(),n.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(n,i[r-2],i[r-1],!0),n.stroke(),n.restore()}},onMouseUp:function(t){return!this.canvas._isMainEvent(t.e)||(this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},_prepareForDrawing:function(t){var e=new A.Point(t.x,t.y);this._reset(),this._addPoint(e),this.canvas.contextTop.moveTo(e.x,e.y)},_addPoint:function(t){return!(this._points.length>1&&t.eq(this._points[this._points.length-1])||(this._points.push(t),0))},_reset:function(){this._points=[],this._setBrushStyles(),this._setShadow()},_captureDrawingPath:function(t){var e=new A.Point(t.x,t.y);return this._addPoint(e)},_render:function(){var t,e,i=this.canvas.contextTop,r=this._points[0],n=this._points[1];if(this._saveAndTransform(i),i.beginPath(),2===this._points.length&&r.x===n.x&&r.y===n.y){var o=this.width/1e3;r=new A.Point(r.x,r.y),n=new A.Point(n.x,n.y),r.x-=o,n.x+=o}for(i.moveTo(r.x,r.y),t=1,e=this._points.length;t<e;t++)this._drawSegment(i,r,n),r=this._points[t],n=this._points[t+1];i.lineTo(r.x,r.y),i.stroke(),i.restore()},convertPointsToSVGPath:function(t){var e,i=[],r=this.width/1e3,n=new A.Point(t[0].x,t[0].y),o=new A.Point(t[1].x,t[1].y),s=t.length,a=1,l=0,h=s>2;for(h&&(a=t[2].x<o.x?-1:t[2].x===o.x?0:1,l=t[2].y<o.y?-1:t[2].y===o.y?0:1),i.push("M ",n.x-a*r," ",n.y-l*r," "),e=1;e<s;e++){if(!n.eq(o)){var c=n.midPointFrom(o);i.push("Q ",n.x," ",n.y," ",c.x," ",c.y," ")}n=t[e],e+1<t.length&&(o=t[e+1])}return h&&(a=n.x>t[e-2].x?1:n.x===t[e-2].x?0:-1,l=n.y>t[e-2].y?1:n.y===t[e-2].y?0:-1),i.push("L ",n.x+a*r," ",n.y+l*r),i},createPath:function(t){var e=new A.Path(t,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,e.shadow=new A.Shadow(this.shadow)),e},decimatePoints:function(t,e){if(t.length<=2)return t;var i,r=this.canvas.getZoom(),n=Math.pow(e/r,2),o=t.length-1,s=t[0],a=[s];for(i=1;i<o;i++)Math.pow(s.x-t[i].x,2)+Math.pow(s.y-t[i].y,2)>=n&&(s=t[i],a.push(s));return 1===a.length&&a.push(new A.Point(a[0].x,a[0].y)),a},_finalizeAndAddPath:function(){this.canvas.contextTop.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var t=this.convertPointsToSVGPath(this._points).join("");if("M 0 0 Q 0 0 0 0 L 0 0"!==t){var e=this.createPath(t);this.canvas.clearContext(this.canvas.contextTop),this.canvas.fire("before:path:created",{path:e}),this.canvas.add(e),this.canvas.requestRenderAll(),e.setCoords(),this._resetShadow(),this.canvas.fire("path:created",{path:e})}else this.canvas.requestRenderAll()}}),A.CircleBrush=A.util.createClass(A.BaseBrush,{width:10,initialize:function(t){this.canvas=t,this.points=[]},drawDot:function(t){var e=this.addPoint(t),i=this.canvas.contextTop;this._saveAndTransform(i),this.dot(i,e),i.restore()},dot:function(t,e){t.fillStyle=e.fill,t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},onMouseDown:function(t){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(t)},_render:function(){var t,e,i=this.canvas.contextTop,r=this.points;for(this._saveAndTransform(i),t=0,e=r.length;t<e;t++)this.dot(i,r[t]);i.restore()},onMouseMove:function(t){this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(t),this._render()):this.drawDot(t)},onMouseUp:function(){var t,e,i=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;var r=[];for(t=0,e=this.points.length;t<e;t++){var n=this.points[t],o=new A.Circle({radius:n.radius,left:n.x,top:n.y,originX:"center",originY:"center",fill:n.fill});this.shadow&&(o.shadow=new A.Shadow(this.shadow)),r.push(o)}var s=new A.Group(r);s.canvas=this.canvas,this.canvas.fire("before:path:created",{path:s}),this.canvas.add(s),this.canvas.fire("path:created",{path:s}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=i,this.canvas.requestRenderAll()},addPoint:function(t){var e=new A.Point(t.x,t.y),i=A.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,r=new A.Color(this.color).setAlpha(A.util.getRandomInt(0,100)/100).toRgba();return e.radius=i,e.fill=r,this.points.push(e),e}}),A.SprayBrush=A.util.createClass(A.BaseBrush,{width:10,density:20,dotWidth:1,dotWidthVariance:1,randomOpacity:!1,optimizeOverlapping:!0,initialize:function(t){this.canvas=t,this.sprayChunks=[]},onMouseDown:function(t){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseMove:function(t){this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseUp:function(){var t=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;for(var e=[],i=0,r=this.sprayChunks.length;i<r;i++)for(var n=this.sprayChunks[i],o=0,s=n.length;o<s;o++){var a=new A.Rect({width:n[o].width,height:n[o].width,left:n[o].x+1,top:n[o].y+1,originX:"center",originY:"center",fill:this.color});e.push(a)}this.optimizeOverlapping&&(e=this._getOptimizedRects(e));var l=new A.Group(e);this.shadow&&l.set("shadow",new A.Shadow(this.shadow)),this.canvas.fire("before:path:created",{path:l}),this.canvas.add(l),this.canvas.fire("path:created",{path:l}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},_getOptimizedRects:function(t){var e,i,r,n={};for(i=0,r=t.length;i<r;i++)n[e=t[i].left+""+t[i].top]||(n[e]=t[i]);var o=[];for(e in n)o.push(n[e]);return o},render:function(t){var e,i,r=this.canvas.contextTop;for(r.fillStyle=this.color,this._saveAndTransform(r),e=0,i=t.length;e<i;e++){var n=t[e];void 0!==n.opacity&&(r.globalAlpha=n.opacity),r.fillRect(n.x,n.y,n.width,n.width)}r.restore()},_render:function(){var t,e,i=this.canvas.contextTop;for(i.fillStyle=this.color,this._saveAndTransform(i),t=0,e=this.sprayChunks.length;t<e;t++)this.render(this.sprayChunks[t]);i.restore()},addSprayChunk:function(t){this.sprayChunkPoints=[];var e,i,r,n,o=this.width/2;for(n=0;n<this.density;n++){e=A.util.getRandomInt(t.x-o,t.x+o),i=A.util.getRandomInt(t.y-o,t.y+o),r=this.dotWidthVariance?A.util.getRandomInt(Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth;var s=new A.Point(e,i);s.width=r,this.randomOpacity&&(s.opacity=A.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(s)}this.sprayChunks.push(this.sprayChunkPoints)}}),A.PatternBrush=A.util.createClass(A.PencilBrush,{getPatternSrc:function(){var t=A.util.createCanvasElement(),e=t.getContext("2d");return t.width=t.height=25,e.fillStyle=this.color,e.beginPath(),e.arc(10,10,10,0,2*Math.PI,!1),e.closePath(),e.fill(),t},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace("this.color",'"'+this.color+'"')},getPattern:function(){return this.canvas.contextTop.createPattern(this.source||this.getPatternSrc(),"repeat")},_setBrushStyles:function(){this.callSuper("_setBrushStyles"),this.canvas.contextTop.strokeStyle=this.getPattern()},createPath:function(t){var e=this.callSuper("createPath",t),i=e._getLeftTopCoords().scalarAdd(e.strokeWidth/2);return e.stroke=new A.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-i.x,offsetY:-i.y}),e}}),function(){var t=A.util.getPointer,e=A.util.degreesToRadians,i=Math.abs,r=A.StaticCanvas.supports("setLineDash"),n=A.util.isTouchEvent,o=.5;for(var s in A.Canvas=A.util.createClass(A.StaticCanvas,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e),this._initInteractive(),this._createCacheCanvas()},uniformScaling:!0,uniScaleKey:"shiftKey",centeredScaling:!1,centeredRotation:!1,centeredKey:"altKey",altActionKey:"shiftKey",interactive:!0,selection:!0,selectionKey:"shiftKey",altSelectionKey:null,selectionColor:"rgba(100, 100, 255, 0.3)",selectionDashArray:[],selectionBorderColor:"rgba(255, 255, 255, 0.3)",selectionLineWidth:1,selectionFullyContained:!1,hoverCursor:"move",moveCursor:"move",defaultCursor:"default",freeDrawingCursor:"crosshair",rotationCursor:"crosshair",notAllowedCursor:"not-allowed",containerClass:"canvas-container",perPixelTargetFind:!1,targetFindTolerance:0,skipTargetFind:!1,isDrawingMode:!1,preserveObjectStacking:!1,snapAngle:0,snapThreshold:null,stopContextMenu:!1,fireRightClick:!1,fireMiddleClick:!1,targets:[],_hoveredTarget:null,_hoveredTargets:[],_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=A.PencilBrush&&new A.PencilBrush(this),this.calcOffset()},_chooseObjectsToRender:function(){var t,e,i,r=this.getActiveObjects();if(r.length>0&&!this.preserveObjectStacking){e=[],i=[];for(var n=0,o=this._objects.length;n<o;n++)t=this._objects[n],-1===r.indexOf(t)?e.push(t):i.push(t);r.length>1&&(this._activeObject._objects=i),e.push.apply(e,i)}else e=this._objects;return e},renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&this.renderTopLayer(this.contextTop);var t=this.contextContainer;return this.renderCanvas(t,this._chooseObjectsToRender()),this},renderTopLayer:function(t){t.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),this.selection&&this._groupSelector&&(this._drawSelection(t),this.contextTopDirty=!0),t.restore()},renderTop:function(){var t=this.contextTop;return this.clearContext(t),this.renderTopLayer(t),this.fire("after:render"),this},_normalizePointer:function(t,e){var i=t.calcTransformMatrix(),r=A.util.invertTransform(i),n=this.restorePointerVpt(e);return A.util.transformPoint(n,r)},isTargetTransparent:function(t,e,i){if(t.shouldCache()&&t._cacheCanvas&&t!==this._activeObject){var r=this._normalizePointer(t,{x:e,y:i}),n=Math.max(t.cacheTranslationX+r.x*t.zoomX,0),o=Math.max(t.cacheTranslationY+r.y*t.zoomY,0);return A.util.isTransparent(t._cacheContext,Math.round(n),Math.round(o),this.targetFindTolerance)}var s=this.contextCache,a=t.selectionBackgroundColor,l=this.viewportTransform;return t.selectionBackgroundColor="",this.clearContext(s),s.save(),s.transform(l[0],l[1],l[2],l[3],l[4],l[5]),t.render(s),s.restore(),t===this._activeObject&&t._renderControls(s,{hasBorders:!1,transparentCorners:!1},{hasBorders:!1}),t.selectionBackgroundColor=a,A.util.isTransparent(s,e,i,this.targetFindTolerance)},_isSelectionKeyPressed:function(t){return"[object Array]"===Object.prototype.toString.call(this.selectionKey)?!!this.selectionKey.find((function(e){return!0===t[e]})):t[this.selectionKey]},_shouldClearSelection:function(t,e){var i=this.getActiveObjects(),r=this._activeObject;return!e||e&&r&&i.length>1&&-1===i.indexOf(e)&&r!==e&&!this._isSelectionKeyPressed(t)||e&&!e.evented||e&&!e.selectable&&r&&r!==e},_shouldCenterTransform:function(t,e,i){var r;if(t)return"scale"===e||"scaleX"===e||"scaleY"===e||"resizing"===e?r=this.centeredScaling||t.centeredScaling:"rotate"===e&&(r=this.centeredRotation||t.centeredRotation),r?!i:i},_getOriginFromCorner:function(t,e){var i={x:t.originX,y:t.originY};return"ml"===e||"tl"===e||"bl"===e?i.x="right":"mr"!==e&&"tr"!==e&&"br"!==e||(i.x="left"),"tl"===e||"mt"===e||"tr"===e?i.y="bottom":"bl"!==e&&"mb"!==e&&"br"!==e||(i.y="top"),i},_getActionFromCorner:function(t,e,i,r){if(!e||!t)return"drag";var n=r.controls[e];return n.getActionName(i,n,r)},_setupCurrentTransform:function(t,i,r){if(i){var n=this.getPointer(t),o=i.__corner,s=i.controls[o],a=r&&o?s.getActionHandler(t,i,s):A.controlsUtils.dragHandler,l=this._getActionFromCorner(r,o,t,i),h=this._getOriginFromCorner(i,o),c=t[this.centeredKey],u={target:i,action:l,actionHandler:a,corner:o,scaleX:i.scaleX,scaleY:i.scaleY,skewX:i.skewX,skewY:i.skewY,offsetX:n.x-i.left,offsetY:n.y-i.top,originX:h.x,originY:h.y,ex:n.x,ey:n.y,lastX:n.x,lastY:n.y,theta:e(i.angle),width:i.width*i.scaleX,shiftKey:t.shiftKey,altKey:c,original:A.util.saveObjectTransform(i)};this._shouldCenterTransform(i,l,c)&&(u.originX="center",u.originY="center"),u.original.originX=h.x,u.original.originY=h.y,this._currentTransform=u,this._beforeTransform(t)}},setCursor:function(t){this.upperCanvasEl.style.cursor=t},_drawSelection:function(t){var e=this._groupSelector,n=e.left,s=e.top,a=i(n),l=i(s);if(this.selectionColor&&(t.fillStyle=this.selectionColor,t.fillRect(e.ex-(n>0?0:-n),e.ey-(s>0?0:-s),a,l)),this.selectionLineWidth&&this.selectionBorderColor)if(t.lineWidth=this.selectionLineWidth,t.strokeStyle=this.selectionBorderColor,this.selectionDashArray.length>1&&!r){var h=e.ex+o-(n>0?0:a),c=e.ey+o-(s>0?0:l);t.beginPath(),A.util.drawDashedLine(t,h,c,h+a,c,this.selectionDashArray),A.util.drawDashedLine(t,h,c+l-1,h+a,c+l-1,this.selectionDashArray),A.util.drawDashedLine(t,h,c,h,c+l,this.selectionDashArray),A.util.drawDashedLine(t,h+a-1,c,h+a-1,c+l,this.selectionDashArray),t.closePath(),t.stroke()}else A.Object.prototype._setLineDash.call(this,t,this.selectionDashArray),t.strokeRect(e.ex+o-(n>0?0:a),e.ey+o-(s>0?0:l),a,l)},findTarget:function(t,e){if(!this.skipTargetFind){var i,r,o=this.getPointer(t,!0),s=this._activeObject,a=this.getActiveObjects(),l=n(t);if(this.targets=[],a.length>1&&!e&&s===this._searchPossibleTargets([s],o))return s;if(1===a.length&&s._findTargetCorner(o,l))return s;if(1===a.length&&s===this._searchPossibleTargets([s],o)){if(!this.preserveObjectStacking)return s;i=s,r=this.targets,this.targets=[]}var h=this._searchPossibleTargets(this._objects,o);return t[this.altSelectionKey]&&h&&i&&h!==i&&(h=i,this.targets=r),h}},_checkTarget:function(t,e,i){if(e&&e.visible&&e.evented&&(e.containsPoint(t)||e._findTargetCorner(t))){if(!this.perPixelTargetFind&&!e.perPixelTargetFind||e.isEditing)return!0;if(!this.isTargetTransparent(e,i.x,i.y))return!0}},_searchPossibleTargets:function(t,e){for(var i,r,n=t.length;n--;){var o=t[n],s=o.group?this._normalizePointer(o.group,e):e;if(this._checkTarget(s,o,e)){(i=t[n]).subTargetCheck&&i instanceof A.Group&&(r=this._searchPossibleTargets(i._objects,e))&&this.targets.push(r);break}}return i},restorePointerVpt:function(t){return A.util.transformPoint(t,A.util.invertTransform(this.viewportTransform))},getPointer:function(e,i){if(this._absolutePointer&&!i)return this._absolutePointer;if(this._pointer&&i)return this._pointer;var r,n=t(e),o=this.upperCanvasEl,s=o.getBoundingClientRect(),a=s.width||0,l=s.height||0;a&&l||("top"in s&&"bottom"in s&&(l=Math.abs(s.top-s.bottom)),"right"in s&&"left"in s&&(a=Math.abs(s.right-s.left))),this.calcOffset(),n.x=n.x-this._offset.left,n.y=n.y-this._offset.top,i||(n=this.restorePointerVpt(n));var h=this.getRetinaScaling();return 1!==h&&(n.x/=h,n.y/=h),r=0===a||0===l?{width:1,height:1}:{width:o.width/a,height:o.height/l},{x:n.x*r.width,y:n.y*r.height}},_createUpperCanvas:function(){var t=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,""),e=this.lowerCanvasEl,i=this.upperCanvasEl;i?i.className="":(i=this._createCanvasElement(),this.upperCanvasEl=i),A.util.addClass(i,"upper-canvas "+t),this.wrapperEl.appendChild(i),this._copyCanvasStyle(e,i),this._applyCanvasStyle(i),this.contextTop=i.getContext("2d")},_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute("width",this.width),this.cacheCanvasEl.setAttribute("height",this.height),this.contextCache=this.cacheCanvasEl.getContext("2d")},_initWrapperElement:function(){this.wrapperEl=A.util.wrapElement(this.lowerCanvasEl,"div",{class:this.containerClass}),A.util.setStyle(this.wrapperEl,{width:this.width+"px",height:this.height+"px",position:"relative"}),A.util.makeElementUnselectable(this.wrapperEl)},_applyCanvasStyle:function(t){var e=this.width||t.width,i=this.height||t.height;A.util.setStyle(t,{position:"absolute",width:e+"px",height:i+"px",left:0,top:0,"touch-action":this.allowTouchScrolling?"manipulation":"none","-ms-touch-action":this.allowTouchScrolling?"manipulation":"none"}),t.width=e,t.height=i,A.util.makeElementUnselectable(t)},_copyCanvasStyle:function(t,e){e.style.cssText=t.style.cssText},getSelectionContext:function(){return this.contextTop},getSelectionElement:function(){return this.upperCanvasEl},getActiveObject:function(){return this._activeObject},getActiveObjects:function(){var t=this._activeObject;return t?"activeSelection"===t.type&&t._objects?t._objects.slice(0):[t]:[]},_onObjectRemoved:function(t){t===this._activeObject&&(this.fire("before:selection:cleared",{target:t}),this._discardActiveObject(),this.fire("selection:cleared",{target:t}),t.fire("deselected")),t===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper("_onObjectRemoved",t)},_fireSelectionEvents:function(t,e){var i=!1,r=this.getActiveObjects(),n=[],o=[],s={e};t.forEach((function(t){-1===r.indexOf(t)&&(i=!0,t.fire("deselected",s),o.push(t))})),r.forEach((function(e){-1===t.indexOf(e)&&(i=!0,e.fire("selected",s),n.push(e))})),t.length>0&&r.length>0?(s.selected=n,s.deselected=o,s.updated=n[0]||o[0],s.target=this._activeObject,i&&this.fire("selection:updated",s)):r.length>0?(s.selected=n,s.target=this._activeObject,this.fire("selection:created",s)):t.length>0&&(s.deselected=o,this.fire("selection:cleared",s))},setActiveObject:function(t,e){var i=this.getActiveObjects();return this._setActiveObject(t,e),this._fireSelectionEvents(i,e),this},_setActiveObject:function(t,e){return this._activeObject!==t&&!!this._discardActiveObject(e,t)&&!t.onSelect({e})&&(this._activeObject=t,!0)},_discardActiveObject:function(t,e){var i=this._activeObject;if(i){if(i.onDeselect({e:t,object:e}))return!1;this._activeObject=null}return!0},discardActiveObject:function(t){var e=this.getActiveObjects(),i=this.getActiveObject();return e.length&&this.fire("before:selection:cleared",{target:i,e:t}),this._discardActiveObject(t),this._fireSelectionEvents(e,t),this},dispose:function(){var t=this.wrapperEl;return this.removeListeners(),t.removeChild(this.upperCanvasEl),t.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,["upperCanvasEl","cacheCanvasEl"].forEach(function(t){A.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this)),t.parentNode&&t.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,A.StaticCanvas.prototype.dispose.call(this),this},clear:function(){return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper("clear")},drawControls:function(t){var e=this._activeObject;e&&e._renderControls(t)},_toObject:function(t,e,i){var r=this._realizeGroupTransformOnObject(t),n=this.callSuper("_toObject",t,e,i);return this._unwindGroupTransformOnObject(t,r),n},_realizeGroupTransformOnObject:function(t){if(t.group&&"activeSelection"===t.group.type&&this._activeObject===t.group){var e={};return["angle","flipX","flipY","left","scaleX","scaleY","skewX","skewY","top"].forEach((function(i){e[i]=t[i]})),this._activeObject.realizeTransform(t),e}return null},_unwindGroupTransformOnObject:function(t,e){e&&t.set(e)},_setSVGObject:function(t,e,i){var r=this._realizeGroupTransformOnObject(e);this.callSuper("_setSVGObject",t,e,i),this._unwindGroupTransformOnObject(e,r)},setViewportTransform:function(t){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),A.StaticCanvas.prototype.setViewportTransform.call(this,t)}}),A.StaticCanvas)"prototype"!==s&&(A.Canvas[s]=A.StaticCanvas[s])}(),function(){var t=A.util.addListener,e=A.util.removeListener,i={passive:!1};function r(t,e){return t.button&&t.button===e-1}A.util.object.extend(A.Canvas.prototype,{mainTouchId:null,_initEventListeners:function(){this.removeListeners(),this._bindEvents(),this.addOrRemove(t,"add")},_getEventPrefix:function(){return this.enablePointerEvents?"pointer":"mouse"},addOrRemove:function(t,e){var r=this.upperCanvasEl,n=this._getEventPrefix();t(A.window,"resize",this._onResize),t(r,n+"down",this._onMouseDown),t(r,n+"move",this._onMouseMove,i),t(r,n+"out",this._onMouseOut),t(r,n+"enter",this._onMouseEnter),t(r,"wheel",this._onMouseWheel),t(r,"contextmenu",this._onContextMenu),t(r,"dblclick",this._onDoubleClick),t(r,"dragover",this._onDragOver),t(r,"dragenter",this._onDragEnter),t(r,"dragleave",this._onDragLeave),t(r,"drop",this._onDrop),this.enablePointerEvents||t(r,"touchstart",this._onTouchStart,i),"undefined"!=typeof eventjs&&e in eventjs&&(eventjs[e](r,"gesture",this._onGesture),eventjs[e](r,"drag",this._onDrag),eventjs[e](r,"orientation",this._onOrientationChange),eventjs[e](r,"shake",this._onShake),eventjs[e](r,"longpress",this._onLongPress))},removeListeners:function(){this.addOrRemove(e,"remove");var t=this._getEventPrefix();e(A.document,t+"up",this._onMouseUp),e(A.document,"touchend",this._onTouchEnd,i),e(A.document,t+"move",this._onMouseMove,i),e(A.document,"touchmove",this._onMouseMove,i)},_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,"dragenter"),this._onDragLeave=this._simpleEventHandler.bind(this,"dragleave"),this._onDrop=this._simpleEventHandler.bind(this,"drop"),this.eventsBound=!0)},_onGesture:function(t,e){this.__onTransformGesture&&this.__onTransformGesture(t,e)},_onDrag:function(t,e){this.__onDrag&&this.__onDrag(t,e)},_onMouseWheel:function(t){this.__onMouseWheel(t)},_onMouseOut:function(t){var e=this._hoveredTarget;this.fire("mouse:out",{target:e,e:t}),this._hoveredTarget=null,e&&e.fire("mouseout",{e:t});var i=this;this._hoveredTargets.forEach((function(r){i.fire("mouse:out",{target:e,e:t}),r&&e.fire("mouseout",{e:t})})),this._hoveredTargets=[],this._iTextInstances&&this._iTextInstances.forEach((function(t){t.isEditing&&t.hiddenTextarea.focus()}))},_onMouseEnter:function(t){this._currentTransform||this.findTarget(t)||(this.fire("mouse:over",{target:null,e:t}),this._hoveredTarget=null,this._hoveredTargets=[])},_onOrientationChange:function(t,e){this.__onOrientationChange&&this.__onOrientationChange(t,e)},_onShake:function(t,e){this.__onShake&&this.__onShake(t,e)},_onLongPress:function(t,e){this.__onLongPress&&this.__onLongPress(t,e)},_onDragOver:function(t){t.preventDefault();var e=this._simpleEventHandler("dragover",t);this._fireEnterLeaveEvents(e,t)},_onContextMenu:function(t){return this.stopContextMenu&&(t.stopPropagation(),t.preventDefault()),!1},_onDoubleClick:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"dblclick"),this._resetTransformEventData(t)},getPointerId:function(t){var e=t.changedTouches;return e?e[0]&&e[0].identifier:this.enablePointerEvents?t.pointerId:-1},_isMainEvent:function(t){return!0===t.isPrimary||!1!==t.isPrimary&&("touchend"===t.type&&0===t.touches.length||!t.changedTouches||t.changedTouches[0].identifier===this.mainTouchId)},_onTouchStart:function(r){r.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(r)),this.__onMouseDown(r),this._resetTransformEventData();var n=this.upperCanvasEl,o=this._getEventPrefix();t(A.document,"touchend",this._onTouchEnd,i),t(A.document,"touchmove",this._onMouseMove,i),e(n,o+"down",this._onMouseDown)},_onMouseDown:function(r){this.__onMouseDown(r),this._resetTransformEventData();var n=this.upperCanvasEl,o=this._getEventPrefix();e(n,o+"move",this._onMouseMove,i),t(A.document,o+"up",this._onMouseUp),t(A.document,o+"move",this._onMouseMove,i)},_onTouchEnd:function(r){if(!(r.touches.length>0)){this.__onMouseUp(r),this._resetTransformEventData(),this.mainTouchId=null;var n=this._getEventPrefix();e(A.document,"touchend",this._onTouchEnd,i),e(A.document,"touchmove",this._onMouseMove,i);var o=this;this._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout((function(){t(o.upperCanvasEl,n+"down",o._onMouseDown),o._willAddMouseDown=0}),400)}},_onMouseUp:function(r){this.__onMouseUp(r),this._resetTransformEventData();var n=this.upperCanvasEl,o=this._getEventPrefix();this._isMainEvent(r)&&(e(A.document,o+"up",this._onMouseUp),e(A.document,o+"move",this._onMouseMove,i),t(n,o+"move",this._onMouseMove,i))},_onMouseMove:function(t){!this.allowTouchScrolling&&t.preventDefault&&t.preventDefault(),this.__onMouseMove(t)},_onResize:function(){this.calcOffset()},_shouldRender:function(t){var e=this._activeObject;return!!(!!e!=!!t||e&&t&&e!==t)||(e&&e.isEditing,!1)},__onMouseUp:function(t){var e,i=this._currentTransform,n=this._groupSelector,o=!1,s=!n||0===n.left&&0===n.top;if(this._cacheTransformEventData(t),e=this._target,this._handleEvent(t,"up:before"),r(t,3))this.fireRightClick&&this._handleEvent(t,"up",3,s);else{if(r(t,2))return this.fireMiddleClick&&this._handleEvent(t,"up",2,s),void this._resetTransformEventData();if(this.isDrawingMode&&this._isCurrentlyDrawing)this._onMouseUpInDrawingMode(t);else if(this._isMainEvent(t)){if(i&&(this._finalizeCurrentTransform(t),o=i.actionPerformed),!s){var a=e===this._activeObject;this._maybeGroupObjects(t),o||(o=this._shouldRender(e)||!a&&e===this._activeObject)}if(e){var l=e._findTargetCorner(this.getPointer(t,!0),A.util.isTouchEvent(t)),h=e.controls[l],c=h&&h.getMouseUpHandler(t,e,h);if(c){var u=this.getPointer(t);c(t,i,u.x,u.y)}e.isMoving=!1}this._setCursorFromEvent(t,e),this._handleEvent(t,"up",1,s),this._groupSelector=null,this._currentTransform=null,e&&(e.__corner=0),o?this.requestRenderAll():s||this.renderTop()}}},_simpleEventHandler:function(t,e){var i=this.findTarget(e),r=this.targets,n={e,target:i,subTargets:r};if(this.fire(t,n),i&&i.fire(t,n),!r)return i;for(var o=0;o<r.length;o++)r[o].fire(t,n);return i},_handleEvent:function(t,e,i,r){var n=this._target,o=this.targets||[],s={e:t,target:n,subTargets:o,button:i||1,isClick:r||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};"up"===e&&(s.currentTarget=this.findTarget(t),s.currentSubTargets=this.targets),this.fire("mouse:"+e,s),n&&n.fire("mouse"+e,s);for(var a=0;a<o.length;a++)o[a].fire("mouse"+e,s)},_finalizeCurrentTransform:function(t){var e,i=this._currentTransform,r=i.target,n={e:t,target:r,transform:i,action:i.action};r._scaling&&(r._scaling=!1),r.setCoords(),(i.actionPerformed||this.stateful&&r.hasStateChanged())&&(i.actionPerformed&&(e=this._addEventOptions(n,i),this._fire(e,n)),this._fire("modified",n))},_addEventOptions:function(t,e){var i,r;switch(e.action){case"scaleX":i="scaled",r="x";break;case"scaleY":i="scaled",r="y";break;case"skewX":i="skewed",r="x";break;case"skewY":i="skewed",r="y";break;case"scale":i="scaled",r="equally";break;case"rotate":i="rotated";break;case"drag":i="moved"}return t.by=r,i},_onMouseDownInDrawingMode:function(t){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(t).requestRenderAll();var e=this.getPointer(t);this.freeDrawingBrush.onMouseDown(e,{e:t,pointer:e}),this._handleEvent(t,"down")},_onMouseMoveInDrawingMode:function(t){if(this._isCurrentlyDrawing){var e=this.getPointer(t);this.freeDrawingBrush.onMouseMove(e,{e:t,pointer:e})}this.setCursor(this.freeDrawingCursor),this._handleEvent(t,"move")},_onMouseUpInDrawingMode:function(t){var e=this.getPointer(t);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:t,pointer:e}),this._handleEvent(t,"up")},__onMouseDown:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"down:before");var e=this._target;if(r(t,3))this.fireRightClick&&this._handleEvent(t,"down",3);else if(r(t,2))this.fireMiddleClick&&this._handleEvent(t,"down",2);else if(this.isDrawingMode)this._onMouseDownInDrawingMode(t);else if(this._isMainEvent(t)&&!this._currentTransform){var i=this._pointer;this._previousPointer=i;var n=this._shouldRender(e),o=this._shouldGroup(t,e);if(this._shouldClearSelection(t,e)?this.discardActiveObject(t):o&&(this._handleGrouping(t,e),e=this._activeObject),!this.selection||e&&(e.selectable||e.isEditing||e===this._activeObject)||(this._groupSelector={ex:i.x,ey:i.y,top:0,left:0}),e){var s=e===this._activeObject;e.selectable&&this.setActiveObject(e,t);var a=e._findTargetCorner(this.getPointer(t,!0),A.util.isTouchEvent(t));if(e.__corner=a,e===this._activeObject&&(a||!o)){this._setupCurrentTransform(t,e,s);var l=e.controls[a],h=(i=this.getPointer(t),l&&l.getMouseDownHandler(t,e,l));h&&h(t,this._currentTransform,i.x,i.y)}}this._handleEvent(t,"down"),(n||o)&&this.requestRenderAll()}},_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},_cacheTransformEventData:function(t){this._resetTransformEventData(),this._pointer=this.getPointer(t,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(t)||null},_beforeTransform:function(t){var e=this._currentTransform;this.stateful&&e.target.saveState(),this.fire("before:transform",{e:t,transform:e})},__onMouseMove:function(t){var e,i;if(this._handleEvent(t,"move:before"),this._cacheTransformEventData(t),this.isDrawingMode)this._onMouseMoveInDrawingMode(t);else if(this._isMainEvent(t)){var r=this._groupSelector;r?(i=this._pointer,r.left=i.x-r.ex,r.top=i.y-r.ey,this.renderTop()):this._currentTransform?this._transformObject(t):(e=this.findTarget(t)||null,this._setCursorFromEvent(t,e),this._fireOverOutEvents(e,t)),this._handleEvent(t,"move"),this._resetTransformEventData()}},_fireOverOutEvents:function(t,e){var i=this._hoveredTarget,r=this._hoveredTargets,n=this.targets,o=Math.max(r.length,n.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"mouseout",canvasEvtOut:"mouse:out",evtIn:"mouseover",canvasEvtIn:"mouse:over"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(n[s],e,{oldTarget:r[s],evtOut:"mouseout",evtIn:"mouseover"});this._hoveredTarget=t,this._hoveredTargets=this.targets.concat()},_fireEnterLeaveEvents:function(t,e){var i=this._draggedoverTarget,r=this._hoveredTargets,n=this.targets,o=Math.max(r.length,n.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"dragleave",evtIn:"dragenter"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(n[s],e,{oldTarget:r[s],evtOut:"dragleave",evtIn:"dragenter"});this._draggedoverTarget=t},fireSyntheticInOutEvents:function(t,e,i){var r,n,o,s=i.oldTarget,a=s!==t,l=i.canvasEvtIn,h=i.canvasEvtOut;a&&(r={e,target:t,previousTarget:s},n={e,target:s,nextTarget:t}),o=t&&a,s&&a&&(h&&this.fire(h,n),s.fire(i.evtOut,n)),o&&(l&&this.fire(l,r),t.fire(i.evtIn,r))},__onMouseWheel:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"wheel"),this._resetTransformEventData()},_transformObject:function(t){var e=this.getPointer(t),i=this._currentTransform;i.reset=!1,i.target.isMoving=!0,i.shiftKey=t.shiftKey,i.altKey=t[this.centeredKey],this._performTransformAction(t,i,e),i.actionPerformed&&this.requestRenderAll()},_performTransformAction:function(t,e,i){var r=i.x,n=i.y,o=e.action,s=!1,a=e.actionHandler;a&&(s=a(t,e,r,n)),"drag"===o&&s&&this.setCursor(e.target.moveCursor||this.moveCursor),e.actionPerformed=e.actionPerformed||s},_fire:A.controlsUtils.fireEvent,_setCursorFromEvent:function(t,e){if(!e)return this.setCursor(this.defaultCursor),!1;var i=e.hoverCursor||this.hoverCursor,r=this._activeObject&&"activeSelection"===this._activeObject.type?this._activeObject:null,n=(!r||!r.contains(e))&&e._findTargetCorner(this.getPointer(t,!0));n?this.setCursor(this.getCornerCursor(n,e,t)):(e.subTargetCheck&&this.targets.concat().reverse().map((function(t){i=t.hoverCursor||i})),this.setCursor(i))},getCornerCursor:function(t,e,i){var r=e.controls[t];return r.cursorStyleHandler(i,r,e)}})}(),v=Math.min,b=Math.max,A.util.object.extend(A.Canvas.prototype,{_shouldGroup:function(t,e){var i=this._activeObject;return i&&this._isSelectionKeyPressed(t)&&e&&e.selectable&&this.selection&&(i!==e||"activeSelection"===i.type)&&!e.onSelect({e:t})},_handleGrouping:function(t,e){var i=this._activeObject;i.__corner||(e!==i||(e=this.findTarget(t,!0))&&e.selectable)&&(i&&"activeSelection"===i.type?this._updateActiveSelection(e,t):this._createActiveSelection(e,t))},_updateActiveSelection:function(t,e){var i=this._activeObject,r=i._objects.slice(0);i.contains(t)?(i.removeWithUpdate(t),this._hoveredTarget=t,this._hoveredTargets=this.targets.concat(),1===i.size()&&this._setActiveObject(i.item(0),e)):(i.addWithUpdate(t),this._hoveredTarget=i,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(r,e)},_createActiveSelection:function(t,e){var i=this.getActiveObjects(),r=this._createGroup(t);this._hoveredTarget=r,this._setActiveObject(r,e),this._fireSelectionEvents(i,e)},_createGroup:function(t){var e=this._objects,i=e.indexOf(this._activeObject)<e.indexOf(t)?[this._activeObject,t]:[t,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new A.ActiveSelection(i,{canvas:this})},_groupSelectedObjects:function(t){var e,i=this._collectObjects(t);1===i.length?this.setActiveObject(i[0],t):i.length>1&&(e=new A.ActiveSelection(i.reverse(),{canvas:this}),this.setActiveObject(e,t))},_collectObjects:function(t){for(var e,i=[],r=this._groupSelector.ex,n=this._groupSelector.ey,o=r+this._groupSelector.left,s=n+this._groupSelector.top,a=new A.Point(v(r,o),v(n,s)),l=new A.Point(b(r,o),b(n,s)),h=!this.selectionFullyContained,c=r===o&&n===s,u=this._objects.length;u--&&!((e=this._objects[u])&&e.selectable&&e.visible&&(h&&e.intersectsWithRect(a,l)||e.isContainedWithinRect(a,l)||h&&e.containsPoint(a)||h&&e.containsPoint(l))&&(i.push(e),c)););return i.length>1&&(i=i.filter((function(e){return!e.onSelect({e:t})}))),i},_maybeGroupObjects:function(t){this.selection&&this._groupSelector&&this._groupSelectedObjects(t),this.setCursor(this.defaultCursor),this._groupSelector=null}}),A.util.object.extend(A.StaticCanvas.prototype,{toDataURL:function(t){t||(t={});var e=t.format||"png",i=t.quality||1,r=(t.multiplier||1)*(t.enableRetinaScaling?this.getRetinaScaling():1),n=this.toCanvasElement(r,t);return A.util.toDataURL(n,e,i)},toCanvasElement:function(t,e){t=t||1;var i=((e=e||{}).width||this.width)*t,r=(e.height||this.height)*t,n=this.getZoom(),o=this.width,s=this.height,a=n*t,l=this.viewportTransform,h=(l[4]-(e.left||0))*t,c=(l[5]-(e.top||0))*t,u=this.interactive,f=[a,0,0,a,h,c],d=this.enableRetinaScaling,p=A.util.createCanvasElement(),g=this.contextTop;return p.width=i,p.height=r,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=f,this.width=i,this.height=r,this.calcViewportBoundaries(),this.renderCanvas(p.getContext("2d"),this._objects),this.viewportTransform=l,this.width=o,this.height=s,this.calcViewportBoundaries(),this.interactive=u,this.enableRetinaScaling=d,this.contextTop=g,p}}),A.util.object.extend(A.StaticCanvas.prototype,{loadFromJSON:function(t,e,i){if(t){var r="string"==typeof t?JSON.parse(t):A.util.object.clone(t),n=this,o=r.clipPath,s=this.renderOnAddRemove;return this.renderOnAddRemove=!1,delete r.clipPath,this._enlivenObjects(r.objects,(function(t){n.clear(),n._setBgOverlay(r,(function(){o?n._enlivenObjects([o],(function(i){n.clipPath=i[0],n.__setupCanvas.call(n,r,t,s,e)})):n.__setupCanvas.call(n,r,t,s,e)}))}),i),this}},__setupCanvas:function(t,e,i,r){var n=this;e.forEach((function(t,e){n.insertAt(t,e)})),this.renderOnAddRemove=i,delete t.objects,delete t.backgroundImage,delete t.overlayImage,delete t.background,delete t.overlay,this._setOptions(t),this.renderAll(),r&&r()},_setBgOverlay:function(t,e){var i={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};if(t.backgroundImage||t.overlayImage||t.background||t.overlay){var r=function(){i.backgroundImage&&i.overlayImage&&i.backgroundColor&&i.overlayColor&&e&&e()};this.__setBgOverlay("backgroundImage",t.backgroundImage,i,r),this.__setBgOverlay("overlayImage",t.overlayImage,i,r),this.__setBgOverlay("backgroundColor",t.background,i,r),this.__setBgOverlay("overlayColor",t.overlay,i,r)}else e&&e()},__setBgOverlay:function(t,e,i,r){var n=this;if(!e)return i[t]=!0,void(r&&r());"backgroundImage"===t||"overlayImage"===t?A.util.enlivenObjects([e],(function(e){n[t]=e[0],i[t]=!0,r&&r()})):this["set"+A.util.string.capitalize(t,!0)](e,(function(){i[t]=!0,r&&r()}))},_enlivenObjects:function(t,e,i){t&&0!==t.length?A.util.enlivenObjects(t,(function(t){e&&e(t)}),null,i):e&&e([])},_toDataURL:function(t,e){this.clone((function(i){e(i.toDataURL(t))}))},_toDataURLWithMultiplier:function(t,e,i){this.clone((function(r){i(r.toDataURLWithMultiplier(t,e))}))},clone:function(t,e){var i=JSON.stringify(this.toJSON(e));this.cloneWithoutData((function(e){e.loadFromJSON(i,(function(){t&&t(e)}))}))},cloneWithoutData:function(t){var e=A.util.createCanvasElement();e.width=this.width,e.height=this.height;var i=new A.Canvas(e);this.backgroundImage?(i.setBackgroundImage(this.backgroundImage.src,(function(){i.renderAll(),t&&t(i)})),i.backgroundImageOpacity=this.backgroundImageOpacity,i.backgroundImageStretch=this.backgroundImageStretch):t&&t(i)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n=e.util.toFixed,o=e.util.string.capitalize,s=e.util.degreesToRadians,a=e.StaticCanvas.supports("setLineDash"),l=!e.isLikelyNode;e.Object||(e.Object=e.util.createClass(e.CommonMethods,{type:"object",originX:"left",originY:"top",top:0,left:0,width:0,height:0,scaleX:1,scaleY:1,flipX:!1,flipY:!1,opacity:1,angle:0,skewX:0,skewY:0,cornerSize:13,touchCornerSize:24,transparentCorners:!0,hoverCursor:null,moveCursor:null,padding:0,borderColor:"rgb(178,204,255)",borderDashArray:null,cornerColor:"rgb(178,204,255)",cornerStrokeColor:null,cornerStyle:"rect",cornerDashArray:null,centeredScaling:!1,centeredRotation:!0,fill:"rgb(0,0,0)",fillRule:"nonzero",globalCompositeOperation:"source-over",backgroundColor:"",selectionBackgroundColor:"",stroke:null,strokeWidth:1,strokeDashArray:null,strokeDashOffset:0,strokeLineCap:"butt",strokeLineJoin:"miter",strokeMiterLimit:4,shadow:null,borderOpacityWhenMoving:.4,borderScaleFactor:1,minScaleLimit:0,selectable:!0,evented:!0,visible:!0,hasControls:!0,hasBorders:!0,perPixelTargetFind:!1,includeDefaultValues:!0,lockMovementX:!1,lockMovementY:!1,lockRotation:!1,lockScalingX:!1,lockScalingY:!1,lockSkewingX:!1,lockSkewingY:!1,lockScalingFlip:!1,excludeFromExport:!1,objectCaching:l,statefullCache:!1,noScaleCache:!0,strokeUniform:!1,dirty:!0,__corner:0,paintFirst:"fill",stateProperties:"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),cacheProperties:"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),colorProperties:"fill stroke backgroundColor".split(" "),clipPath:void 0,inverted:!1,absolutePositioned:!1,initialize:function(t){t&&this.setOptions(t)},_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=e.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext("2d"),this._updateCacheCanvas(),this.dirty=!0},_limitCacheSize:function(t){var i=e.perfLimitSizeTotal,r=t.width,n=t.height,o=e.maxCacheSideLimit,s=e.minCacheSideLimit;if(r<=o&&n<=o&&r*n<=i)return r<s&&(t.width=s),n<s&&(t.height=s),t;var a=r/n,l=e.util.limitDimsByArea(a,i),h=e.util.capValue,c=h(s,l.x,o),u=h(s,l.y,o);return r>c&&(t.zoomX/=r/c,t.width=c,t.capped=!0),n>u&&(t.zoomY/=n/u,t.height=u,t.capped=!0),t},_getCacheCanvasDimensions:function(){var t=this.getTotalObjectScaling(),e=this._getTransformedDimensions(0,0),i=e.x*t.scaleX/this.scaleX,r=e.y*t.scaleY/this.scaleY;return{width:i+2,height:r+2,zoomX:t.scaleX,zoomY:t.scaleY,x:i,y:r}},_updateCacheCanvas:function(){var t=this.canvas;if(this.noScaleCache&&t&&t._currentTransform){var i=t._currentTransform.target,r=t._currentTransform.action;if(this===i&&r.slice&&"scale"===r.slice(0,5))return!1}var n,o,s=this._cacheCanvas,a=this._limitCacheSize(this._getCacheCanvasDimensions()),l=e.minCacheSideLimit,h=a.width,c=a.height,u=a.zoomX,f=a.zoomY,d=h!==this.cacheWidth||c!==this.cacheHeight,p=this.zoomX!==u||this.zoomY!==f,g=d||p,m=0,v=0,b=!1;if(d){var y=this._cacheCanvas.width,x=this._cacheCanvas.height,w=h>y||c>x;b=w||(h<.9*y||c<.9*x)&&y>l&&x>l,w&&!a.capped&&(h>l||c>l)&&(m=.1*h,v=.1*c)}return!!g&&(b?(s.width=Math.ceil(h+m),s.height=Math.ceil(c+v)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,s.width,s.height)),n=a.x/2,o=a.y/2,this.cacheTranslationX=Math.round(s.width/2-n)+n,this.cacheTranslationY=Math.round(s.height/2-o)+o,this.cacheWidth=h,this.cacheHeight=c,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(u,f),this.zoomX=u,this.zoomY=f,!0)},setOptions:function(t){this._setOptions(t),this._initGradient(t.fill,"fill"),this._initGradient(t.stroke,"stroke"),this._initPattern(t.fill,"fill"),this._initPattern(t.stroke,"stroke")},transform:function(t){var e=this.group&&!this.group._transformDone||this.group&&this.canvas&&t===this.canvas.contextTop,i=this.calcTransformMatrix(!e);t.transform(i[0],i[1],i[2],i[3],i[4],i[5])},toObject:function(t){var i=e.Object.NUM_FRACTION_DIGITS,r={type:this.type,version:e.version,originX:this.originX,originY:this.originY,left:n(this.left,i),top:n(this.top,i),width:n(this.width,i),height:n(this.height,i),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:n(this.strokeWidth,i),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,strokeUniform:this.strokeUniform,strokeMiterLimit:n(this.strokeMiterLimit,i),scaleX:n(this.scaleX,i),scaleY:n(this.scaleY,i),angle:n(this.angle,i),flipX:this.flipX,flipY:this.flipY,opacity:n(this.opacity,i),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,skewX:n(this.skewX,i),skewY:n(this.skewY,i)};return this.clipPath&&(r.clipPath=this.clipPath.toObject(t),r.clipPath.inverted=this.clipPath.inverted,r.clipPath.absolutePositioned=this.clipPath.absolutePositioned),e.util.populateWithProperties(this,r,t),this.includeDefaultValues||(r=this._removeDefaultValues(r)),r},toDatalessObject:function(t){return this.toObject(t)},_removeDefaultValues:function(t){var i=e.util.getKlass(t.type).prototype;return i.stateProperties.forEach((function(e){"left"!==e&&"top"!==e&&(t[e]===i[e]&&delete t[e],"[object Array]"===Object.prototype.toString.call(t[e])&&"[object Array]"===Object.prototype.toString.call(i[e])&&0===t[e].length&&0===i[e].length&&delete t[e])})),t},toString:function(){return"#<fabric."+o(this.type)+">"},getObjectScaling:function(){var t=e.util.qrDecompose(this.calcTransformMatrix());return{scaleX:Math.abs(t.scaleX),scaleY:Math.abs(t.scaleY)}},getTotalObjectScaling:function(){var t=this.getObjectScaling(),e=t.scaleX,i=t.scaleY;if(this.canvas){var r=this.canvas.getZoom(),n=this.canvas.getRetinaScaling();e*=r*n,i*=r*n}return{scaleX:e,scaleY:i}},getObjectOpacity:function(){var t=this.opacity;return this.group&&(t*=this.group.getObjectOpacity()),t},_set:function(t,i){var r="scaleX"===t||"scaleY"===t,n=this[t]!==i,o=!1;return r&&(i=this._constrainScale(i)),"scaleX"===t&&i<0?(this.flipX=!this.flipX,i*=-1):"scaleY"===t&&i<0?(this.flipY=!this.flipY,i*=-1):"shadow"!==t||!i||i instanceof e.Shadow?"dirty"===t&&this.group&&this.group.set("dirty",i):i=new e.Shadow(i),this[t]=i,n&&(o=this.group&&this.group.isOnACache(),this.cacheProperties.indexOf(t)>-1?(this.dirty=!0,o&&this.group.set("dirty",!0)):o&&this.stateProperties.indexOf(t)>-1&&this.group.set("dirty",!0)),this},setOnGroup:function(){},getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:e.iMatrix.concat()},isNotVisible:function(){return 0===this.opacity||!this.width&&!this.height&&0===this.strokeWidth||!this.visible},render:function(t){this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(t.save(),this._setupCompositeOperation(t),this.drawSelectionBackground(t),this.transform(t),this._setOpacity(t),this._setShadow(t,this),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(t)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(t),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:"cacheProperties"})),t.restore())},renderCache:function(t){t=t||{},this._cacheCanvas||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:"cacheProperties"}),this.drawObject(this._cacheContext,t.forClipping),this.dirty=!1)},_removeCacheCanvas:function(){this._cacheCanvas=null,this.cacheWidth=0,this.cacheHeight=0},hasStroke:function(){return this.stroke&&"transparent"!==this.stroke&&0!==this.strokeWidth},hasFill:function(){return this.fill&&"transparent"!==this.fill},needsItsOwnCache:function(){return!("stroke"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||"object"!=typeof this.shadow)||!!this.clipPath},shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},drawClipPathOnCache:function(t){var i=this.clipPath;if(t.save(),i.inverted?t.globalCompositeOperation="destination-out":t.globalCompositeOperation="destination-in",i.absolutePositioned){var r=e.util.invertTransform(this.calcTransformMatrix());t.transform(r[0],r[1],r[2],r[3],r[4],r[5])}i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},drawObject:function(t,e){var i=this.fill,r=this.stroke;e?(this.fill="black",this.stroke="",this._setClippingProperties(t)):this._renderBackground(t),this._render(t),this._drawClipPath(t),this.fill=i,this.stroke=r},_drawClipPath:function(t){var e=this.clipPath;e&&(e.canvas=this.canvas,e.shouldCache(),e._transformDone=!0,e.renderCache({forClipping:!0}),this.drawClipPathOnCache(t))},drawCacheOnCanvas:function(t){t.scale(1/this.zoomX,1/this.zoomY),t.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},isCacheDirty:function(t){if(this.isNotVisible())return!1;if(this._cacheCanvas&&!t&&this._updateCacheCanvas())return!0;if(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged("cacheProperties")){if(this._cacheCanvas&&!t){var e=this.cacheWidth/this.zoomX,i=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-e/2,-i/2,e,i)}return!0}return!1},_renderBackground:function(t){if(this.backgroundColor){var e=this._getNonTransformedDimensions();t.fillStyle=this.backgroundColor,t.fillRect(-e.x/2,-e.y/2,e.x,e.y),this._removeShadow(t)}},_setOpacity:function(t){this.group&&!this.group._transformDone?t.globalAlpha=this.getObjectOpacity():t.globalAlpha*=this.opacity},_setStrokeStyles:function(t,e){var i=e.stroke;i&&(t.lineWidth=e.strokeWidth,t.lineCap=e.strokeLineCap,t.lineDashOffset=e.strokeDashOffset,t.lineJoin=e.strokeLineJoin,t.miterLimit=e.strokeMiterLimit,i.toLive?"percentage"===i.gradientUnits||i.gradientTrasnform||i.patternTransform?this._applyPatternForTransformedGradient(t,i):(t.strokeStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):t.strokeStyle=e.stroke)},_setFillStyles:function(t,e){var i=e.fill;i&&(i.toLive?(t.fillStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,e.fill)):t.fillStyle=i)},_setClippingProperties:function(t){t.globalAlpha=1,t.strokeStyle="transparent",t.fillStyle="#000000"},_setLineDash:function(t,e,i){e&&0!==e.length&&(1&e.length&&e.push.apply(e,e),a?t.setLineDash(e):i&&i(t))},_renderControls:function(t,i){var r,n,o,a=this.getViewportTransform(),l=this.calcTransformMatrix();n=void 0!==(i=i||{}).hasBorders?i.hasBorders:this.hasBorders,o=void 0!==i.hasControls?i.hasControls:this.hasControls,l=e.util.multiplyTransformMatrices(a,l),r=e.util.qrDecompose(l),t.save(),t.translate(r.translateX,r.translateY),t.lineWidth=1*this.borderScaleFactor,this.group||(t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),i.forActiveSelection?(t.rotate(s(r.angle)),n&&this.drawBordersInGroup(t,r,i)):(t.rotate(s(this.angle)),n&&this.drawBorders(t,i)),o&&this.drawControls(t,i),t.restore()},_setShadow:function(t){if(this.shadow){var i,r=this.shadow,n=this.canvas,o=n&&n.viewportTransform[0]||1,s=n&&n.viewportTransform[3]||1;i=r.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),n&&n._isRetinaScaling()&&(o*=e.devicePixelRatio,s*=e.devicePixelRatio),t.shadowColor=r.color,t.shadowBlur=r.blur*e.browserShadowBlurConstant*(o+s)*(i.scaleX+i.scaleY)/4,t.shadowOffsetX=r.offsetX*o*i.scaleX,t.shadowOffsetY=r.offsetY*s*i.scaleY}},_removeShadow:function(t){this.shadow&&(t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0)},_applyPatternGradientTransform:function(t,e){if(!e||!e.toLive)return{offsetX:0,offsetY:0};var i=e.gradientTransform||e.patternTransform,r=-this.width/2+e.offsetX||0,n=-this.height/2+e.offsetY||0;return"percentage"===e.gradientUnits?t.transform(this.width,0,0,this.height,r,n):t.transform(1,0,0,1,r,n),i&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),{offsetX:r,offsetY:n}},_renderPaintInOrder:function(t){"stroke"===this.paintFirst?(this._renderStroke(t),this._renderFill(t)):(this._renderFill(t),this._renderStroke(t))},_render:function(){},_renderFill:function(t){this.fill&&(t.save(),this._setFillStyles(t,this),"evenodd"===this.fillRule?t.fill("evenodd"):t.fill(),t.restore())},_renderStroke:function(t){if(this.stroke&&0!==this.strokeWidth){if(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this.strokeUniform&&this.group){var e=this.getObjectScaling();t.scale(1/e.scaleX,1/e.scaleY)}else this.strokeUniform&&t.scale(1/this.scaleX,1/this.scaleY);this._setLineDash(t,this.strokeDashArray,this._renderDashedStroke),this._setStrokeStyles(t,this),t.stroke(),t.restore()}},_applyPatternForTransformedGradient:function(t,i){var r,n=this._limitCacheSize(this._getCacheCanvasDimensions()),o=e.util.createCanvasElement(),s=this.canvas.getRetinaScaling(),a=n.x/this.scaleX/s,l=n.y/this.scaleY/s;o.width=a,o.height=l,(r=o.getContext("2d")).beginPath(),r.moveTo(0,0),r.lineTo(a,0),r.lineTo(a,l),r.lineTo(0,l),r.closePath(),r.translate(a/2,l/2),r.scale(n.zoomX/this.scaleX/s,n.zoomY/this.scaleY/s),this._applyPatternGradientTransform(r,i),r.fillStyle=i.toLive(t),r.fill(),t.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),t.scale(s*this.scaleX/n.zoomX,s*this.scaleY/n.zoomY),t.strokeStyle=r.createPattern(o,"no-repeat")},_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},_assignTransformMatrixProps:function(){if(this.transformMatrix){var t=e.util.qrDecompose(this.transformMatrix);this.flipX=!1,this.flipY=!1,this.set("scaleX",t.scaleX),this.set("scaleY",t.scaleY),this.angle=t.angle,this.skewX=t.skewX,this.skewY=0}},_removeTransformMatrix:function(t){var i=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),i=e.util.transformPoint(i,this.transformMatrix)),this.transformMatrix=null,t&&(this.scaleX*=t.scaleX,this.scaleY*=t.scaleY,this.cropX=t.cropX,this.cropY=t.cropY,i.x+=t.offsetLeft,i.y+=t.offsetTop,this.width=t.width,this.height=t.height),this.setPositionByOrigin(i,"center","center")},clone:function(t,i){var r=this.toObject(i);this.constructor.fromObject?this.constructor.fromObject(r,t):e.Object._fromObject("Object",r,t)},cloneAsImage:function(t,i){var r=this.toCanvasElement(i);return t&&t(new e.Image(r)),this},toCanvasElement:function(t){t||(t={});var i=e.util,r=i.saveObjectTransform(this),n=this.group,o=this.shadow,s=Math.abs,a=(t.multiplier||1)*(t.enableRetinaScaling?e.devicePixelRatio:1);delete this.group,t.withoutTransform&&i.resetObjectTransform(this),t.withoutShadow&&(this.shadow=null);var l,h,c,u,f=e.util.createCanvasElement(),d=this.getBoundingRect(!0,!0),p=this.shadow,g={x:0,y:0};p&&(h=p.blur,l=p.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),g.x=2*Math.round(s(p.offsetX)+h)*s(l.scaleX),g.y=2*Math.round(s(p.offsetY)+h)*s(l.scaleY)),c=d.width+g.x,u=d.height+g.y,f.width=Math.ceil(c),f.height=Math.ceil(u);var m=new e.StaticCanvas(f,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1});"jpeg"===t.format&&(m.backgroundColor="#fff"),this.setPositionByOrigin(new e.Point(m.width/2,m.height/2),"center","center");var v=this.canvas;m.add(this);var b=m.toCanvasElement(a||1,t);return this.shadow=o,this.set("canvas",v),n&&(this.group=n),this.set(r).setCoords(),m._objects=[],m.dispose(),m=null,b},toDataURL:function(t){return t||(t={}),e.util.toDataURL(this.toCanvasElement(t),t.format||"png",t.quality||1)},isType:function(t){return this.type===t},complexity:function(){return 1},toJSON:function(t){return this.toObject(t)},rotate:function(t){var e=("center"!==this.originX||"center"!==this.originY)&&this.centeredRotation;return e&&this._setOriginToCenter(),this.set("angle",t),e&&this._resetOrigin(),this},centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},center:function(){return this.canvas&&this.canvas.centerObject(this),this},viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},getLocalPointer:function(t,i){i=i||this.canvas.getPointer(t);var r=new e.Point(i.x,i.y),n=this._getLeftTopCoords();return this.angle&&(r=e.util.rotatePoint(r,n,s(-this.angle))),{x:r.x-n.x,y:r.y-n.y}},_setupCompositeOperation:function(t){this.globalCompositeOperation&&(t.globalCompositeOperation=this.globalCompositeOperation)}}),e.util.createAccessors&&e.util.createAccessors(e.Object),i(e.Object.prototype,e.Observable),e.Object.NUM_FRACTION_DIGITS=2,e.Object._fromObject=function(t,i,n,o){var s=e[t];i=r(i,!0),e.util.enlivenPatterns([i.fill,i.stroke],(function(t){void 0!==t[0]&&(i.fill=t[0]),void 0!==t[1]&&(i.stroke=t[1]),e.util.enlivenObjects([i.clipPath],(function(t){i.clipPath=t[0];var e=o?new s(i[o],i):new s(i);n&&n(e)}))}))},e.Object.__uid=0)}(e),y=A.util.degreesToRadians,x={left:-.5,center:0,right:.5},w={top:-.5,center:0,bottom:.5},A.util.object.extend(A.Object.prototype,{translateToGivenOrigin:function(t,e,i,r,n){var o,s,a,l=t.x,h=t.y;return"string"==typeof e?e=x[e]:e-=.5,"string"==typeof r?r=x[r]:r-=.5,"string"==typeof i?i=w[i]:i-=.5,"string"==typeof n?n=w[n]:n-=.5,s=n-i,((o=r-e)||s)&&(a=this._getTransformedDimensions(),l=t.x+o*a.x,h=t.y+s*a.y),new A.Point(l,h)},translateToCenterPoint:function(t,e,i){var r=this.translateToGivenOrigin(t,e,i,"center","center");return this.angle?A.util.rotatePoint(r,t,y(this.angle)):r},translateToOriginPoint:function(t,e,i){var r=this.translateToGivenOrigin(t,"center","center",e,i);return this.angle?A.util.rotatePoint(r,t,y(this.angle)):r},getCenterPoint:function(){var t=new A.Point(this.left,this.top);return this.translateToCenterPoint(t,this.originX,this.originY)},getPointByOrigin:function(t,e){var i=this.getCenterPoint();return this.translateToOriginPoint(i,t,e)},toLocalPoint:function(t,e,i){var r,n,o=this.getCenterPoint();return r=void 0!==e&&void 0!==i?this.translateToGivenOrigin(o,"center","center",e,i):new A.Point(this.left,this.top),n=new A.Point(t.x,t.y),this.angle&&(n=A.util.rotatePoint(n,o,-y(this.angle))),n.subtractEquals(r)},setPositionByOrigin:function(t,e,i){var r=this.translateToCenterPoint(t,e,i),n=this.translateToOriginPoint(r,this.originX,this.originY);this.set("left",n.x),this.set("top",n.y)},adjustPosition:function(t){var e,i,r=y(this.angle),n=this.getScaledWidth(),o=A.util.cos(r)*n,s=A.util.sin(r)*n;e="string"==typeof this.originX?x[this.originX]:this.originX-.5,i="string"==typeof t?x[t]:t-.5,this.left+=o*(i-e),this.top+=s*(i-e),this.setCoords(),this.originX=t},_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var t=this.getCenterPoint();this.originX="center",this.originY="center",this.left=t.x,this.top=t.y},_resetOrigin:function(){var t=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=t.x,this.top=t.y,this._originalOriginX=null,this._originalOriginY=null},_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),"left","top")}}),function(){var t=A.util,e=t.degreesToRadians,i=t.multiplyTransformMatrices,r=t.transformPoint;t.object.extend(A.Object.prototype,{oCoords:null,aCoords:null,lineCoords:null,ownMatrixCache:null,matrixCache:null,controls:{},_getCoords:function(t,e){return e?t?this.calcACoords():this.calcLineCoords():(this.aCoords&&this.lineCoords||this.setCoords(!0),t?this.aCoords:this.lineCoords)},getCoords:function(t,e){return i=this._getCoords(t,e),[new A.Point(i.tl.x,i.tl.y),new A.Point(i.tr.x,i.tr.y),new A.Point(i.br.x,i.br.y),new A.Point(i.bl.x,i.bl.y)];var i},intersectsWithRect:function(t,e,i,r){var n=this.getCoords(i,r);return"Intersection"===A.Intersection.intersectPolygonRectangle(n,t,e).status},intersectsWithObject:function(t,e,i){return"Intersection"===A.Intersection.intersectPolygonPolygon(this.getCoords(e,i),t.getCoords(e,i)).status||t.isContainedWithinObject(this,e,i)||this.isContainedWithinObject(t,e,i)},isContainedWithinObject:function(t,e,i){for(var r=this.getCoords(e,i),n=e?t.aCoords:t.lineCoords,o=0,s=t._getImageLines(n);o<4;o++)if(!t.containsPoint(r[o],s))return!1;return!0},isContainedWithinRect:function(t,e,i,r){var n=this.getBoundingRect(i,r);return n.left>=t.x&&n.left+n.width<=e.x&&n.top>=t.y&&n.top+n.height<=e.y},containsPoint:function(t,e,i,r){var n=this._getCoords(i,r),o=(e=e||this._getImageLines(n),this._findCrossPoints(t,e));return 0!==o&&o%2==1},isOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.getCoords(!0,t).some((function(t){return t.x<=i.x&&t.x>=e.x&&t.y<=i.y&&t.y>=e.y}))||!!this.intersectsWithRect(e,i,!0,t)||this._containsCenterOfCanvas(e,i,t)},_containsCenterOfCanvas:function(t,e,i){var r={x:(t.x+e.x)/2,y:(t.y+e.y)/2};return!!this.containsPoint(r,null,!0,i)},isPartiallyOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.intersectsWithRect(e,i,!0,t)||this.getCoords(!0,t).every((function(t){return(t.x>=i.x||t.x<=e.x)&&(t.y>=i.y||t.y<=e.y)}))&&this._containsCenterOfCanvas(e,i,t)},_getImageLines:function(t){return{topline:{o:t.tl,d:t.tr},rightline:{o:t.tr,d:t.br},bottomline:{o:t.br,d:t.bl},leftline:{o:t.bl,d:t.tl}}},_findCrossPoints:function(t,e){var i,r,n,o=0;for(var s in e)if(!((n=e[s]).o.y<t.y&&n.d.y<t.y||n.o.y>=t.y&&n.d.y>=t.y||(n.o.x===n.d.x&&n.o.x>=t.x?r=n.o.x:(i=(n.d.y-n.o.y)/(n.d.x-n.o.x),r=-(t.y-0*t.x-(n.o.y-i*n.o.x))/(0-i)),r>=t.x&&(o+=1),2!==o)))break;return o},getBoundingRect:function(e,i){var r=this.getCoords(e,i);return t.makeBoundingBoxFromPoints(r)},getScaledWidth:function(){return this._getTransformedDimensions().x},getScaledHeight:function(){return this._getTransformedDimensions().y},_constrainScale:function(t){return Math.abs(t)<this.minScaleLimit?t<0?-this.minScaleLimit:this.minScaleLimit:0===t?1e-4:t},scale:function(t){return this._set("scaleX",t),this._set("scaleY",t),this.setCoords()},scaleToWidth:function(t,e){var i=this.getBoundingRect(e).width/this.getScaledWidth();return this.scale(t/this.width/i)},scaleToHeight:function(t,e){var i=this.getBoundingRect(e).height/this.getScaledHeight();return this.scale(t/this.height/i)},calcCoords:function(t){return t?this.calcACoords():this.calcOCoords()},calcLineCoords:function(){var i=this.getViewportTransform(),n=this.padding,o=e(this.angle),s=t.cos(o)*n,a=t.sin(o)*n,l=s+a,h=s-a,c=this.calcACoords(),u={tl:r(c.tl,i),tr:r(c.tr,i),bl:r(c.bl,i),br:r(c.br,i)};return n&&(u.tl.x-=h,u.tl.y-=l,u.tr.x+=l,u.tr.y-=h,u.bl.x-=l,u.bl.y+=h,u.br.x+=h,u.br.y+=l),u},calcOCoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),r=this.getViewportTransform(),n=i(r,e),o=i(n,t),s=(o=i(o,[1/r[0],0,0,1/r[3],0,0]),this._calculateCurrentDimensions()),a={};return this.forEachControl((function(t,e,i){a[e]=t.positionHandler(s,o,i)})),a},calcACoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),n=i(e,t),o=this._getTransformedDimensions(),s=o.x/2,a=o.y/2;return{tl:r({x:-s,y:-a},n),tr:r({x:s,y:-a},n),bl:r({x:-s,y:a},n),br:r({x:s,y:a},n)}},setCoords:function(t){return this.aCoords=this.calcACoords(),this.lineCoords=this.group?this.aCoords:this.calcLineCoords(),t||(this.oCoords=this.calcOCoords(),this._setCornerCoords&&this._setCornerCoords()),this},_calcRotateMatrix:function(){return t.calcRotateMatrix(this)},_calcTranslateMatrix:function(){var t=this.getCenterPoint();return[1,0,0,1,t.x,t.y]},transformMatrixKey:function(t){var e="_",i="";return!t&&this.group&&(i=this.group.transformMatrixKey(t)+e),i+this.top+e+this.left+e+this.scaleX+e+this.scaleY+e+this.skewX+e+this.skewY+e+this.angle+e+this.originX+e+this.originY+e+this.width+e+this.height+e+this.strokeWidth+this.flipX+this.flipY},calcTransformMatrix:function(t){var e=this.calcOwnMatrix();if(t||!this.group)return e;var r=this.transformMatrixKey(t),n=this.matrixCache||(this.matrixCache={});return n.key===r?n.value:(this.group&&(e=i(this.group.calcTransformMatrix(!1),e)),n.key=r,n.value=e,e)},calcOwnMatrix:function(){var e=this.transformMatrixKey(!0),i=this.ownMatrixCache||(this.ownMatrixCache={});if(i.key===e)return i.value;var r=this._calcTranslateMatrix(),n={angle:this.angle,translateX:r[4],translateY:r[5],scaleX:this.scaleX,scaleY:this.scaleY,skewX:this.skewX,skewY:this.skewY,flipX:this.flipX,flipY:this.flipY};return i.key=e,i.value=t.composeMatrix(n),i.value},_calcDimensionsTransformMatrix:function(e,i,r){return t.calcDimensionsMatrix({skewX:e,skewY:i,scaleX:this.scaleX*(r&&this.flipX?-1:1),scaleY:this.scaleY*(r&&this.flipY?-1:1)})},_getNonTransformedDimensions:function(){var t=this.strokeWidth;return{x:this.width+t,y:this.height+t}},_getTransformedDimensions:function(e,i){void 0===e&&(e=this.skewX),void 0===i&&(i=this.skewY);var r,n,o=this._getNonTransformedDimensions(),s=0===e&&0===i;if(this.strokeUniform?(r=this.width,n=this.height):(r=o.x,n=o.y),s)return this._finalizeDimensions(r*this.scaleX,n*this.scaleY);var a=t.sizeAfterTransform(r,n,{scaleX:this.scaleX,scaleY:this.scaleY,skewX:e,skewY:i});return this._finalizeDimensions(a.x,a.y)},_finalizeDimensions:function(t,e){return this.strokeUniform?{x:t+this.strokeWidth,y:e+this.strokeWidth}:{x:t,y:e}},_calculateCurrentDimensions:function(){var t=this.getViewportTransform(),e=this._getTransformedDimensions();return r(e,t,!0).scalarAdd(2*this.padding)}})}(),A.util.object.extend(A.Object.prototype,{sendToBack:function(){return this.group?A.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},bringToFront:function(){return this.group?A.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},sendBackwards:function(t){return this.group?A.StaticCanvas.prototype.sendBackwards.call(this.group,this,t):this.canvas&&this.canvas.sendBackwards(this,t),this},bringForward:function(t){return this.group?A.StaticCanvas.prototype.bringForward.call(this.group,this,t):this.canvas&&this.canvas.bringForward(this,t),this},moveTo:function(t){return this.group&&"activeSelection"!==this.group.type?A.StaticCanvas.prototype.moveTo.call(this.group,this,t):this.canvas&&this.canvas.moveTo(this,t),this}}),function(){function t(t,e){if(e){if(e.toLive)return t+": url(#SVGID_"+e.id+"); ";var i=new A.Color(e),r=t+": "+i.toRgb()+"; ",n=i.getAlpha();return 1!==n&&(r+=t+"-opacity: "+n.toString()+"; "),r}return t+": none; "}var e=A.util.toFixed;A.util.object.extend(A.Object.prototype,{getSvgStyles:function(e){var i=this.fillRule?this.fillRule:"nonzero",r=this.strokeWidth?this.strokeWidth:"0",n=this.strokeDashArray?this.strokeDashArray.join(" "):"none",o=this.strokeDashOffset?this.strokeDashOffset:"0",s=this.strokeLineCap?this.strokeLineCap:"butt",a=this.strokeLineJoin?this.strokeLineJoin:"miter",l=this.strokeMiterLimit?this.strokeMiterLimit:"4",h=void 0!==this.opacity?this.opacity:"1",c=this.visible?"":" visibility: hidden;",u=e?"":this.getSvgFilter(),f=t("fill",this.fill);return[t("stroke",this.stroke),"stroke-width: ",r,"; ","stroke-dasharray: ",n,"; ","stroke-linecap: ",s,"; ","stroke-dashoffset: ",o,"; ","stroke-linejoin: ",a,"; ","stroke-miterlimit: ",l,"; ",f,"fill-rule: ",i,"; ","opacity: ",h,";",u,c].join("")},getSvgSpanStyles:function(e,i){var r="; ",n=e.fontFamily?"font-family: "+(-1===e.fontFamily.indexOf("'")&&-1===e.fontFamily.indexOf('"')?"'"+e.fontFamily+"'":e.fontFamily)+r:"",o=e.strokeWidth?"stroke-width: "+e.strokeWidth+r:"",s=(n=n,e.fontSize?"font-size: "+e.fontSize+"px"+r:""),a=e.fontStyle?"font-style: "+e.fontStyle+r:"",l=e.fontWeight?"font-weight: "+e.fontWeight+r:"",h=e.fill?t("fill",e.fill):"",c=e.stroke?t("stroke",e.stroke):"",u=this.getSvgTextDecoration(e);return u&&(u="text-decoration: "+u+r),[c,o,n,s,a,l,u,h,e.deltaY?"baseline-shift: "+-e.deltaY+"; ":"",i?"white-space: pre; ":""].join("")},getSvgTextDecoration:function(t){return["overline","underline","line-through"].filter((function(e){return t[e.replace("-","")]})).join(" ")},getSvgFilter:function(){return this.shadow?"filter: url(#SVGID_"+this.shadow.id+");":""},getSvgCommons:function(){return[this.id?'id="'+this.id+'" ':"",this.clipPath?'clip-path="url(#'+this.clipPath.clipPathId+')" ':""].join("")},getSvgTransform:function(t,e){var i=t?this.calcTransformMatrix():this.calcOwnMatrix();return'transform="'+A.util.matrixToSVG(i)+(e||"")+'" '},_setSVGBg:function(t){if(this.backgroundColor){var i=A.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(this.backgroundColor),' x="',e(-this.width/2,i),'" y="',e(-this.height/2,i),'" width="',e(this.width,i),'" height="',e(this.height,i),'"></rect>\n')}},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(t),{reviver:t})},toClipPathSVG:function(t){return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(t),{reviver:t})},_createBaseClipPathSVGMarkup:function(t,e){var i=(e=e||{}).reviver,r=e.additionalTransform||"",n=[this.getSvgTransform(!0,r),this.getSvgCommons()].join(""),o=t.indexOf("COMMON_PARTS");return t[o]=n,i?i(t.join("")):t.join("")},_createBaseSVGMarkup:function(t,e){var i,r,n=(e=e||{}).noStyle,o=e.reviver,s=n?"":'style="'+this.getSvgStyles()+'" ',a=e.withShadow?'style="'+this.getSvgFilter()+'" ':"",l=this.clipPath,h=this.strokeUniform?'vector-effect="non-scaling-stroke" ':"",c=l&&l.absolutePositioned,u=this.stroke,f=this.fill,d=this.shadow,p=[],g=t.indexOf("COMMON_PARTS"),m=e.additionalTransform;return l&&(l.clipPathId="CLIPPATH_"+A.Object.__uid++,r='<clipPath id="'+l.clipPathId+'" >\n'+l.toClipPathSVG(o)+"</clipPath>\n"),c&&p.push("<g ",a,this.getSvgCommons()," >\n"),p.push("<g ",this.getSvgTransform(!1),c?"":a+this.getSvgCommons()," >\n"),i=[s,h,n?"":this.addPaintOrder()," ",m?'transform="'+m+'" ':""].join(""),t[g]=i,f&&f.toLive&&p.push(f.toSVG(this)),u&&u.toLive&&p.push(u.toSVG(this)),d&&p.push(d.toSVG(this)),l&&p.push(r),p.push(t.join("")),p.push("</g>\n"),c&&p.push("</g>\n"),o?o(p.join("")):p.join("")},addPaintOrder:function(){return"fill"!==this.paintFirst?' paint-order="'+this.paintFirst+'" ':""}})}(),function(){var t=A.util.object.extend,e="stateProperties";function i(e,i,r){var n={};r.forEach((function(t){n[t]=e[t]})),t(e[i],n,!0)}function r(t,e,i){if(t===e)return!0;if(Array.isArray(t)){if(!Array.isArray(e)||t.length!==e.length)return!1;for(var n=0,o=t.length;n<o;n++)if(!r(t[n],e[n]))return!1;return!0}if(t&&"object"==typeof t){var s,a=Object.keys(t);if(!e||"object"!=typeof e||!i&&a.length!==Object.keys(e).length)return!1;for(n=0,o=a.length;n<o;n++)if("canvas"!==(s=a[n])&&"group"!==s&&!r(t[s],e[s]))return!1;return!0}}A.util.object.extend(A.Object.prototype,{hasStateChanged:function(t){var i="_"+(t=t||e);return Object.keys(this[i]).length<this[t].length||!r(this[i],this,!0)},saveState:function(t){var r=t&&t.propertySet||e,n="_"+r;return this[n]?(i(this,n,this[r]),t&&t.stateProperties&&i(this,n,t.stateProperties),this):this.setupState(t)},setupState:function(t){var i=(t=t||{}).propertySet||e;return t.propertySet=i,this["_"+i]={},this.saveState(t),this}})}(),function(){var t=A.util.degreesToRadians;A.util.object.extend(A.Object.prototype,{_findTargetCorner:function(t,e){if(!this.hasControls||this.group||!this.canvas||this.canvas._activeObject!==this)return!1;var i,r,n,o=t.x,s=t.y,a=Object.keys(this.oCoords),l=a.length-1;for(this.__corner=0;l>=0;l--)if(n=a[l],this.isControlVisible(n)&&(r=this._getImageLines(e?this.oCoords[n].touchCorner:this.oCoords[n].corner),0!==(i=this._findCrossPoints({x:o,y:s},r))&&i%2==1))return this.__corner=n,n;return!1},forEachControl:function(t){for(var e in this.controls)t(this.controls[e],e,this)},_setCornerCoords:function(){var t=this.oCoords;for(var e in t){var i=this.controls[e];t[e].corner=i.calcCornerCoords(this.angle,this.cornerSize,t[e].x,t[e].y,!1),t[e].touchCorner=i.calcCornerCoords(this.angle,this.touchCornerSize,t[e].x,t[e].y,!0)}},drawSelectionBackground:function(e){if(!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this)return this;e.save();var i=this.getCenterPoint(),r=this._calculateCurrentDimensions(),n=this.canvas.viewportTransform;return e.translate(i.x,i.y),e.scale(1/n[0],1/n[3]),e.rotate(t(this.angle)),e.fillStyle=this.selectionBackgroundColor,e.fillRect(-r.x/2,-r.y/2,r.x,r.y),e.restore(),this},drawBorders:function(t,e){e=e||{};var i=this._calculateCurrentDimensions(),r=this.borderScaleFactor,n=i.x+r,o=i.y+r,s=void 0!==e.hasControls?e.hasControls:this.hasControls,a=!1;return t.save(),t.strokeStyle=e.borderColor||this.borderColor,this._setLineDash(t,e.borderDashArray||this.borderDashArray,null),t.strokeRect(-n/2,-o/2,n,o),s&&(t.beginPath(),this.forEachControl((function(e,i,r){e.withConnection&&e.getVisibility(r,i)&&(a=!0,t.moveTo(e.x*n,e.y*o),t.lineTo(e.x*n+e.offsetX,e.y*o+e.offsetY))})),a&&t.stroke()),t.restore(),this},drawBordersInGroup:function(t,e,i){i=i||{};var r=A.util.sizeAfterTransform(this.width,this.height,e),n=this.strokeWidth,o=this.strokeUniform,s=this.borderScaleFactor,a=r.x+n*(o?this.canvas.getZoom():e.scaleX)+s,l=r.y+n*(o?this.canvas.getZoom():e.scaleY)+s;return t.save(),this._setLineDash(t,i.borderDashArray||this.borderDashArray,null),t.strokeStyle=i.borderColor||this.borderColor,t.strokeRect(-a/2,-l/2,a,l),t.restore(),this},drawControls:function(t,e){return e=e||{},t.save(),t.setTransform(this.canvas.getRetinaScaling(),0,0,this.canvas.getRetinaScaling(),0,0),t.strokeStyle=t.fillStyle=e.cornerColor||this.cornerColor,this.transparentCorners||(t.strokeStyle=e.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(t,e.cornerDashArray||this.cornerDashArray,null),this.setCoords(),this.forEachControl((function(i,r,n){i.getVisibility(n,r)&&i.render(t,n.oCoords[r].x,n.oCoords[r].y,e,n)})),t.restore(),this},isControlVisible:function(t){return this.controls[t]&&this.controls[t].getVisibility(this,t)},setControlVisible:function(t,e){return this._controlsVisibility||(this._controlsVisibility={}),this._controlsVisibility[t]=e,this},setControlsVisibility:function(t){for(var e in t||(t={}),t)this.setControlVisible(e,t[e]);return this},onDeselect:function(){},onSelect:function(){}})}(),A.util.object.extend(A.StaticCanvas.prototype,{FX_DURATION:500,fxCenterObjectH:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,o=this;return A.util.animate({startValue:t.left,endValue:this.getCenter().left,duration:this.FX_DURATION,onChange:function(e){t.set("left",e),o.requestRenderAll(),n()},onComplete:function(){t.setCoords(),r()}}),this},fxCenterObjectV:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,o=this;return A.util.animate({startValue:t.top,endValue:this.getCenter().top,duration:this.FX_DURATION,onChange:function(e){t.set("top",e),o.requestRenderAll(),n()},onComplete:function(){t.setCoords(),r()}}),this},fxRemove:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,o=this;return A.util.animate({startValue:t.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(e){t.set("opacity",e),o.requestRenderAll(),n()},onComplete:function(){o.remove(t),r()}}),this}}),A.util.object.extend(A.Object.prototype,{animate:function(){if(arguments[0]&&"object"==typeof arguments[0]){var t,e,i=[];for(t in arguments[0])i.push(t);for(var r=0,n=i.length;r<n;r++)t=i[r],e=r!==n-1,this._animate(t,arguments[0][t],arguments[1],e)}else this._animate.apply(this,arguments);return this},_animate:function(t,e,i,r){var n,o=this;e=e.toString(),i=i?A.util.object.clone(i):{},~t.indexOf(".")&&(n=t.split("."));var s=o.colorProperties.indexOf(t)>-1||n&&o.colorProperties.indexOf(n[1])>-1,a=n?this.get(n[0])[n[1]]:this.get(t);"from"in i||(i.from=a),s||(e=~e.indexOf("=")?a+parseFloat(e.replace("=","")):parseFloat(e));var l={startValue:i.from,endValue:e,byValue:i.by,easing:i.easing,duration:i.duration,abort:i.abort&&function(){return i.abort.call(o)},onChange:function(e,s,a){n?o[n[0]][n[1]]=e:o.set(t,e),r||i.onChange&&i.onChange(e,s,a)},onComplete:function(t,e,n){r||(o.setCoords(),i.onComplete&&i.onComplete(t,e,n))}};s?A.util.animateColor(l.startValue,l.endValue,l.duration,l):A.util.animate(l)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n={x1:1,x2:1,y1:1,y2:1},o=e.StaticCanvas.supports("setLineDash");function s(t,e){var i=t.origin,r=t.axis1,n=t.axis2,o=t.dimension,s=e.nearest,a=e.center,l=e.farthest;return function(){switch(this.get(i)){case s:return Math.min(this.get(r),this.get(n));case a:return Math.min(this.get(r),this.get(n))+.5*this.get(o);case l:return Math.max(this.get(r),this.get(n))}}}e.Line?e.warn("fabric.Line is already defined"):(e.Line=e.util.createClass(e.Object,{type:"line",x1:0,y1:0,x2:0,y2:0,cacheProperties:e.Object.prototype.cacheProperties.concat("x1","x2","y1","y2"),initialize:function(t,e){t||(t=[0,0,0,0]),this.callSuper("initialize",e),this.set("x1",t[0]),this.set("y1",t[1]),this.set("x2",t[2]),this.set("y2",t[3]),this._setWidthHeight(e)},_setWidthHeight:function(t){t||(t={}),this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left="left"in t?t.left:this._getLeftToOriginX(),this.top="top"in t?t.top:this._getTopToOriginY()},_set:function(t,e){return this.callSuper("_set",t,e),void 0!==n[t]&&this._setWidthHeight(),this},_getLeftToOriginX:s({origin:"originX",axis1:"x1",axis2:"x2",dimension:"width"},{nearest:"left",center:"center",farthest:"right"}),_getTopToOriginY:s({origin:"originY",axis1:"y1",axis2:"y2",dimension:"height"},{nearest:"top",center:"center",farthest:"bottom"}),_render:function(t){if(t.beginPath(),!this.strokeDashArray||this.strokeDashArray&&o){var e=this.calcLinePoints();t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2)}t.lineWidth=this.strokeWidth;var i=t.strokeStyle;t.strokeStyle=this.stroke||t.fillStyle,this.stroke&&this._renderStroke(t),t.strokeStyle=i},_renderDashedStroke:function(t){var i=this.calcLinePoints();t.beginPath(),e.util.drawDashedLine(t,i.x1,i.y1,i.x2,i.y2,this.strokeDashArray),t.closePath()},_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},toObject:function(t){return i(this.callSuper("toObject",t),this.calcLinePoints())},_getNonTransformedDimensions:function(){var t=this.callSuper("_getNonTransformedDimensions");return"butt"===this.strokeLineCap&&(0===this.width&&(t.y-=this.strokeWidth),0===this.height&&(t.x-=this.strokeWidth)),t},calcLinePoints:function(){var t=this.x1<=this.x2?-1:1,e=this.y1<=this.y2?-1:1,i=t*this.width*.5,r=e*this.height*.5;return{x1:i,x2:t*this.width*-.5,y1:r,y2:e*this.height*-.5}},_toSVG:function(){var t=this.calcLinePoints();return["<line ","COMMON_PARTS",'x1="',t.x1,'" y1="',t.y1,'" x2="',t.x2,'" y2="',t.y2,'" />\n']}}),e.Line.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")),e.Line.fromElement=function(t,r,n){n=n||{};var o=e.parseAttributes(t,e.Line.ATTRIBUTE_NAMES),s=[o.x1||0,o.y1||0,o.x2||0,o.y2||0];r(new e.Line(s,i(o,n)))},e.Line.fromObject=function(t,i){var n=r(t,!0);n.points=[t.x1,t.y1,t.x2,t.y2],e.Object._fromObject("Line",n,(function(t){delete t.points,i&&i(t)}),"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=Math.PI;e.Circle?e.warn("fabric.Circle is already defined."):(e.Circle=e.util.createClass(e.Object,{type:"circle",radius:0,startAngle:0,endAngle:2*i,cacheProperties:e.Object.prototype.cacheProperties.concat("radius","startAngle","endAngle"),_set:function(t,e){return this.callSuper("_set",t,e),"radius"===t&&this.setRadius(e),this},toObject:function(t){return this.callSuper("toObject",["radius","startAngle","endAngle"].concat(t))},_toSVG:function(){var t,r=(this.endAngle-this.startAngle)%(2*i);if(0===r)t=["<circle ","COMMON_PARTS",'cx="0" cy="0" ','r="',this.radius,'" />\n'];else{var n=e.util.cos(this.startAngle)*this.radius,o=e.util.sin(this.startAngle)*this.radius,s=e.util.cos(this.endAngle)*this.radius,a=e.util.sin(this.endAngle)*this.radius,l=r>i?"1":"0";t=['<path d="M '+n+" "+o," A "+this.radius+" "+this.radius," 0 ",+l+" 1"," "+s+" "+a,'" ',"COMMON_PARTS"," />\n"]}return t},_render:function(t){t.beginPath(),t.arc(0,0,this.radius,this.startAngle,this.endAngle,!1),this._renderPaintInOrder(t)},getRadiusX:function(){return this.get("radius")*this.get("scaleX")},getRadiusY:function(){return this.get("radius")*this.get("scaleY")},setRadius:function(t){return this.radius=t,this.set("width",2*t).set("height",2*t)}}),e.Circle.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")),e.Circle.fromElement=function(t,i){var r,n=e.parseAttributes(t,e.Circle.ATTRIBUTE_NAMES);if(!("radius"in(r=n)&&r.radius>=0))throw new Error("value of `r` attribute is required and can not be negative");n.left=(n.left||0)-n.radius,n.top=(n.top||0)-n.radius,i(new e.Circle(n))},e.Circle.fromObject=function(t,i){return e.Object._fromObject("Circle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Triangle?e.warn("fabric.Triangle is already defined"):(e.Triangle=e.util.createClass(e.Object,{type:"triangle",width:100,height:100,_render:function(t){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,i),t.lineTo(0,-i),t.lineTo(e,i),t.closePath(),this._renderPaintInOrder(t)},_renderDashedStroke:function(t){var i=this.width/2,r=this.height/2;t.beginPath(),e.util.drawDashedLine(t,-i,r,0,-r,this.strokeDashArray),e.util.drawDashedLine(t,0,-r,i,r,this.strokeDashArray),e.util.drawDashedLine(t,i,r,-i,r,this.strokeDashArray),t.closePath()},_toSVG:function(){var t=this.width/2,e=this.height/2;return["<polygon ","COMMON_PARTS",'points="',[-t+" "+e,"0 "+-e,t+" "+e].join(","),'" />']}}),e.Triangle.fromObject=function(t,i){return e.Object._fromObject("Triangle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=2*Math.PI;e.Ellipse?e.warn("fabric.Ellipse is already defined."):(e.Ellipse=e.util.createClass(e.Object,{type:"ellipse",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this.set("rx",t&&t.rx||0),this.set("ry",t&&t.ry||0)},_set:function(t,e){switch(this.callSuper("_set",t,e),t){case"rx":this.rx=e,this.set("width",2*e);break;case"ry":this.ry=e,this.set("height",2*e)}return this},getRx:function(){return this.get("rx")*this.get("scaleX")},getRy:function(){return this.get("ry")*this.get("scaleY")},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<ellipse ","COMMON_PARTS",'cx="0" cy="0" ','rx="',this.rx,'" ry="',this.ry,'" />\n']},_render:function(t){t.beginPath(),t.save(),t.transform(1,0,0,this.ry/this.rx,0,0),t.arc(0,0,this.rx,0,i,!1),t.restore(),this._renderPaintInOrder(t)}}),e.Ellipse.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")),e.Ellipse.fromElement=function(t,i){var r=e.parseAttributes(t,e.Ellipse.ATTRIBUTE_NAMES);r.left=(r.left||0)-r.rx,r.top=(r.top||0)-r.ry,i(new e.Ellipse(r))},e.Ellipse.fromObject=function(t,i){return e.Object._fromObject("Ellipse",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend;e.Rect?e.warn("fabric.Rect is already defined"):(e.Rect=e.util.createClass(e.Object,{stateProperties:e.Object.prototype.stateProperties.concat("rx","ry"),type:"rect",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this._initRxRy()},_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},_render:function(t){var e=this.rx?Math.min(this.rx,this.width/2):0,i=this.ry?Math.min(this.ry,this.height/2):0,r=this.width,n=this.height,o=-this.width/2,s=-this.height/2,a=0!==e||0!==i,l=.4477152502;t.beginPath(),t.moveTo(o+e,s),t.lineTo(o+r-e,s),a&&t.bezierCurveTo(o+r-l*e,s,o+r,s+l*i,o+r,s+i),t.lineTo(o+r,s+n-i),a&&t.bezierCurveTo(o+r,s+n-l*i,o+r-l*e,s+n,o+r-e,s+n),t.lineTo(o+e,s+n),a&&t.bezierCurveTo(o+l*e,s+n,o,s+n-l*i,o,s+n-i),t.lineTo(o,s+i),a&&t.bezierCurveTo(o,s+l*i,o+l*e,s,o+e,s),t.closePath(),this._renderPaintInOrder(t)},_renderDashedStroke:function(t){var i=-this.width/2,r=-this.height/2,n=this.width,o=this.height;t.beginPath(),e.util.drawDashedLine(t,i,r,i+n,r,this.strokeDashArray),e.util.drawDashedLine(t,i+n,r,i+n,r+o,this.strokeDashArray),e.util.drawDashedLine(t,i+n,r+o,i,r+o,this.strokeDashArray),e.util.drawDashedLine(t,i,r+o,i,r,this.strokeDashArray),t.closePath()},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<rect ","COMMON_PARTS",'x="',-this.width/2,'" y="',-this.height/2,'" rx="',this.rx,'" ry="',this.ry,'" width="',this.width,'" height="',this.height,'" />\n']}}),e.Rect.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")),e.Rect.fromElement=function(t,r,n){if(!t)return r(null);n=n||{};var o=e.parseAttributes(t,e.Rect.ATTRIBUTE_NAMES);o.left=o.left||0,o.top=o.top||0,o.height=o.height||0,o.width=o.width||0;var s=new e.Rect(i(n?e.util.object.clone(n):{},o));s.visible=s.visible&&s.width>0&&s.height>0,r(s)},e.Rect.fromObject=function(t,i){return e.Object._fromObject("Rect",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.array.min,n=e.util.array.max,o=e.util.toFixed;e.Polyline?e.warn("fabric.Polyline is already defined"):(e.Polyline=e.util.createClass(e.Object,{type:"polyline",points:null,cacheProperties:e.Object.prototype.cacheProperties.concat("points"),initialize:function(t,e){e=e||{},this.points=t||[],this.callSuper("initialize",e),this._setPositionDimensions(e)},_setPositionDimensions:function(t){var e,i=this._calcDimensions(t);this.width=i.width,this.height=i.height,t.fromSVG||(e=this.translateToGivenOrigin({x:i.left-this.strokeWidth/2,y:i.top-this.strokeWidth/2},"left","top",this.originX,this.originY)),void 0===t.left&&(this.left=t.fromSVG?i.left:e.x),void 0===t.top&&(this.top=t.fromSVG?i.top:e.y),this.pathOffset={x:i.left+this.width/2,y:i.top+this.height/2}},_calcDimensions:function(){var t=this.points,e=r(t,"x")||0,i=r(t,"y")||0;return{left:e,top:i,width:(n(t,"x")||0)-e,height:(n(t,"y")||0)-i}},toObject:function(t){return i(this.callSuper("toObject",t),{points:this.points.concat()})},_toSVG:function(){for(var t=[],i=this.pathOffset.x,r=this.pathOffset.y,n=e.Object.NUM_FRACTION_DIGITS,s=0,a=this.points.length;s<a;s++)t.push(o(this.points[s].x-i,n),",",o(this.points[s].y-r,n)," ");return["<"+this.type+" ","COMMON_PARTS",'points="',t.join(""),'" />\n']},commonRender:function(t){var e,i=this.points.length,r=this.pathOffset.x,n=this.pathOffset.y;if(!i||isNaN(this.points[i-1].y))return!1;t.beginPath(),t.moveTo(this.points[0].x-r,this.points[0].y-n);for(var o=0;o<i;o++)e=this.points[o],t.lineTo(e.x-r,e.y-n);return!0},_render:function(t){this.commonRender(t)&&this._renderPaintInOrder(t)},_renderDashedStroke:function(t){var i,r;t.beginPath();for(var n=0,o=this.points.length;n<o;n++)i=this.points[n],r=this.points[n+1]||i,e.util.drawDashedLine(t,i.x,i.y,r.x,r.y,this.strokeDashArray)},complexity:function(){return this.get("points").length}}),e.Polyline.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polyline.fromElementGenerator=function(t){return function(r,n,o){if(!r)return n(null);o||(o={});var s=e.parsePointsAttribute(r.getAttribute("points")),a=e.parseAttributes(r,e[t].ATTRIBUTE_NAMES);a.fromSVG=!0,n(new e[t](s,i(a,o)))}},e.Polyline.fromElement=e.Polyline.fromElementGenerator("Polyline"),e.Polyline.fromObject=function(t,i){return e.Object._fromObject("Polyline",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Polygon?e.warn("fabric.Polygon is already defined"):(e.Polygon=e.util.createClass(e.Polyline,{type:"polygon",_render:function(t){this.commonRender(t)&&(t.closePath(),this._renderPaintInOrder(t))},_renderDashedStroke:function(t){this.callSuper("_renderDashedStroke",t),t.closePath()}}),e.Polygon.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polygon.fromElement=e.Polyline.fromElementGenerator("Polygon"),e.Polygon.fromObject=function(t,i){return e.Object._fromObject("Polygon",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,r=e.util.array.max,n=e.util.object.extend,o=Object.prototype.toString,s=e.util.toFixed;e.Path?e.warn("fabric.Path is already defined"):(e.Path=e.util.createClass(e.Object,{type:"path",path:null,cacheProperties:e.Object.prototype.cacheProperties.concat("path","fillRule"),stateProperties:e.Object.prototype.stateProperties.concat("path"),initialize:function(t,i){i=i||{},this.callSuper("initialize",i),t||(t=[]);var r="[object Array]"===o.call(t);this.path=r?e.util.makePathSimpler(t):e.util.makePathSimpler(e.util.parsePath(t)),this.path&&e.Polyline.prototype._setPositionDimensions.call(this,i)},_renderPathCommands:function(t){var e,i=0,r=0,n=0,o=0,s=0,a=0,l=-this.pathOffset.x,h=-this.pathOffset.y;t.beginPath();for(var c=0,u=this.path.length;c<u;++c)switch((e=this.path[c])[0]){case"L":n=e[1],o=e[2],t.lineTo(n+l,o+h);break;case"M":i=n=e[1],r=o=e[2],t.moveTo(n+l,o+h);break;case"C":n=e[5],o=e[6],s=e[3],a=e[4],t.bezierCurveTo(e[1]+l,e[2]+h,s+l,a+h,n+l,o+h);break;case"Q":t.quadraticCurveTo(e[1]+l,e[2]+h,e[3]+l,e[4]+h),n=e[3],o=e[4],s=e[1],a=e[2];break;case"z":case"Z":n=i,o=r,t.closePath()}},_render:function(t){this._renderPathCommands(t),this._renderPaintInOrder(t)},toString:function(){return"#<fabric.Path ("+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+" }>"},toObject:function(t){return n(this.callSuper("toObject",t),{path:this.path.map((function(t){return t.slice()}))})},toDatalessObject:function(t){var e=this.toObject(["sourcePath"].concat(t));return e.sourcePath&&delete e.path,e},_toSVG:function(){return["<path ","COMMON_PARTS",'d="',this.path.map((function(t){return t.join(" ")})).join(" "),'" stroke-linecap="round" ',"/>\n"]},_getOffsetTransform:function(){var t=e.Object.NUM_FRACTION_DIGITS;return" translate("+s(-this.pathOffset.x,t)+", "+s(-this.pathOffset.y,t)+")"},toClipPathSVG:function(t){var e=this._getOffsetTransform();return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},toSVG:function(t){var e=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},complexity:function(){return this.path.length},_calcDimensions:function(){for(var t,n,o=[],s=[],a=0,l=0,h=0,c=0,u=0,f=this.path.length;u<f;++u){switch((t=this.path[u])[0]){case"L":h=t[1],c=t[2],n=[];break;case"M":a=h=t[1],l=c=t[2],n=[];break;case"C":n=e.util.getBoundsOfCurve(h,c,t[1],t[2],t[3],t[4],t[5],t[6]),h=t[5],c=t[6];break;case"Q":n=e.util.getBoundsOfCurve(h,c,t[1],t[2],t[1],t[2],t[3],t[4]),h=t[3],c=t[4];break;case"z":case"Z":h=a,c=l}n.forEach((function(t){o.push(t.x),s.push(t.y)})),o.push(h),s.push(c)}var d=i(o)||0,p=i(s)||0;return{left:d,top:p,width:(r(o)||0)-d,height:(r(s)||0)-p}}}),e.Path.fromObject=function(t,i){if("string"==typeof t.sourcePath){var r=t.sourcePath;e.loadSVGFromURL(r,(function(e){var r=e[0];r.setOptions(t),i&&i(r)}))}else e.Object._fromObject("Path",t,i,"path")},e.Path.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(["d"]),e.Path.fromElement=function(t,i,r){var o=e.parseAttributes(t,e.Path.ATTRIBUTE_NAMES);o.fromSVG=!0,i(new e.Path(o.d,n(o,r)))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,r=e.util.array.max;e.Group||(e.Group=e.util.createClass(e.Object,e.Collection,{type:"group",strokeWidth:0,subTargetCheck:!1,cacheProperties:[],useSetOnGroup:!1,initialize:function(t,e,i){e=e||{},this._objects=[],i&&this.callSuper("initialize",e),this._objects=t||[];for(var r=this._objects.length;r--;)this._objects[r].group=this;if(i)this._updateObjectsACoords();else{var n=e&&e.centerPoint;void 0!==e.originX&&(this.originX=e.originX),void 0!==e.originY&&(this.originY=e.originY),n||this._calcBounds(),this._updateObjectsCoords(n),delete e.centerPoint,this.callSuper("initialize",e)}this.setCoords()},_updateObjectsACoords:function(){for(var t=this._objects.length;t--;)this._objects[t].setCoords(!0)},_updateObjectsCoords:function(t){t=t||this.getCenterPoint();for(var e=this._objects.length;e--;)this._updateObjectCoords(this._objects[e],t)},_updateObjectCoords:function(t,e){var i=t.left,r=t.top;t.set({left:i-e.x,top:r-e.y}),t.group=this,t.setCoords(!0)},toString:function(){return"#<fabric.Group: ("+this.complexity()+")>"},addWithUpdate:function(t){return this._restoreObjectsState(),e.util.resetObjectTransform(this),t&&(this._objects.push(t),t.group=this,t._set("canvas",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},removeWithUpdate:function(t){return this._restoreObjectsState(),e.util.resetObjectTransform(this),this.remove(t),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},_onObjectAdded:function(t){this.dirty=!0,t.group=this,t._set("canvas",this.canvas)},_onObjectRemoved:function(t){this.dirty=!0,delete t.group},_set:function(t,i){var r=this._objects.length;if(this.useSetOnGroup)for(;r--;)this._objects[r].setOnGroup(t,i);if("canvas"===t)for(;r--;)this._objects[r]._set(t,i);e.Object.prototype._set.call(this,t,i)},toObject:function(t){var i=this.includeDefaultValues,r=this._objects.map((function(e){var r=e.includeDefaultValues;e.includeDefaultValues=i;var n=e.toObject(t);return e.includeDefaultValues=r,n})),n=e.Object.prototype.toObject.call(this,t);return n.objects=r,n},toDatalessObject:function(t){var i,r=this.sourcePath;if(r)i=r;else{var n=this.includeDefaultValues;i=this._objects.map((function(e){var i=e.includeDefaultValues;e.includeDefaultValues=n;var r=e.toDatalessObject(t);return e.includeDefaultValues=i,r}))}var o=e.Object.prototype.toDatalessObject.call(this,t);return o.objects=i,o},render:function(t){this._transformDone=!0,this.callSuper("render",t),this._transformDone=!1},shouldCache:function(){var t=e.Object.prototype.shouldCache.call(this);if(t)for(var i=0,r=this._objects.length;i<r;i++)if(this._objects[i].willDrawShadow())return this.ownCaching=!1,!1;return t},willDrawShadow:function(){if(e.Object.prototype.willDrawShadow.call(this))return!0;for(var t=0,i=this._objects.length;t<i;t++)if(this._objects[t].willDrawShadow())return!0;return!1},isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},drawObject:function(t){for(var e=0,i=this._objects.length;e<i;e++)this._objects[e].render(t);this._drawClipPath(t)},isCacheDirty:function(t){if(this.callSuper("isCacheDirty",t))return!0;if(!this.statefullCache)return!1;for(var e=0,i=this._objects.length;e<i;e++)if(this._objects[e].isCacheDirty(!0)){if(this._cacheCanvas){var r=this.cacheWidth/this.zoomX,n=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-r/2,-n/2,r,n)}return!0}return!1},_restoreObjectsState:function(){return this._objects.forEach(this._restoreObjectState,this),this},realizeTransform:function(t){var i=t.calcTransformMatrix(),r=e.util.qrDecompose(i),n=new e.Point(r.translateX,r.translateY);return t.flipX=!1,t.flipY=!1,t.set("scaleX",r.scaleX),t.set("scaleY",r.scaleY),t.skewX=r.skewX,t.skewY=r.skewY,t.angle=r.angle,t.setPositionByOrigin(n,"center","center"),t},_restoreObjectState:function(t){return this.realizeTransform(t),delete t.group,t.setCoords(),this},destroy:function(){return this._objects.forEach((function(t){t.set("dirty",!0)})),this._restoreObjectsState()},toActiveSelection:function(){if(this.canvas){var t=this._objects,i=this.canvas;this._objects=[];var r=this.toObject();delete r.objects;var n=new e.ActiveSelection([]);return n.set(r),n.type="activeSelection",i.remove(this),t.forEach((function(t){t.group=n,t.dirty=!0,i.add(t)})),n.canvas=i,n._objects=t,i._activeObject=n,n.setCoords(),n}},ungroupOnCanvas:function(){return this._restoreObjectsState()},setObjectsCoords:function(){return this.forEachObject((function(t){t.setCoords(!0)})),this},_calcBounds:function(t){for(var e,i,r,n=[],o=[],s=["tr","br","bl","tl"],a=0,l=this._objects.length,h=s.length;a<l;++a)for((e=this._objects[a]).aCoords=e.calcACoords(),r=0;r<h;r++)i=s[r],n.push(e.aCoords[i].x),o.push(e.aCoords[i].y);this._getBounds(n,o,t)},_getBounds:function(t,n,o){var s=new e.Point(i(t),i(n)),a=new e.Point(r(t),r(n)),l=s.y||0,h=s.x||0,c=a.x-s.x||0,u=a.y-s.y||0;this.width=c,this.height=u,o||this.setPositionByOrigin({x:h,y:l},"left","top")},_toSVG:function(t){for(var e=["<g ","COMMON_PARTS"," >\n"],i=0,r=this._objects.length;i<r;i++)e.push("\t\t",this._objects[i].toSVG(t));return e.push("</g>\n"),e},getSvgStyles:function(){var t=void 0!==this.opacity&&1!==this.opacity?"opacity: "+this.opacity+";":"",e=this.visible?"":" visibility: hidden;";return[t,this.getSvgFilter(),e].join("")},toClipPathSVG:function(t){for(var e=[],i=0,r=this._objects.length;i<r;i++)e.push("\t",this._objects[i].toClipPathSVG(t));return this._createBaseClipPathSVGMarkup(e,{reviver:t})}}),e.Group.fromObject=function(t,i){var r=t.objects,n=e.util.object.clone(t,!0);delete n.objects,"string"!=typeof r?e.util.enlivenObjects(r,(function(r){e.util.enlivenObjects([t.clipPath],(function(n){var o=e.util.object.clone(t,!0);o.clipPath=n[0],delete o.objects,i&&i(new e.Group(r,o,!0))}))})):e.loadSVGFromURL(r,(function(o){var s=e.util.groupSVGElements(o,t,r);s.set(n),i&&i(s)}))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.ActiveSelection||(e.ActiveSelection=e.util.createClass(e.Group,{type:"activeSelection",initialize:function(t,i){i=i||{},this._objects=t||[];for(var r=this._objects.length;r--;)this._objects[r].group=this;i.originX&&(this.originX=i.originX),i.originY&&(this.originY=i.originY),this._calcBounds(),this._updateObjectsCoords(),e.Object.prototype.initialize.call(this,i),this.setCoords()},toGroup:function(){var t=this._objects.concat();this._objects=[];var i=e.Object.prototype.toObject.call(this),r=new e.Group([]);if(delete i.type,r.set(i),t.forEach((function(t){t.canvas.remove(t),t.group=r})),r._objects=t,!this.canvas)return r;var n=this.canvas;return n.add(r),n._activeObject=r,r.setCoords(),r},onDeselect:function(){return this.destroy(),!1},toString:function(){return"#<fabric.ActiveSelection: ("+this.complexity()+")>"},shouldCache:function(){return!1},isOnACache:function(){return!1},_renderControls:function(t,e,i){t.save(),t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper("_renderControls",t,e),void 0===(i=i||{}).hasControls&&(i.hasControls=!1),i.forActiveSelection=!0;for(var r=0,n=this._objects.length;r<n;r++)this._objects[r]._renderControls(t,i);t.restore()}}),e.ActiveSelection.fromObject=function(t,i){e.util.enlivenObjects(t.objects,(function(r){delete t.objects,i&&i(new e.ActiveSelection(r,t,!0))}))})}(e),function(t){"use strict";var e=A.util.object.extend;t.fabric||(t.fabric={}),t.fabric.Image?A.warn("fabric.Image is already defined."):(A.Image=A.util.createClass(A.Object,{type:"image",strokeWidth:0,srcFromAttribute:!1,_lastScaleX:1,_lastScaleY:1,_filterScalingX:1,_filterScalingY:1,minimumScaleTrigger:.5,stateProperties:A.Object.prototype.stateProperties.concat("cropX","cropY"),cacheKey:"",cropX:0,cropY:0,imageSmoothing:!0,initialize:function(t,e){e||(e={}),this.filters=[],this.cacheKey="texture"+A.Object.__uid++,this.callSuper("initialize",e),this._initElement(t,e)},getElement:function(){return this._element||{}},setElement:function(t,e){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._element=t,this._originalElement=t,this._initConfig(e),0!==this.filters.length&&this.applyFilters(),this.resizeFilter&&this.applyResizeFilters(),this},removeTexture:function(t){var e=A.filterBackend;e&&e.evictCachesForKey&&e.evictCachesForKey(t)},dispose:function(){this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._cacheContext=void 0,["_originalElement","_element","_filteredEl","_cacheCanvas"].forEach(function(t){A.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this))},getCrossOrigin:function(){return this._originalElement&&(this._originalElement.crossOrigin||null)},getOriginalSize:function(){var t=this.getElement();return{width:t.naturalWidth||t.width,height:t.naturalHeight||t.height}},_stroke:function(t){if(this.stroke&&0!==this.strokeWidth){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,-i),t.lineTo(e,-i),t.lineTo(e,i),t.lineTo(-e,i),t.lineTo(-e,-i),t.closePath()}},_renderDashedStroke:function(t){var e=-this.width/2,i=-this.height/2,r=this.width,n=this.height;t.save(),this._setStrokeStyles(t,this),t.beginPath(),A.util.drawDashedLine(t,e,i,e+r,i,this.strokeDashArray),A.util.drawDashedLine(t,e+r,i,e+r,i+n,this.strokeDashArray),A.util.drawDashedLine(t,e+r,i+n,e,i+n,this.strokeDashArray),A.util.drawDashedLine(t,e,i+n,e,i,this.strokeDashArray),t.closePath(),t.restore()},toObject:function(t){var i=[];this.filters.forEach((function(t){t&&i.push(t.toObject())}));var r=e(this.callSuper("toObject",["cropX","cropY"].concat(t)),{src:this.getSrc(),crossOrigin:this.getCrossOrigin(),filters:i});return this.resizeFilter&&(r.resizeFilter=this.resizeFilter.toObject()),r},hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},_toSVG:function(){var t,e=[],i=[],r=this._element,n=-this.width/2,o=-this.height/2,s="",a="";if(!r)return[];if(this.hasCrop()){var l=A.Object.__uid++;e.push('<clipPath id="imageCrop_'+l+'">\n','\t<rect x="'+n+'" y="'+o+'" width="'+this.width+'" height="'+this.height+'" />\n',"</clipPath>\n"),s=' clip-path="url(#imageCrop_'+l+')" '}if(this.imageSmoothing||(a='" image-rendering="optimizeSpeed'),i.push("\t<image ","COMMON_PARTS",'xlink:href="',this.getSvgSrc(!0),'" x="',n-this.cropX,'" y="',o-this.cropY,'" width="',r.width||r.naturalWidth,'" height="',r.height||r.height,a,'"',s,"></image>\n"),this.stroke||this.strokeDashArray){var h=this.fill;this.fill=null,t=["\t<rect ",'x="',n,'" y="',o,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n'],this.fill=h}return"fill"!==this.paintFirst?e.concat(t,i):e.concat(i,t)},getSrc:function(t){var e=t?this._element:this._originalElement;return e?e.toDataURL?e.toDataURL():this.srcFromAttribute?e.getAttribute("src"):e.src:this.src||""},setSrc:function(t,e,i){return A.util.loadImage(t,(function(t,r){this.setElement(t,i),this._setWidthHeight(),e&&e(this,r)}),this,i&&i.crossOrigin),this},toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>'},applyResizeFilters:function(){var t=this.resizeFilter,e=this.minimumScaleTrigger,i=this.getTotalObjectScaling(),r=i.scaleX,n=i.scaleY,o=this._filteredEl||this._originalElement;if(this.group&&this.set("dirty",!0),!t||r>e&&n>e)return this._element=o,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=r,void(this._lastScaleY=n);A.filterBackend||(A.filterBackend=A.initFilterBackend());var s=A.util.createCanvasElement(),a=this._filteredEl?this.cacheKey+"_filtered":this.cacheKey,l=o.width,h=o.height;s.width=l,s.height=h,this._element=s,this._lastScaleX=t.scaleX=r,this._lastScaleY=t.scaleY=n,A.filterBackend.applyFilters([t],o,l,h,this._element,a),this._filterScalingX=s.width/this._originalElement.width,this._filterScalingY=s.height/this._originalElement.height},applyFilters:function(t){if(t=(t=t||this.filters||[]).filter((function(t){return t&&!t.isNeutralState()})),this.set("dirty",!0),this.removeTexture(this.cacheKey+"_filtered"),0===t.length)return this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1,this;var e=this._originalElement,i=e.naturalWidth||e.width,r=e.naturalHeight||e.height;if(this._element===this._originalElement){var n=A.util.createCanvasElement();n.width=i,n.height=r,this._element=n,this._filteredEl=n}else this._element=this._filteredEl,this._filteredEl.getContext("2d").clearRect(0,0,i,r),this._lastScaleX=1,this._lastScaleY=1;return A.filterBackend||(A.filterBackend=A.initFilterBackend()),A.filterBackend.applyFilters(t,this._originalElement,i,r,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height),this},_render:function(t){A.util.setImageSmoothing(t,this.imageSmoothing),!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(t),this._renderPaintInOrder(t)},drawCacheOnCanvas:function(t){A.util.setImageSmoothing(t,this.imageSmoothing),A.Object.prototype.drawCacheOnCanvas.call(this,t)},shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(t){var e=this._element;if(e){var i=this._filterScalingX,r=this._filterScalingY,n=this.width,o=this.height,s=Math.min,a=Math.max,l=a(this.cropX,0),h=a(this.cropY,0),c=e.naturalWidth||e.width,u=e.naturalHeight||e.height,f=l*i,d=h*r,p=s(n*i,c-f),g=s(o*r,u-d),m=-n/2,v=-o/2,b=s(n,c/i-l),y=s(o,u/i-h);e&&t.drawImage(e,f,d,p,g,m,v,b,y)}},_needsResize:function(){var t=this.getTotalObjectScaling();return t.scaleX!==this._lastScaleX||t.scaleY!==this._lastScaleY},_resetWidthHeight:function(){this.set(this.getOriginalSize())},_initElement:function(t,e){this.setElement(A.util.getById(t),e),A.util.addClass(this.getElement(),A.Image.CSS_CANVAS)},_initConfig:function(t){t||(t={}),this.setOptions(t),this._setWidthHeight(t)},_initFilters:function(t,e){t&&t.length?A.util.enlivenObjects(t,(function(t){e&&e(t)}),"fabric.Image.filters"):e&&e()},_setWidthHeight:function(t){t||(t={});var e=this.getElement();this.width=t.width||e.naturalWidth||e.width||0,this.height=t.height||e.naturalHeight||e.height||0},parsePreserveAspectRatioAttribute:function(){var t,e=A.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||""),i=this._element.width,r=this._element.height,n=1,o=1,s=0,a=0,l=0,h=0,c=this.width,u=this.height,f={width:c,height:u};return!e||"none"===e.alignX&&"none"===e.alignY?(n=c/i,o=u/r):("meet"===e.meetOrSlice&&(t=(c-i*(n=o=A.util.findScaleToFit(this._element,f)))/2,"Min"===e.alignX&&(s=-t),"Max"===e.alignX&&(s=t),t=(u-r*o)/2,"Min"===e.alignY&&(a=-t),"Max"===e.alignY&&(a=t)),"slice"===e.meetOrSlice&&(t=i-c/(n=o=A.util.findScaleToCover(this._element,f)),"Mid"===e.alignX&&(l=t/2),"Max"===e.alignX&&(l=t),t=r-u/o,"Mid"===e.alignY&&(h=t/2),"Max"===e.alignY&&(h=t),i=c/n,r=u/o)),{width:i,height:r,scaleX:n,scaleY:o,offsetLeft:s,offsetTop:a,cropX:l,cropY:h}}}),A.Image.CSS_CANVAS="canvas-img",A.Image.prototype.getSvgSrc=A.Image.prototype.getSrc,A.Image.fromObject=function(t,e){var i=A.util.object.clone(t);A.util.loadImage(i.src,(function(t,r){r?e&&e(null,!0):A.Image.prototype._initFilters.call(i,i.filters,(function(r){i.filters=r||[],A.Image.prototype._initFilters.call(i,[i.resizeFilter],(function(r){i.resizeFilter=r[0],A.util.enlivenObjects([i.clipPath],(function(r){i.clipPath=r[0];var n=new A.Image(t,i);e(n,!1)}))}))}))}),null,i.crossOrigin)},A.Image.fromURL=function(t,e,i){A.util.loadImage(t,(function(t,r){e&&e(new A.Image(t,i),r)}),null,i&&i.crossOrigin)},A.Image.ATTRIBUTE_NAMES=A.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")),A.Image.fromElement=function(t,i,r){var n=A.parseAttributes(t,A.Image.ATTRIBUTE_NAMES);A.Image.fromURL(n["xlink:href"],i,e(r?A.util.object.clone(r):{},n))})}(e),A.util.object.extend(A.Object.prototype,{_getAngleValueForStraighten:function(){var t=this.angle%360;return t>0?90*Math.round((t-1)/90):90*Math.round(t/90)},straighten:function(){return this.rotate(this._getAngleValueForStraighten()),this},fxStraighten:function(t){var e=function(){},i=(t=t||{}).onComplete||e,r=t.onChange||e,n=this;return A.util.animate({startValue:this.get("angle"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(t){n.rotate(t),r()},onComplete:function(){n.setCoords(),i()}}),this}}),A.util.object.extend(A.StaticCanvas.prototype,{straightenObject:function(t){return t.straighten(),this.requestRenderAll(),this},fxStraightenObject:function(t){return t.fxStraighten({onChange:this.requestRenderAllBound}),this}}),function(){"use strict";function t(t,e){var i="precision "+e+" float;\nvoid main(){}",r=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(r,i),t.compileShader(r),!!t.getShaderParameter(r,t.COMPILE_STATUS)}function e(t){t&&t.tileSize&&(this.tileSize=t.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}A.isWebglSupported=function(e){if(A.isLikelyNode)return!1;e=e||A.WebglFilterBackend.prototype.tileSize;var i=document.createElement("canvas"),r=i.getContext("webgl")||i.getContext("experimental-webgl"),n=!1;if(r){A.maxTextureSize=r.getParameter(r.MAX_TEXTURE_SIZE),n=A.maxTextureSize>=e;for(var o=["highp","mediump","lowp"],s=0;s<3;s++)if(t(r,o[s])){A.webGlPrecision=o[s];break}}return this.isSupported=n,n},A.WebglFilterBackend=e,e.prototype={tileSize:2048,resources:{},setupGLContext:function(t,e){this.dispose(),this.createWebGLCanvas(t,e),this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(t,e)},chooseFastestCopyGLTo2DMethod:function(t,e){var i,r=void 0!==window.performance;try{new ImageData(1,1),i=!0}catch(t){i=!1}var n="undefined"!=typeof ArrayBuffer,o="undefined"!=typeof Uint8ClampedArray;if(r&&i&&n&&o){var s=A.util.createCanvasElement(),a=new ArrayBuffer(t*e*4);if(A.forceGLPutImageData)return this.imageBuffer=a,void(this.copyGLTo2D=k);var l,h,c={imageBuffer:a,destinationWidth:t,destinationHeight:e,targetCanvas:s};s.width=t,s.height=e,l=window.performance.now(),T.call(c,this.gl,c),h=window.performance.now()-l,l=window.performance.now(),k.call(c,this.gl,c),h>window.performance.now()-l?(this.imageBuffer=a,this.copyGLTo2D=k):this.copyGLTo2D=T}},createWebGLCanvas:function(t,e){var i=A.util.createCanvasElement();i.width=t,i.height=e;var r={alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1},n=i.getContext("webgl",r);n||(n=i.getContext("experimental-webgl",r)),n&&(n.clearColor(0,0,0,0),this.canvas=i,this.gl=n)},applyFilters:function(t,e,i,r,n,o){var s,a=this.gl;o&&(s=this.getCachedTexture(o,e));var l={originalWidth:e.width||e.originalWidth,originalHeight:e.height||e.originalHeight,sourceWidth:i,sourceHeight:r,destinationWidth:i,destinationHeight:r,context:a,sourceTexture:this.createTexture(a,i,r,!s&&e),targetTexture:this.createTexture(a,i,r),originalTexture:s||this.createTexture(a,i,r,!s&&e),passes:t.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:n},h=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,h),t.forEach((function(t){t&&t.applyTo(l)})),function(t){var e=t.targetCanvas,i=e.width,r=e.height,n=t.destinationWidth,o=t.destinationHeight;i===n&&r===o||(e.width=n,e.height=o)}(l),this.copyGLTo2D(a,l),a.bindTexture(a.TEXTURE_2D,null),a.deleteTexture(l.sourceTexture),a.deleteTexture(l.targetTexture),a.deleteFramebuffer(h),n.getContext("2d").setTransform(1,0,0,1,0,0),l},dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},clearWebGLCaches:function(){this.programCache={},this.textureCache={}},createTexture:function(t,e,i,r){var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),r?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,i,0,t.RGBA,t.UNSIGNED_BYTE,null),n},getCachedTexture:function(t,e){if(this.textureCache[t])return this.textureCache[t];var i=this.createTexture(this.gl,e.width,e.height,e);return this.textureCache[t]=i,i},evictCachesForKey:function(t){this.textureCache[t]&&(this.gl.deleteTexture(this.textureCache[t]),delete this.textureCache[t])},copyGLTo2D:T,captureGPUInfo:function(){if(this.gpuInfo)return this.gpuInfo;var t=this.gl,e={renderer:"",vendor:""};if(!t)return e;var i=t.getExtension("WEBGL_debug_renderer_info");if(i){var r=t.getParameter(i.UNMASKED_RENDERER_WEBGL),n=t.getParameter(i.UNMASKED_VENDOR_WEBGL);r&&(e.renderer=r.toLowerCase()),n&&(e.vendor=n.toLowerCase())}return this.gpuInfo=e,e}}}(),function(){"use strict";var t=function(){};function e(){}A.Canvas2dFilterBackend=e,e.prototype={evictCachesForKey:t,dispose:t,clearWebGLCaches:t,resources:{},applyFilters:function(t,e,i,r,n){var o=n.getContext("2d");o.drawImage(e,0,0,i,r);var s={sourceWidth:i,sourceHeight:r,imageData:o.getImageData(0,0,i,r),originalEl:e,originalImageData:o.getImageData(0,0,i,r),canvasEl:n,ctx:o,filterBackend:this};return t.forEach((function(t){t.applyTo(s)})),s.imageData.width===i&&s.imageData.height===r||(n.width=s.imageData.width,n.height=s.imageData.height),o.putImageData(s.imageData,0,0),s}}}(),A.Image=A.Image||{},A.Image.filters=A.Image.filters||{},A.Image.filters.BaseFilter=A.util.createClass({type:"BaseFilter",vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:"precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",initialize:function(t){t&&this.setOptions(t)},setOptions:function(t){for(var e in t)this[e]=t[e]},createProgram:function(t,e,i){e=e||this.fragmentSource,i=i||this.vertexSource,"highp"!==A.webGlPrecision&&(e=e.replace(/precision highp float/g,"precision "+A.webGlPrecision+" float"));var r=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error("Vertex shader compile error for "+this.type+": "+t.getShaderInfoLog(r));var n=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error("Fragment shader compile error for "+this.type+": "+t.getShaderInfoLog(n));var o=t.createProgram();if(t.attachShader(o,r),t.attachShader(o,n),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error('Shader link error for "${this.type}" '+t.getProgramInfoLog(o));var s=this.getAttributeLocations(t,o),a=this.getUniformLocations(t,o)||{};return a.uStepW=t.getUniformLocation(o,"uStepW"),a.uStepH=t.getUniformLocation(o,"uStepH"),{program:o,attributeLocations:s,uniformLocations:a}},getAttributeLocations:function(t,e){return{aPosition:t.getAttribLocation(e,"aPosition")}},getUniformLocations:function(){return{}},sendAttributeData:function(t,e,i){var r=e.aPosition,n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n),t.enableVertexAttribArray(r),t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW)},_setupFrameBuffer:function(t){var e,i,r=t.context;t.passes>1?(e=t.destinationWidth,i=t.destinationHeight,t.sourceWidth===e&&t.sourceHeight===i||(r.deleteTexture(t.targetTexture),t.targetTexture=t.filterBackend.createTexture(r,e,i)),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t.targetTexture,0)):(r.bindFramebuffer(r.FRAMEBUFFER,null),r.finish())},_swapTextures:function(t){t.passes--,t.pass++;var e=t.targetTexture;t.targetTexture=t.sourceTexture,t.sourceTexture=e},isNeutralState:function(){var t=this.mainParameter,e=A.Image.filters[this.type].prototype;if(t){if(Array.isArray(e[t])){for(var i=e[t].length;i--;)if(this[t][i]!==e[t][i])return!1;return!0}return e[t]===this[t]}return!1},applyTo:function(t){t.webgl?(this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},retrieveShader:function(t){return t.programCache.hasOwnProperty(this.type)||(t.programCache[this.type]=this.createProgram(t.context)),t.programCache[this.type]},applyToWebGL:function(t){var e=t.context,i=this.retrieveShader(t);0===t.pass&&t.originalTexture?e.bindTexture(e.TEXTURE_2D,t.originalTexture):e.bindTexture(e.TEXTURE_2D,t.sourceTexture),e.useProgram(i.program),this.sendAttributeData(e,i.attributeLocations,t.aPosition),e.uniform1f(i.uniformLocations.uStepW,1/t.sourceWidth),e.uniform1f(i.uniformLocations.uStepH,1/t.sourceHeight),this.sendUniformData(e,i.uniformLocations),e.viewport(0,0,t.destinationWidth,t.destinationHeight),e.drawArrays(e.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(t,e,i){t.activeTexture(i),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE0)},unbindAdditionalTexture:function(t,e){t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(t){this[this.mainParameter]=t},sendUniformData:function(){},createHelpLayer:function(t){if(!t.helpLayer){var e=document.createElement("canvas");e.width=t.sourceWidth,e.height=t.sourceHeight,t.helpLayer=e}},toObject:function(){var t={type:this.type},e=this.mainParameter;return e&&(t[e]=this[e]),t},toJSON:function(){return this.toObject()}}),A.Image.filters.BaseFilter.fromObject=function(t,e){var i=new A.Image.filters[t.type](t);return e&&e(i),i},function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.ColorMatrix=r(i.BaseFilter,{type:"ColorMatrix",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:"matrix",colorsOnly:!0,initialize:function(t){this.callSuper("initialize",t),this.matrix=this.matrix.slice(0)},applyTo2d:function(t){var e,i,r,n,o,s=t.imageData.data,a=s.length,l=this.matrix,h=this.colorsOnly;for(o=0;o<a;o+=4)e=s[o],i=s[o+1],r=s[o+2],h?(s[o]=e*l[0]+i*l[1]+r*l[2]+255*l[4],s[o+1]=e*l[5]+i*l[6]+r*l[7]+255*l[9],s[o+2]=e*l[10]+i*l[11]+r*l[12]+255*l[14]):(n=s[o+3],s[o]=e*l[0]+i*l[1]+r*l[2]+n*l[3]+255*l[4],s[o+1]=e*l[5]+i*l[6]+r*l[7]+n*l[8]+255*l[9],s[o+2]=e*l[10]+i*l[11]+r*l[12]+n*l[13]+255*l[14],s[o+3]=e*l[15]+i*l[16]+r*l[17]+n*l[18]+255*l[19])},getUniformLocations:function(t,e){return{uColorMatrix:t.getUniformLocation(e,"uColorMatrix"),uConstants:t.getUniformLocation(e,"uConstants")}},sendUniformData:function(t,e){var i=this.matrix,r=[i[0],i[1],i[2],i[3],i[5],i[6],i[7],i[8],i[10],i[11],i[12],i[13],i[15],i[16],i[17],i[18]],n=[i[4],i[9],i[14],i[19]];t.uniformMatrix4fv(e.uColorMatrix,!1,r),t.uniform4fv(e.uConstants,n)}}),e.Image.filters.ColorMatrix.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Brightness=r(i.BaseFilter,{type:"Brightness",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",brightness:0,mainParameter:"brightness",applyTo2d:function(t){if(0!==this.brightness){var e,i=t.imageData.data,r=i.length,n=Math.round(255*this.brightness);for(e=0;e<r;e+=4)i[e]=i[e]+n,i[e+1]=i[e+1]+n,i[e+2]=i[e+2]+n}},getUniformLocations:function(t,e){return{uBrightness:t.getUniformLocation(e,"uBrightness")}},sendUniformData:function(t,e){t.uniform1f(e.uBrightness,this.brightness)}}),e.Image.filters.Brightness.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.Convolute=n(r.BaseFilter,{type:"Convolute",opaque:!1,matrix:[0,0,0,0,1,0,0,0,0],fragmentSource:{Convolute_3_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_3_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_5_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_5_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_7_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_7_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_9_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_9_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"},retrieveShader:function(t){var e=Math.sqrt(this.matrix.length),i=this.type+"_"+e+"_"+(this.opaque?1:0),r=this.fragmentSource[i];return t.programCache.hasOwnProperty(i)||(t.programCache[i]=this.createProgram(t.context,r)),t.programCache[i]},applyTo2d:function(t){var e,i,r,n,o,s,a,l,h,c,u,f,d,p=t.imageData,g=p.data,m=this.matrix,v=Math.round(Math.sqrt(m.length)),b=Math.floor(v/2),y=p.width,x=p.height,w=t.ctx.createImageData(y,x),_=w.data,S=this.opaque?1:0;for(u=0;u<x;u++)for(c=0;c<y;c++){for(o=4*(u*y+c),e=0,i=0,r=0,n=0,d=0;d<v;d++)for(f=0;f<v;f++)s=c+f-b,(a=u+d-b)<0||a>=x||s<0||s>=y||(l=4*(a*y+s),h=m[d*v+f],e+=g[l]*h,i+=g[l+1]*h,r+=g[l+2]*h,S||(n+=g[l+3]*h));_[o]=e,_[o+1]=i,_[o+2]=r,_[o+3]=S?g[o+3]:n}t.imageData=w},getUniformLocations:function(t,e){return{uMatrix:t.getUniformLocation(e,"uMatrix"),uOpaque:t.getUniformLocation(e,"uOpaque"),uHalfSize:t.getUniformLocation(e,"uHalfSize"),uSize:t.getUniformLocation(e,"uSize")}},sendUniformData:function(t,e){t.uniform1fv(e.uMatrix,this.matrix)},toObject:function(){return i(this.callSuper("toObject"),{opaque:this.opaque,matrix:this.matrix})}}),e.Image.filters.Convolute.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Grayscale=r(i.BaseFilter,{type:"Grayscale",fragmentSource:{average:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",lightness:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",luminosity:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"},mode:"average",mainParameter:"mode",applyTo2d:function(t){var e,i,r=t.imageData.data,n=r.length,o=this.mode;for(e=0;e<n;e+=4)"average"===o?i=(r[e]+r[e+1]+r[e+2])/3:"lightness"===o?i=(Math.min(r[e],r[e+1],r[e+2])+Math.max(r[e],r[e+1],r[e+2]))/2:"luminosity"===o&&(i=.21*r[e]+.72*r[e+1]+.07*r[e+2]),r[e]=i,r[e+1]=i,r[e+2]=i},retrieveShader:function(t){var e=this.type+"_"+this.mode;if(!t.programCache.hasOwnProperty(e)){var i=this.fragmentSource[this.mode];t.programCache[e]=this.createProgram(t.context,i)}return t.programCache[e]},getUniformLocations:function(t,e){return{uMode:t.getUniformLocation(e,"uMode")}},sendUniformData:function(t,e){t.uniform1i(e.uMode,1)},isNeutralState:function(){return!1}}),e.Image.filters.Grayscale.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Invert=r(i.BaseFilter,{type:"Invert",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",invert:!0,mainParameter:"invert",applyTo2d:function(t){var e,i=t.imageData.data,r=i.length;for(e=0;e<r;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},isNeutralState:function(){return!this.invert},getUniformLocations:function(t,e){return{uInvert:t.getUniformLocation(e,"uInvert")}},sendUniformData:function(t,e){t.uniform1i(e.uInvert,this.invert)}}),e.Image.filters.Invert.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.Noise=n(r.BaseFilter,{type:"Noise",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",mainParameter:"noise",noise:0,applyTo2d:function(t){if(0!==this.noise){var e,i,r=t.imageData.data,n=r.length,o=this.noise;for(e=0,n=r.length;e<n;e+=4)i=(.5-Math.random())*o,r[e]+=i,r[e+1]+=i,r[e+2]+=i}},getUniformLocations:function(t,e){return{uNoise:t.getUniformLocation(e,"uNoise"),uSeed:t.getUniformLocation(e,"uSeed")}},sendUniformData:function(t,e){t.uniform1f(e.uNoise,this.noise/255),t.uniform1f(e.uSeed,Math.random())},toObject:function(){return i(this.callSuper("toObject"),{noise:this.noise})}}),e.Image.filters.Noise.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Pixelate=r(i.BaseFilter,{type:"Pixelate",blocksize:4,mainParameter:"blocksize",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",applyTo2d:function(t){var e,i,r,n,o,s,a,l,h,c,u,f=t.imageData,d=f.data,p=f.height,g=f.width;for(i=0;i<p;i+=this.blocksize)for(r=0;r<g;r+=this.blocksize)for(n=d[e=4*i*g+4*r],o=d[e+1],s=d[e+2],a=d[e+3],c=Math.min(i+this.blocksize,p),u=Math.min(r+this.blocksize,g),l=i;l<c;l++)for(h=r;h<u;h++)d[e=4*l*g+4*h]=n,d[e+1]=o,d[e+2]=s,d[e+3]=a},isNeutralState:function(){return 1===this.blocksize},getUniformLocations:function(t,e){return{uBlocksize:t.getUniformLocation(e,"uBlocksize"),uStepW:t.getUniformLocation(e,"uStepW"),uStepH:t.getUniformLocation(e,"uStepH")}},sendUniformData:function(t,e){t.uniform1f(e.uBlocksize,this.blocksize)}}),e.Image.filters.Pixelate.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.RemoveColor=n(r.BaseFilter,{type:"RemoveColor",color:"#FFFFFF",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",distance:.02,useAlpha:!1,applyTo2d:function(t){var i,r,n,o,s=t.imageData.data,a=255*this.distance,l=new e.Color(this.color).getSource(),h=[l[0]-a,l[1]-a,l[2]-a],c=[l[0]+a,l[1]+a,l[2]+a];for(i=0;i<s.length;i+=4)r=s[i],n=s[i+1],o=s[i+2],r>h[0]&&n>h[1]&&o>h[2]&&r<c[0]&&n<c[1]&&o<c[2]&&(s[i+3]=0)},getUniformLocations:function(t,e){return{uLow:t.getUniformLocation(e,"uLow"),uHigh:t.getUniformLocation(e,"uHigh")}},sendUniformData:function(t,i){var r=new e.Color(this.color).getSource(),n=parseFloat(this.distance),o=[0+r[0]/255-n,0+r[1]/255-n,0+r[2]/255-n,1],s=[r[0]/255+n,r[1]/255+n,r[2]/255+n,1];t.uniform4fv(i.uLow,o),t.uniform4fv(i.uHigh,s)},toObject:function(){return i(this.callSuper("toObject"),{color:this.color,distance:this.distance})}}),e.Image.filters.RemoveColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass,n={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(var o in n)i[o]=r(i.ColorMatrix,{type:o,matrix:n[o],mainParameter:!1,colorsOnly:!0}),e.Image.filters[o].fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,r=e.util.createClass;i.BlendColor=r(i.BaseFilter,{type:"BlendColor",color:"#F95C63",mode:"multiply",alpha:1,fragmentSource:{multiply:"gl_FragColor.rgb *= uColor.rgb;\n",screen:"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",add:"gl_FragColor.rgb += uColor.rgb;\n",diff:"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",subtract:"gl_FragColor.rgb -= uColor.rgb;\n",lighten:"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",darken:"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",exclusion:"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",overlay:"if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",tint:"gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"},buildSource:function(t){return"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n"+this.fragmentSource[t]+"}\n}"},retrieveShader:function(t){var e,i=this.type+"_"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.buildSource(this.mode),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},applyTo2d:function(t){var i,r,n,o,s,a,l,h=t.imageData.data,c=h.length,u=1-this.alpha;i=(l=new e.Color(this.color).getSource())[0]*this.alpha,r=l[1]*this.alpha,n=l[2]*this.alpha;for(var f=0;f<c;f+=4)switch(o=h[f],s=h[f+1],a=h[f+2],this.mode){case"multiply":h[f]=o*i/255,h[f+1]=s*r/255,h[f+2]=a*n/255;break;case"screen":h[f]=255-(255-o)*(255-i)/255,h[f+1]=255-(255-s)*(255-r)/255,h[f+2]=255-(255-a)*(255-n)/255;break;case"add":h[f]=o+i,h[f+1]=s+r,h[f+2]=a+n;break;case"diff":case"difference":h[f]=Math.abs(o-i),h[f+1]=Math.abs(s-r),h[f+2]=Math.abs(a-n);break;case"subtract":h[f]=o-i,h[f+1]=s-r,h[f+2]=a-n;break;case"darken":h[f]=Math.min(o,i),h[f+1]=Math.min(s,r),h[f+2]=Math.min(a,n);break;case"lighten":h[f]=Math.max(o,i),h[f+1]=Math.max(s,r),h[f+2]=Math.max(a,n);break;case"overlay":h[f]=i<128?2*o*i/255:255-2*(255-o)*(255-i)/255,h[f+1]=r<128?2*s*r/255:255-2*(255-s)*(255-r)/255,h[f+2]=n<128?2*a*n/255:255-2*(255-a)*(255-n)/255;break;case"exclusion":h[f]=i+o-2*i*o/255,h[f+1]=r+s-2*r*s/255,h[f+2]=n+a-2*n*a/255;break;case"tint":h[f]=i+o*u,h[f+1]=r+s*u,h[f+2]=n+a*u}},getUniformLocations:function(t,e){return{uColor:t.getUniformLocation(e,"uColor")}},sendUniformData:function(t,i){var r=new e.Color(this.color).getSource();r[0]=this.alpha*r[0]/255,r[1]=this.alpha*r[1]/255,r[2]=this.alpha*r[2]/255,r[3]=this.alpha,t.uniform4fv(i.uColor,r)},toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,r=e.util.createClass;i.BlendImage=r(i.BaseFilter,{type:"BlendImage",image:null,mode:"multiply",alpha:1,vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:{multiply:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",mask:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"},retrieveShader:function(t){var e=this.type+"_"+this.mode,i=this.fragmentSource[this.mode];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyToWebGL:function(t){var e=t.context,i=this.createTexture(t.filterBackend,this.image);this.bindAdditionalTexture(e,i,e.TEXTURE1),this.callSuper("applyToWebGL",t),this.unbindAdditionalTexture(e,e.TEXTURE1)},createTexture:function(t,e){return t.getCachedTexture(e.cacheKey,e._element)},calculateMatrix:function(){var t=this.image,e=t._element.width,i=t._element.height;return[1/t.scaleX,0,0,0,1/t.scaleY,0,-t.left/e,-t.top/i,1]},applyTo2d:function(t){var i,r,n,o,s,a,l,h,c,u,f,d=t.imageData,p=t.filterBackend.resources,g=d.data,m=g.length,v=d.width,b=d.height,y=this.image;p.blendImage||(p.blendImage=e.util.createCanvasElement()),u=(c=p.blendImage).getContext("2d"),c.width!==v||c.height!==b?(c.width=v,c.height=b):u.clearRect(0,0,v,b),u.setTransform(y.scaleX,0,0,y.scaleY,y.left,y.top),u.drawImage(y._element,0,0,v,b),f=u.getImageData(0,0,v,b).data;for(var x=0;x<m;x+=4)switch(s=g[x],a=g[x+1],l=g[x+2],h=g[x+3],i=f[x],r=f[x+1],n=f[x+2],o=f[x+3],this.mode){case"multiply":g[x]=s*i/255,g[x+1]=a*r/255,g[x+2]=l*n/255,g[x+3]=h*o/255;break;case"mask":g[x+3]=o}},getUniformLocations:function(t,e){return{uTransformMatrix:t.getUniformLocation(e,"uTransformMatrix"),uImage:t.getUniformLocation(e,"uImage")}},sendUniformData:function(t,e){var i=this.calculateMatrix();t.uniform1i(e.uImage,1),t.uniformMatrix3fv(e.uTransformMatrix,!1,i)},toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendImage.fromObject=function(t,i){e.Image.fromObject(t.image,(function(r){var n=e.util.object.clone(t);n.image=r,i(new e.Image.filters.BlendImage(n))}))}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=Math.pow,r=Math.floor,n=Math.sqrt,o=Math.abs,s=Math.round,a=Math.sin,l=Math.ceil,h=e.Image.filters,c=e.util.createClass;h.Resize=c(h.BaseFilter,{type:"Resize",resizeType:"hermite",scaleX:1,scaleY:1,lanczosLobes:3,getUniformLocations:function(t,e){return{uDelta:t.getUniformLocation(e,"uDelta"),uTaps:t.getUniformLocation(e,"uTaps")}},sendUniformData:function(t,e){t.uniform2fv(e.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),t.uniform1fv(e.uTaps,this.taps)},retrieveShader:function(t){var e=this.getFilterWindow(),i=this.type+"_"+e;if(!t.programCache.hasOwnProperty(i)){var r=this.generateShader(e);t.programCache[i]=this.createProgram(t.context,r)}return t.programCache[i]},getFilterWindow:function(){var t=this.tempScale;return Math.ceil(this.lanczosLobes/t)},getTaps:function(){for(var t=this.lanczosCreate(this.lanczosLobes),e=this.tempScale,i=this.getFilterWindow(),r=new Array(i),n=1;n<=i;n++)r[n-1]=t(n*e);return r},generateShader:function(t){for(var e=new Array(t),i=this.fragmentSourceTOP,r=1;r<=t;r++)e[r-1]=r+".0 * uDelta";return i+="uniform float uTaps["+t+"];\n",i+="void main() {\n",i+="  vec4 color = texture2D(uTexture, vTexCoord);\n",i+="  float sum = 1.0;\n",e.forEach((function(t,e){i+="  color += texture2D(uTexture, vTexCoord + "+t+") * uTaps["+e+"];\n",i+="  color += texture2D(uTexture, vTexCoord - "+t+") * uTaps["+e+"];\n",i+="  sum += 2.0 * uTaps["+e+"];\n"})),i+="  gl_FragColor = color / sum;\n",i+="}"},fragmentSourceTOP:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",applyTo:function(t){t.webgl?(t.passes++,this.width=t.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=t.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),t.destinationWidth=this.dW,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceWidth=t.destinationWidth,this.height=t.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),t.destinationHeight=this.dH,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceHeight=t.destinationHeight):this.applyTo2d(t)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(t){return function(e){if(e>=t||e<=-t)return 0;if(e<1.1920929e-7&&e>-1.1920929e-7)return 1;var i=(e*=Math.PI)/t;return a(e)/e*a(i)/i}},applyTo2d:function(t){var e=t.imageData,i=this.scaleX,r=this.scaleY;this.rcpScaleX=1/i,this.rcpScaleY=1/r;var n,o=e.width,a=e.height,l=s(o*i),h=s(a*r);"sliceHack"===this.resizeType?n=this.sliceByTwo(t,o,a,l,h):"hermite"===this.resizeType?n=this.hermiteFastResize(t,o,a,l,h):"bilinear"===this.resizeType?n=this.bilinearFiltering(t,o,a,l,h):"lanczos"===this.resizeType&&(n=this.lanczosResize(t,o,a,l,h)),t.imageData=n},sliceByTwo:function(t,i,n,o,s){var a,l,h=t.imageData,c=.5,u=!1,f=!1,d=i*c,p=n*c,g=e.filterBackend.resources,m=0,v=0,b=i,y=0;for(g.sliceByTwo||(g.sliceByTwo=document.createElement("canvas")),((a=g.sliceByTwo).width<1.5*i||a.height<n)&&(a.width=1.5*i,a.height=n),(l=a.getContext("2d")).clearRect(0,0,1.5*i,n),l.putImageData(h,0,0),o=r(o),s=r(s);!u||!f;)i=d,n=p,o<r(d*c)?d=r(d*c):(d=o,u=!0),s<r(p*c)?p=r(p*c):(p=s,f=!0),l.drawImage(a,m,v,i,n,b,y,d,p),m=b,v=y,y+=p;return l.getImageData(m,v,o,s)},lanczosResize:function(t,e,s,a,h){var c=t.imageData.data,u=t.ctx.createImageData(a,h),f=u.data,d=this.lanczosCreate(this.lanczosLobes),p=this.rcpScaleX,g=this.rcpScaleY,m=2/this.rcpScaleX,v=2/this.rcpScaleY,b=l(p*this.lanczosLobes/2),y=l(g*this.lanczosLobes/2),x={},w={},_={};return function t(l){var S,C,A,L,T,k,O,N,P,E,F;for(w.x=(l+.5)*p,_.x=r(w.x),S=0;S<h;S++){for(w.y=(S+.5)*g,_.y=r(w.y),T=0,k=0,O=0,N=0,P=0,C=_.x-b;C<=_.x+b;C++)if(!(C<0||C>=e)){E=r(1e3*o(C-w.x)),x[E]||(x[E]={});for(var j=_.y-y;j<=_.y+y;j++)j<0||j>=s||(F=r(1e3*o(j-w.y)),x[E][F]||(x[E][F]=d(n(i(E*m,2)+i(F*v,2))/1e3)),(A=x[E][F])>0&&(T+=A,k+=A*c[L=4*(j*e+C)],O+=A*c[L+1],N+=A*c[L+2],P+=A*c[L+3]))}f[L=4*(S*a+l)]=k/T,f[L+1]=O/T,f[L+2]=N/T,f[L+3]=P/T}return++l<a?t(l):u}(0)},bilinearFiltering:function(t,e,i,n,o){var s,a,l,h,c,u,f,d,p,g=0,m=this.rcpScaleX,v=this.rcpScaleY,b=4*(e-1),y=t.imageData.data,x=t.ctx.createImageData(n,o),w=x.data;for(l=0;l<o;l++)for(h=0;h<n;h++)for(c=m*h-(s=r(m*h)),u=v*l-(a=r(v*l)),p=4*(a*e+s),f=0;f<4;f++)d=y[p+f]*(1-c)*(1-u)+y[p+4+f]*c*(1-u)+y[p+b+f]*u*(1-c)+y[p+b+4+f]*c*u,w[g++]=d;return x},hermiteFastResize:function(t,e,i,s,a){for(var h=this.rcpScaleX,c=this.rcpScaleY,u=l(h/2),f=l(c/2),d=t.imageData.data,p=t.ctx.createImageData(s,a),g=p.data,m=0;m<a;m++)for(var v=0;v<s;v++){for(var b=4*(v+m*s),y=0,x=0,w=0,_=0,S=0,C=0,A=0,L=(m+.5)*c,T=r(m*c);T<(m+1)*c;T++)for(var k=o(L-(T+.5))/f,O=(v+.5)*h,N=k*k,P=r(v*h);P<(v+1)*h;P++){var E=o(O-(P+.5))/u,F=n(N+E*E);F>1&&F<-1||(y=2*F*F*F-3*F*F+1)>0&&(A+=y*d[3+(E=4*(P+T*e))],w+=y,d[E+3]<255&&(y=y*d[E+3]/250),_+=y*d[E],S+=y*d[E+1],C+=y*d[E+2],x+=y)}g[b]=_/x,g[b+1]=S/x,g[b+2]=C/x,g[b+3]=A/w}return p},toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),e.Image.filters.Resize.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Contrast=r(i.BaseFilter,{type:"Contrast",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",contrast:0,mainParameter:"contrast",applyTo2d:function(t){if(0!==this.contrast){var e,i=t.imageData.data,r=i.length,n=Math.floor(255*this.contrast),o=259*(n+255)/(255*(259-n));for(e=0;e<r;e+=4)i[e]=o*(i[e]-128)+128,i[e+1]=o*(i[e+1]-128)+128,i[e+2]=o*(i[e+2]-128)+128}},getUniformLocations:function(t,e){return{uContrast:t.getUniformLocation(e,"uContrast")}},sendUniformData:function(t,e){t.uniform1f(e.uContrast,this.contrast)}}),e.Image.filters.Contrast.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Saturation=r(i.BaseFilter,{type:"Saturation",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",saturation:0,mainParameter:"saturation",applyTo2d:function(t){if(0!==this.saturation){var e,i,r=t.imageData.data,n=r.length,o=-this.saturation;for(e=0;e<n;e+=4)i=Math.max(r[e],r[e+1],r[e+2]),r[e]+=i!==r[e]?(i-r[e])*o:0,r[e+1]+=i!==r[e+1]?(i-r[e+1])*o:0,r[e+2]+=i!==r[e+2]?(i-r[e+2])*o:0}},getUniformLocations:function(t,e){return{uSaturation:t.getUniformLocation(e,"uSaturation")}},sendUniformData:function(t,e){t.uniform1f(e.uSaturation,-this.saturation)}}),e.Image.filters.Saturation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Blur=r(i.BaseFilter,{type:"Blur",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",blur:0,mainParameter:"blur",applyTo:function(t){t.webgl?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},applyTo2d:function(t){t.imageData=this.simpleBlur(t)},simpleBlur:function(t){var i,r,n=t.filterBackend.resources,o=t.imageData.width,s=t.imageData.height;n.blurLayer1||(n.blurLayer1=e.util.createCanvasElement(),n.blurLayer2=e.util.createCanvasElement()),i=n.blurLayer1,r=n.blurLayer2,i.width===o&&i.height===s||(r.width=i.width=o,r.height=i.height=s);var a,l,h,c,u=i.getContext("2d"),f=r.getContext("2d"),d=.06*this.blur*.5;for(u.putImageData(t.imageData,0,0),f.clearRect(0,0,o,s),c=-15;c<=15;c++)h=d*(l=c/15)*o+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(l),f.drawImage(i,h,a),u.drawImage(r,0,0),f.globalAlpha=1,f.clearRect(0,0,r.width,r.height);for(c=-15;c<=15;c++)h=d*(l=c/15)*s+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(l),f.drawImage(i,a,h),u.drawImage(r,0,0),f.globalAlpha=1,f.clearRect(0,0,r.width,r.height);t.ctx.drawImage(i,0,0);var p=t.ctx.getImageData(0,0,i.width,i.height);return u.globalAlpha=1,u.clearRect(0,0,i.width,i.height),p},getUniformLocations:function(t,e){return{delta:t.getUniformLocation(e,"uDelta")}},sendUniformData:function(t,e){var i=this.chooseRightDelta();t.uniform2fv(e.delta,i)},chooseRightDelta:function(){var t,e=1,i=[0,0];return this.horizontal?this.aspectRatio>1&&(e=1/this.aspectRatio):this.aspectRatio<1&&(e=this.aspectRatio),t=e*this.blur*.12,this.horizontal?i[0]=t:i[1]=t,i}}),i.Blur.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Gamma=r(i.BaseFilter,{type:"Gamma",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",gamma:[1,1,1],mainParameter:"gamma",initialize:function(t){this.gamma=[1,1,1],i.BaseFilter.prototype.initialize.call(this,t)},applyTo2d:function(t){var e,i=t.imageData.data,r=this.gamma,n=i.length,o=1/r[0],s=1/r[1],a=1/r[2];for(this.rVals||(this.rVals=new Uint8Array(256),this.gVals=new Uint8Array(256),this.bVals=new Uint8Array(256)),e=0,n=256;e<n;e++)this.rVals[e]=255*Math.pow(e/255,o),this.gVals[e]=255*Math.pow(e/255,s),this.bVals[e]=255*Math.pow(e/255,a);for(e=0,n=i.length;e<n;e+=4)i[e]=this.rVals[i[e]],i[e+1]=this.gVals[i[e+1]],i[e+2]=this.bVals[i[e+2]]},getUniformLocations:function(t,e){return{uGamma:t.getUniformLocation(e,"uGamma")}},sendUniformData:function(t,e){t.uniform3fv(e.uGamma,this.gamma)}}),e.Image.filters.Gamma.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Composed=r(i.BaseFilter,{type:"Composed",subFilters:[],initialize:function(t){this.callSuper("initialize",t),this.subFilters=this.subFilters.slice(0)},applyTo:function(t){t.passes+=this.subFilters.length-1,this.subFilters.forEach((function(e){e.applyTo(t)}))},toObject:function(){return e.util.object.extend(this.callSuper("toObject"),{subFilters:this.subFilters.map((function(t){return t.toObject()}))})},isNeutralState:function(){return!this.subFilters.some((function(t){return!t.isNeutralState()}))}}),e.Image.filters.Composed.fromObject=function(t,i){var r=(t.subFilters||[]).map((function(t){return new e.Image.filters[t.type](t)})),n=new e.Image.filters.Composed({subFilters:r});return i&&i(n),n}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.HueRotation=r(i.ColorMatrix,{type:"HueRotation",rotation:0,mainParameter:"rotation",calculateMatrix:function(){var t=this.rotation*Math.PI,i=e.util.cos(t),r=e.util.sin(t),n=1/3,o=Math.sqrt(n)*r,s=1-i;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=i+s/3,this.matrix[1]=n*s-o,this.matrix[2]=n*s+o,this.matrix[5]=n*s+o,this.matrix[6]=i+n*s,this.matrix[7]=n*s-o,this.matrix[10]=n*s-o,this.matrix[11]=n*s+o,this.matrix[12]=i+n*s},isNeutralState:function(t){return this.calculateMatrix(),i.BaseFilter.prototype.isNeutralState.call(this,t)},applyTo:function(t){this.calculateMatrix(),i.BaseFilter.prototype.applyTo.call(this,t)}}),e.Image.filters.HueRotation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.clone;if(e.Text)e.warn("fabric.Text is already defined");else{var r="fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles path".split(" ");e.Text=e.util.createClass(e.Object,{_dimensionAffectingProps:["fontSize","fontWeight","fontFamily","fontStyle","lineHeight","text","charSpacing","textAlign","styles","path"],_reNewline:/\r?\n/,_reSpacesAndTabs:/[ \t\r]/g,_reSpaceAndTab:/[ \t\r]/,_reWords:/\S+/g,type:"text",fontSize:40,fontWeight:"normal",fontFamily:"Times New Roman",underline:!1,overline:!1,linethrough:!1,textAlign:"left",fontStyle:"normal",lineHeight:1.16,superscript:{size:.6,baseline:-.35},subscript:{size:.6,baseline:.11},textBackgroundColor:"",stateProperties:e.Object.prototype.stateProperties.concat(r),cacheProperties:e.Object.prototype.cacheProperties.concat(r),stroke:null,shadow:null,_fontSizeFraction:.222,offsets:{underline:.1,linethrough:-.315,overline:-.88},_fontSizeMult:1.13,charSpacing:0,styles:null,_measuringContext:null,deltaY:0,_styleProperties:["stroke","strokeWidth","fill","fontFamily","fontSize","fontWeight","fontStyle","underline","overline","linethrough","deltaY","textBackgroundColor"],__charBounds:[],CACHE_FONT_SIZE:400,MIN_TEXT_WIDTH:2,initialize:function(t,e){this.styles=e&&e.styles||{},this.text=t,this.__skipDimension=!0,this.callSuper("initialize",e),this.path&&this.setPathInfo(),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:"_dimensionAffectingProps"})},setPathInfo:function(){var t=this.path;t&&(t.segmentsInfo=e.util.getPathSegmentsInfo(t.path))},getMeasuringContext:function(){return e._measuringContext||(e._measuringContext=this.canvas&&this.canvas.contextCache||e.util.createCanvasElement().getContext("2d")),e._measuringContext},_splitText:function(){var t=this._splitTextIntoLines(this.text);return this.textLines=t.lines,this._textLines=t.graphemeLines,this._unwrappedTextLines=t._unwrappedLines,this._text=t.graphemeText,t},initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.path?(this.width=this.path.width,this.height=this.path.height):(this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,this.height=this.calcTextHeight()),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.saveState({propertySet:"_dimensionAffectingProps"}))},enlargeSpaces:function(){for(var t,e,i,r,n,o,s,a=0,l=this._textLines.length;a<l;a++)if(("justify"===this.textAlign||a!==l-1&&!this.isEndOfWrapping(a))&&(r=0,n=this._textLines[a],(e=this.getLineWidth(a))<this.width&&(s=this.textLines[a].match(this._reSpacesAndTabs)))){i=s.length,t=(this.width-e)/i;for(var h=0,c=n.length;h<=c;h++)o=this.__charBounds[a][h],this._reSpaceAndTab.test(n[h])?(o.width+=t,o.kernedWidth+=t,o.left+=r,r+=t):o.left+=r}},isEndOfWrapping:function(t){return t===this._textLines.length-1},missingNewlineOffset:function(){return 1},toString:function(){return"#<fabric.Text ("+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>'},_getCacheCanvasDimensions:function(){var t=this.callSuper("_getCacheCanvasDimensions"),e=this.fontSize;return t.width+=e*t.zoomX,t.height+=e*t.zoomY,t},_render:function(t){this._setTextStyles(t),this._renderTextLinesBackground(t),this._renderTextDecoration(t,"underline"),this._renderText(t),this._renderTextDecoration(t,"overline"),this._renderTextDecoration(t,"linethrough")},_renderText:function(t){"stroke"===this.paintFirst?(this._renderTextStroke(t),this._renderTextFill(t)):(this._renderTextFill(t),this._renderTextStroke(t))},_setTextStyles:function(t,e,i){t.textBaseline="alphabetic",t.font=this._getFontDeclaration(e,i)},calcTextWidth:function(){for(var t=this.getLineWidth(0),e=1,i=this._textLines.length;e<i;e++){var r=this.getLineWidth(e);r>t&&(t=r)}return t},_renderTextLine:function(t,e,i,r,n,o){this._renderChars(t,e,i,r,n,o)},_renderTextLinesBackground:function(t){if(this.textBackgroundColor||this.styleHas("textBackgroundColor")){for(var e,i,r,n,o,s,a=t.fillStyle,l=this._getLeftOffset(),h=this._getTopOffset(),c=0,u=0,f=this.path,d=0,p=this._textLines.length;d<p;d++)if(e=this.getHeightOfLine(d),this.textBackgroundColor||this.styleHas("textBackgroundColor",d)){r=this._textLines[d],i=this._getLineLeftOffset(d),u=0,c=0,n=this.getValueOfPropertyAt(d,0,"textBackgroundColor");for(var g=0,m=r.length;g<m;g++)o=this.__charBounds[d][g],s=this.getValueOfPropertyAt(d,g,"textBackgroundColor"),f?(t.save(),t.translate(o.renderLeft,o.renderTop),t.rotate(o.angle),t.fillStyle=s,s&&t.fillRect(-o.width/2,-e/this.lineHeight*(1-this._fontSizeFraction),o.width,e/this.lineHeight),t.restore()):s!==n?(t.fillStyle=n,n&&t.fillRect(l+i+c,h,u,e/this.lineHeight),c=o.left,u=o.width,n=s):u+=o.kernedWidth;s&&!f&&(t.fillStyle=s,t.fillRect(l+i+c,h,u,e/this.lineHeight)),h+=e}else h+=e;t.fillStyle=a,this._removeShadow(t)}},getFontCache:function(t){var i=t.fontFamily.toLowerCase();e.charWidthsCache[i]||(e.charWidthsCache[i]={});var r=e.charWidthsCache[i],n=t.fontStyle.toLowerCase()+"_"+(t.fontWeight+"").toLowerCase();return r[n]||(r[n]={}),r[n]},_measureChar:function(t,e,i,r){var n,o,s,a,l=this.getFontCache(e),h=i+t,c=this._getFontDeclaration(e)===this._getFontDeclaration(r),u=e.fontSize/this.CACHE_FONT_SIZE;if(i&&void 0!==l[i]&&(s=l[i]),void 0!==l[t]&&(a=n=l[t]),c&&void 0!==l[h]&&(a=(o=l[h])-s),void 0===n||void 0===s||void 0===o){var f=this.getMeasuringContext();this._setTextStyles(f,e,!0)}return void 0===n&&(a=n=f.measureText(t).width,l[t]=n),void 0===s&&c&&i&&(s=f.measureText(i).width,l[i]=s),c&&void 0===o&&(o=f.measureText(h).width,l[h]=o,a=o-s),{width:n*u,kernedWidth:a*u}},getHeightOfChar:function(t,e){return this.getValueOfPropertyAt(t,e,"fontSize")},measureLine:function(t){var e=this._measureLine(t);return 0!==this.charSpacing&&(e.width-=this._getWidthOfCharSpacing()),e.width<0&&(e.width=0),e},_measureLine:function(t){var i,r,n,o,s,a,l=0,h=this._textLines[t],c=new Array(h.length),u=0,f=this.path;for(this.__charBounds[t]=c,f&&(s=e.util.getPointOnPath(f.path,0,f.segmentsInfo),a=f.segmentsInfo[f.segmentsInfo.length-1].length,s.x+=f.pathOffset.x,s.y+=f.pathOffset.y),i=0;i<h.length;i++)r=h[i],o=this._getGraphemeBox(r,t,i,n),f&&(u>a&&(u%=a),this._setGraphemeOnPath(u,o,s)),c[i]=o,l+=o.kernedWidth,u+=o.kernedWidth,n=r;return c[i]={left:o?o.left+o.width:0,width:0,kernedWidth:0,height:this.fontSize},{width:l,numOfSpaces:0}},_setGraphemeOnPath:function(t,i,r){var n=t+i.kernedWidth/2,o=this.path,s=e.util.getPointOnPath(o.path,n,o.segmentsInfo);i.renderLeft=s.x-r.x,i.renderTop=s.y-r.y,i.angle=s.angle},_getGraphemeBox:function(t,e,i,r,n){var o,s=this.getCompleteStyleDeclaration(e,i),a=r?this.getCompleteStyleDeclaration(e,i-1):{},l=this._measureChar(t,s,r,a),h=l.kernedWidth,c=l.width;0!==this.charSpacing&&(c+=o=this._getWidthOfCharSpacing(),h+=o);var u={width:c,left:0,height:s.fontSize,kernedWidth:h,deltaY:s.deltaY};if(i>0&&!n){var f=this.__charBounds[e][i-1];u.left=f.left+f.width+l.kernedWidth-l.width}return u},getHeightOfLine:function(t){if(this.__lineHeights[t])return this.__lineHeights[t];for(var e=this._textLines[t],i=this.getHeightOfChar(t,0),r=1,n=e.length;r<n;r++)i=Math.max(this.getHeightOfChar(t,r),i);return this.__lineHeights[t]=i*this.lineHeight*this._fontSizeMult},calcTextHeight:function(){for(var t,e=0,i=0,r=this._textLines.length;i<r;i++)t=this.getHeightOfLine(i),e+=i===r-1?t/this.lineHeight:t;return e},_getLeftOffset:function(){return-this.width/2},_getTopOffset:function(){return-this.height/2},_renderTextCommon:function(t,e){t.save();for(var i=0,r=this._getLeftOffset(),n=this._getTopOffset(),o=0,s=this._textLines.length;o<s;o++){var a=this.getHeightOfLine(o),l=a/this.lineHeight,h=this._getLineLeftOffset(o);this._renderTextLine(e,t,this._textLines[o],r+h,n+i+l,o),i+=a}t.restore()},_renderTextFill:function(t){(this.fill||this.styleHas("fill"))&&this._renderTextCommon(t,"fillText")},_renderTextStroke:function(t){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this._setLineDash(t,this.strokeDashArray),t.beginPath(),this._renderTextCommon(t,"strokeText"),t.closePath(),t.restore())},_renderChars:function(t,e,i,r,n,o){var s,a,l,h,c=this.getHeightOfLine(o),u=-1!==this.textAlign.indexOf("justify"),f="",d=0,p=this.path,g=!u&&0===this.charSpacing&&this.isEmptyStyles(o)&&!p;if(e.save(),n-=c*this._fontSizeFraction/this.lineHeight,g)return this._renderChar(t,e,o,0,i.join(""),r,n,c),void e.restore();for(var m=0,v=i.length-1;m<=v;m++)h=m===v||this.charSpacing||p,f+=i[m],l=this.__charBounds[o][m],0===d?(r+=l.kernedWidth-l.width,d+=l.width):d+=l.kernedWidth,u&&!h&&this._reSpaceAndTab.test(i[m])&&(h=!0),h||(s=s||this.getCompleteStyleDeclaration(o,m),a=this.getCompleteStyleDeclaration(o,m+1),h=this._hasStyleChanged(s,a)),h&&(p?(e.save(),e.translate(l.renderLeft,l.renderTop),e.rotate(l.angle),this._renderChar(t,e,o,m,f,-d/2,0,c),e.restore()):this._renderChar(t,e,o,m,f,r,n,c),f="",s=a,r+=d,d=0);e.restore()},_applyPatternGradientTransformText:function(t){var i,r=e.util.createCanvasElement(),n=this.width+this.strokeWidth,o=this.height+this.strokeWidth;return r.width=n,r.height=o,(i=r.getContext("2d")).beginPath(),i.moveTo(0,0),i.lineTo(n,0),i.lineTo(n,o),i.lineTo(0,o),i.closePath(),i.translate(n/2,o/2),i.fillStyle=t.toLive(i),this._applyPatternGradientTransform(i,t),i.fill(),i.createPattern(r,"no-repeat")},handleFiller:function(t,e,i){var r,n;return i.toLive?"percentage"===i.gradientUnits||i.gradientTrasnform||i.patternTransform?(r=-this.width/2,n=-this.height/2,t.translate(r,n),t[e]=this._applyPatternGradientTransformText(i),{offsetX:r,offsetY:n}):(t[e]=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):(t[e]=i,{offsetX:0,offsetY:0})},_setStrokeStyles:function(t,e){return t.lineWidth=e.strokeWidth,t.lineCap=this.strokeLineCap,t.lineDashOffset=this.strokeDashOffset,t.lineJoin=this.strokeLineJoin,t.miterLimit=this.strokeMiterLimit,this.handleFiller(t,"strokeStyle",e.stroke)},_setFillStyles:function(t,e){return this.handleFiller(t,"fillStyle",e.fill)},_renderChar:function(t,e,i,r,n,o,s){var a,l,h=this._getStyleDeclaration(i,r),c=this.getCompleteStyleDeclaration(i,r),u="fillText"===t&&c.fill,f="strokeText"===t&&c.stroke&&c.strokeWidth;(f||u)&&(e.save(),u&&(a=this._setFillStyles(e,c)),f&&(l=this._setStrokeStyles(e,c)),e.font=this._getFontDeclaration(c),h&&h.textBackgroundColor&&this._removeShadow(e),h&&h.deltaY&&(s+=h.deltaY),u&&e.fillText(n,o-a.offsetX,s-a.offsetY),f&&e.strokeText(n,o-l.offsetX,s-l.offsetY),e.restore())},setSuperscript:function(t,e){return this._setScript(t,e,this.superscript)},setSubscript:function(t,e){return this._setScript(t,e,this.subscript)},_setScript:function(t,e,i){var r=this.get2DCursorLocation(t,!0),n=this.getValueOfPropertyAt(r.lineIndex,r.charIndex,"fontSize"),o=this.getValueOfPropertyAt(r.lineIndex,r.charIndex,"deltaY"),s={fontSize:n*i.size,deltaY:o+n*i.baseline};return this.setSelectionStyles(s,t,e),this},_hasStyleChanged:function(t,e){return t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.deltaY!==e.deltaY},_hasStyleChangedForSvg:function(t,e){return this._hasStyleChanged(t,e)||t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough},_getLineLeftOffset:function(t){var e=this.getLineWidth(t);return"center"===this.textAlign?(this.width-e)/2:"right"===this.textAlign?this.width-e:"justify-center"===this.textAlign&&this.isEndOfWrapping(t)?(this.width-e)/2:"justify-right"===this.textAlign&&this.isEndOfWrapping(t)?this.width-e:0},_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},_shouldClearDimensionCache:function(){var t=this._forceClearCache;return t||(t=this.hasStateChanged("_dimensionAffectingProps")),t&&(this.dirty=!0,this._forceClearCache=!1),t},getLineWidth:function(t){return this.__lineWidths[t]?this.__lineWidths[t]:(e=""===this._textLines[t]?0:this.measureLine(t).width,this.__lineWidths[t]=e,e);var e},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},getValueOfPropertyAt:function(t,e,i){var r=this._getStyleDeclaration(t,e);return r&&void 0!==r[i]?r[i]:this[i]},_renderTextDecoration:function(t,e){if(this[e]||this.styleHas(e)){for(var i,r,n,o,s,a,l,h,c,u,f,d,p,g,m,v,b=this._getLeftOffset(),y=this._getTopOffset(),x=this.path,w=this._getWidthOfCharSpacing(),_=0,S=this._textLines.length;_<S;_++)if(i=this.getHeightOfLine(_),this[e]||this.styleHas(e,_)){l=this._textLines[_],g=i/this.lineHeight,o=this._getLineLeftOffset(_),u=0,f=0,h=this.getValueOfPropertyAt(_,0,e),v=this.getValueOfPropertyAt(_,0,"fill"),c=y+g*(1-this._fontSizeFraction),r=this.getHeightOfChar(_,0),s=this.getValueOfPropertyAt(_,0,"deltaY");for(var C=0,A=l.length;C<A;C++)d=this.__charBounds[_][C],p=this.getValueOfPropertyAt(_,C,e),m=this.getValueOfPropertyAt(_,C,"fill"),n=this.getHeightOfChar(_,C),a=this.getValueOfPropertyAt(_,C,"deltaY"),x&&p&&m?(t.save(),t.fillStyle=v,t.translate(d.renderLeft,d.renderTop),t.rotate(d.angle),t.fillRect(-d.kernedWidth/2,this.offsets[e]*n+a,d.kernedWidth,this.fontSize/15),t.restore()):(p!==h||m!==v||n!==r||a!==s)&&f>0?(h&&v&&t.fillRect(b+o+u,c+this.offsets[e]*r+s,f,this.fontSize/15),u=d.left,f=d.width,h=p,v=m,r=n,s=a):f+=d.kernedWidth;t.fillStyle=m,p&&m&&t.fillRect(b+o+u,c+this.offsets[e]*r+s,f-w,this.fontSize/15),y+=i}else y+=i;this._removeShadow(t)}},_getFontDeclaration:function(t,i){var r=t||this,n=this.fontFamily,o=e.Text.genericFonts.indexOf(n.toLowerCase())>-1,s=void 0===n||n.indexOf("'")>-1||n.indexOf(",")>-1||n.indexOf('"')>-1||o?r.fontFamily:'"'+r.fontFamily+'"';return[e.isLikelyNode?r.fontWeight:r.fontStyle,e.isLikelyNode?r.fontStyle:r.fontWeight,i?this.CACHE_FONT_SIZE+"px":r.fontSize+"px",s].join(" ")},render:function(t){this.visible&&(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper("render",t)))},_splitTextIntoLines:function(t){for(var i=t.split(this._reNewline),r=new Array(i.length),n=["\n"],o=[],s=0;s<i.length;s++)r[s]=e.util.string.graphemeSplit(i[s]),o=o.concat(r[s],n);return o.pop(),{_unwrappedLines:r,lines:i,graphemeText:o,graphemeLines:r}},toObject:function(t){var e=["text","fontSize","fontWeight","fontFamily","fontStyle","lineHeight","underline","overline","linethrough","textAlign","textBackgroundColor","charSpacing"].concat(t),r=this.callSuper("toObject",e);return r.styles=i(this.styles,!0),r},set:function(t,e){this.callSuper("set",t,e);var i=!1,r=!1;if("object"==typeof t)for(var n in t)"path"===n&&this.setPathInfo(),i=i||-1!==this._dimensionAffectingProps.indexOf(n),r=r||"path"===n;else i=-1!==this._dimensionAffectingProps.indexOf(t),r="path"===t;return r&&this.setPathInfo(),i&&(this.initDimensions(),this.setCoords()),this},complexity:function(){return 1}}),e.Text.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")),e.Text.DEFAULT_SVG_FONT_SIZE=16,e.Text.fromElement=function(t,r,n){if(!t)return r(null);var o=e.parseAttributes(t,e.Text.ATTRIBUTE_NAMES),s=o.textAnchor||"left";if((n=e.util.object.extend(n?i(n):{},o)).top=n.top||0,n.left=n.left||0,o.textDecoration){var a=o.textDecoration;-1!==a.indexOf("underline")&&(n.underline=!0),-1!==a.indexOf("overline")&&(n.overline=!0),-1!==a.indexOf("line-through")&&(n.linethrough=!0),delete n.textDecoration}"dx"in o&&(n.left+=o.dx),"dy"in o&&(n.top+=o.dy),"fontSize"in n||(n.fontSize=e.Text.DEFAULT_SVG_FONT_SIZE);var l="";"textContent"in t?l=t.textContent:"firstChild"in t&&null!==t.firstChild&&"data"in t.firstChild&&null!==t.firstChild.data&&(l=t.firstChild.data),l=l.replace(/^\s+|\s+$|\n+/g,"").replace(/\s+/g," ");var h=n.strokeWidth;n.strokeWidth=0;var c=new e.Text(l,n),u=c.getScaledHeight()/c.height,f=((c.height+c.strokeWidth)*c.lineHeight-c.height)*u,d=c.getScaledHeight()+f,p=0;"center"===s&&(p=c.getScaledWidth()/2),"right"===s&&(p=c.getScaledWidth()),c.set({left:c.left-p,top:c.top-(d-c.fontSize*(.07+c._fontSizeFraction))/c.lineHeight,strokeWidth:void 0!==h?h:1}),r(c)},e.Text.fromObject=function(t,i){return e.Object._fromObject("Text",t,i,"text")},e.Text.genericFonts=["sans-serif","serif","cursive","fantasy","monospace"],e.util.createAccessors&&e.util.createAccessors(e.Text)}}(e),A.util.object.extend(A.Text.prototype,{isEmptyStyles:function(t){if(!this.styles)return!0;if(void 0!==t&&!this.styles[t])return!0;var e=void 0===t?this.styles:{line:this.styles[t]};for(var i in e)for(var r in e[i])for(var n in e[i][r])return!1;return!0},styleHas:function(t,e){if(!this.styles||!t||""===t)return!1;if(void 0!==e&&!this.styles[e])return!1;var i=void 0===e?this.styles:{0:this.styles[e]};for(var r in i)for(var n in i[r])if(void 0!==i[r][n][t])return!0;return!1},cleanStyle:function(t){if(!this.styles||!t||""===t)return!1;var e,i,r=this.styles,n=0,o=!0,s=0;for(var a in r){for(var l in e=0,r[a]){var h;n++,(h=r[a][l]).hasOwnProperty(t)?(i?h[t]!==i&&(o=!1):i=h[t],h[t]===this[t]&&delete h[t]):o=!1,0!==Object.keys(h).length?e++:delete r[a][l]}0===e&&delete r[a]}for(var c=0;c<this._textLines.length;c++)s+=this._textLines[c].length;o&&n===s&&(this[t]=i,this.removeStyle(t))},removeStyle:function(t){if(this.styles&&t&&""!==t){var e,i,r,n=this.styles;for(i in n){for(r in e=n[i])delete e[r][t],0===Object.keys(e[r]).length&&delete e[r];0===Object.keys(e).length&&delete n[i]}}},_extendStyles:function(t,e){var i=this.get2DCursorLocation(t);this._getLineStyle(i.lineIndex)||this._setLineStyle(i.lineIndex),this._getStyleDeclaration(i.lineIndex,i.charIndex)||this._setStyleDeclaration(i.lineIndex,i.charIndex,{}),A.util.object.extend(this._getStyleDeclaration(i.lineIndex,i.charIndex),e)},get2DCursorLocation:function(t,e){void 0===t&&(t=this.selectionStart);for(var i=e?this._unwrappedTextLines:this._textLines,r=i.length,n=0;n<r;n++){if(t<=i[n].length)return{lineIndex:n,charIndex:t};t-=i[n].length+this.missingNewlineOffset(n)}return{lineIndex:n-1,charIndex:i[n-1].length<t?i[n-1].length:t}},getSelectionStyles:function(t,e,i){void 0===t&&(t=this.selectionStart||0),void 0===e&&(e=this.selectionEnd||t);for(var r=[],n=t;n<e;n++)r.push(this.getStyleAtPosition(n,i));return r},getStyleAtPosition:function(t,e){var i=this.get2DCursorLocation(t);return(e?this.getCompleteStyleDeclaration(i.lineIndex,i.charIndex):this._getStyleDeclaration(i.lineIndex,i.charIndex))||{}},setSelectionStyles:function(t,e,i){void 0===e&&(e=this.selectionStart||0),void 0===i&&(i=this.selectionEnd||e);for(var r=e;r<i;r++)this._extendStyles(r,t);return this._forceClearCache=!0,this},_getStyleDeclaration:function(t,e){var i=this.styles&&this.styles[t];return i?i[e]:null},getCompleteStyleDeclaration:function(t,e){for(var i,r=this._getStyleDeclaration(t,e)||{},n={},o=0;o<this._styleProperties.length;o++)n[i=this._styleProperties[o]]=void 0===r[i]?this[i]:r[i];return n},_setStyleDeclaration:function(t,e,i){this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){delete this.styles[t][e]},_getLineStyle:function(t){return!!this.styles[t]},_setLineStyle:function(t){this.styles[t]={}},_deleteLineStyle:function(t){delete this.styles[t]}}),function(){function t(t){t.textDecoration&&(t.textDecoration.indexOf("underline")>-1&&(t.underline=!0),t.textDecoration.indexOf("line-through")>-1&&(t.linethrough=!0),t.textDecoration.indexOf("overline")>-1&&(t.overline=!0),delete t.textDecoration)}A.IText=A.util.createClass(A.Text,A.Observable,{type:"i-text",selectionStart:0,selectionEnd:0,selectionColor:"rgba(17,119,255,0.3)",isEditing:!1,editable:!0,editingBorderColor:"rgba(102,153,255,0.25)",cursorWidth:2,cursorColor:"",cursorDelay:1e3,cursorDuration:600,caching:!0,_reSpace:/\s|\n/,_currentCursorOpacity:0,_selectionDirection:null,_abortCursorAnimation:!1,__widthOfSpace:[],inCompositionMode:!1,initialize:function(t,e){this.callSuper("initialize",t,e),this.initBehavior()},setSelectionStart:function(t){t=Math.max(t,0),this._updateAndFire("selectionStart",t)},setSelectionEnd:function(t){t=Math.min(t,this.text.length),this._updateAndFire("selectionEnd",t)},_updateAndFire:function(t,e){this[t]!==e&&(this._fireSelectionChanged(),this[t]=e),this._updateTextarea()},_fireSelectionChanged:function(){this.fire("selection:changed"),this.canvas&&this.canvas.fire("text:selection:changed",{target:this})},initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper("initDimensions")},render:function(t){this.clearContextTop(),this.callSuper("render",t),this.cursorOffsetCache={},this.renderCursorOrSelection()},_render:function(t){this.callSuper("_render",t)},clearContextTop:function(t){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var e=this.canvas.contextTop,i=this.canvas.viewportTransform;e.save(),e.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this.transform(e),this._clearTextArea(e),t||e.restore()}},renderCursorOrSelection:function(){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var t=this._getCursorBoundaries(),e=this.canvas.contextTop;this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(t,e):this.renderSelection(t,e),e.restore()}},_clearTextArea:function(t){var e=this.width+4,i=this.height+4;t.clearRect(-e/2,-i/2,e,i)},_getCursorBoundaries:function(t){void 0===t&&(t=this.selectionStart);var e=this._getLeftOffset(),i=this._getTopOffset(),r=this._getCursorBoundariesOffsets(t);return{left:e,top:i,leftOffset:r.left,topOffset:r.top}},_getCursorBoundariesOffsets:function(t){if(this.cursorOffsetCache&&"top"in this.cursorOffsetCache)return this.cursorOffsetCache;var e,i,r,n,o=0,s=0,a=this.get2DCursorLocation(t);r=a.charIndex,i=a.lineIndex;for(var l=0;l<i;l++)o+=this.getHeightOfLine(l);e=this._getLineLeftOffset(i);var h=this.__charBounds[i][r];return h&&(s=h.left),0!==this.charSpacing&&r===this._textLines[i].length&&(s-=this._getWidthOfCharSpacing()),n={top:o,left:e+(s>0?s:0)},this.cursorOffsetCache=n,this.cursorOffsetCache},renderCursor:function(t,e){var i=this.get2DCursorLocation(),r=i.lineIndex,n=i.charIndex>0?i.charIndex-1:0,o=this.getValueOfPropertyAt(r,n,"fontSize"),s=this.scaleX*this.canvas.getZoom(),a=this.cursorWidth/s,l=t.topOffset,h=this.getValueOfPropertyAt(r,n,"deltaY");l+=(1-this._fontSizeFraction)*this.getHeightOfLine(r)/this.lineHeight-o*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(t,e),e.fillStyle=this.cursorColor||this.getValueOfPropertyAt(r,n,"fill"),e.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,e.fillRect(t.left+t.leftOffset-a/2,l+t.top+h,a,o)},renderSelection:function(t,e){for(var i=this.inCompositionMode?this.hiddenTextarea.selectionStart:this.selectionStart,r=this.inCompositionMode?this.hiddenTextarea.selectionEnd:this.selectionEnd,n=-1!==this.textAlign.indexOf("justify"),o=this.get2DCursorLocation(i),s=this.get2DCursorLocation(r),a=o.lineIndex,l=s.lineIndex,h=o.charIndex<0?0:o.charIndex,c=s.charIndex<0?0:s.charIndex,u=a;u<=l;u++){var f,d=this._getLineLeftOffset(u)||0,p=this.getHeightOfLine(u),g=0,m=0;if(u===a&&(g=this.__charBounds[a][h].left),u>=a&&u<l)m=n&&!this.isEndOfWrapping(u)?this.width:this.getLineWidth(u)||5;else if(u===l)if(0===c)m=this.__charBounds[l][c].left;else{var v=this._getWidthOfCharSpacing();m=this.__charBounds[l][c-1].left+this.__charBounds[l][c-1].width-v}f=p,(this.lineHeight<1||u===l&&this.lineHeight>1)&&(p/=this.lineHeight),this.inCompositionMode?(e.fillStyle=this.compositionColor||"black",e.fillRect(t.left+d+g,t.top+t.topOffset+p,m-g,1)):(e.fillStyle=this.selectionColor,e.fillRect(t.left+d+g,t.top+t.topOffset,m-g,p)),t.topOffset+=f}},getCurrentCharFontSize:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fontSize")},getCurrentCharColor:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fill")},_getCurrentCharIndex:function(){var t=this.get2DCursorLocation(this.selectionStart,!0),e=t.charIndex>0?t.charIndex-1:0;return{l:t.lineIndex,c:e}}}),A.IText.fromObject=function(e,i){if(t(e),e.styles)for(var r in e.styles)for(var n in e.styles[r])t(e.styles[r][n]);A.Object._fromObject("IText",e,i,"text")}}(),_=A.util.object.clone,A.util.object.extend(A.IText.prototype,{initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},initAddedHandler:function(){var t=this;this.on("added",(function(){var e=t.canvas;e&&(e._hasITextHandlers||(e._hasITextHandlers=!0,t._initCanvasHandlers(e)),e._iTextInstances=e._iTextInstances||[],e._iTextInstances.push(t))}))},initRemovedHandler:function(){var t=this;this.on("removed",(function(){var e=t.canvas;e&&(e._iTextInstances=e._iTextInstances||[],A.util.removeFromArray(e._iTextInstances,t),0===e._iTextInstances.length&&(e._hasITextHandlers=!1,t._removeCanvasHandlers(e)))}))},_initCanvasHandlers:function(t){t._mouseUpITextHandler=function(){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.__isMousedown=!1}))},t.on("mouse:up",t._mouseUpITextHandler)},_removeCanvasHandlers:function(t){t.off("mouse:up",t._mouseUpITextHandler)},_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,"_onTickComplete")},_animateCursor:function(t,e,i,r){var n;return n={isAborted:!1,abort:function(){this.isAborted=!0}},t.animate("_currentCursorOpacity",e,{duration:i,onComplete:function(){n.isAborted||t[r]()},onChange:function(){t.canvas&&t.selectionStart===t.selectionEnd&&t.renderCursorOrSelection()},abort:function(){return n.isAborted}}),n},_onTickComplete:function(){var t=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout((function(){t._currentTickCompleteState=t._animateCursor(t,0,this.cursorDuration/2,"_tick")}),100)},initDelayedCursor:function(t){var e=this,i=t?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout((function(){e._tick()}),i)},abortCursorAnimation:function(){var t=this._currentTickState||this._currentTickCompleteState,e=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,t&&e&&e.clearContext(e.contextTop||e.contextContainer)},selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join("")},findWordBoundaryLeft:function(t){var e=0,i=t-1;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i--;for(;/\S/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findWordBoundaryRight:function(t){var e=0,i=t;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i++;for(;/\S/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},findLineBoundaryLeft:function(t){for(var e=0,i=t-1;!/\n/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findLineBoundaryRight:function(t){for(var e=0,i=t;!/\n/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},searchWordBoundary:function(t,e){for(var i=this._text,r=this._reSpace.test(i[t])?t-1:t,n=i[r],o=A.reNonWord;!o.test(n)&&r>0&&r<i.length;)n=i[r+=e];return o.test(n)&&(r+=1===e?0:1),r},selectWord:function(t){t=t||this.selectionStart;var e=this.searchWordBoundary(t,-1),i=this.searchWordBoundary(t,1);this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},selectLine:function(t){t=t||this.selectionStart;var e=this.findLineBoundaryLeft(t),i=this.findLineBoundaryRight(t);return this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this},enterEditing:function(t){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(t),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire("editing:entered"),this._fireSelectionChanged(),this.canvas?(this.canvas.fire("text:editing:entered",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll(),this):this},exitEditingOnOthers:function(t){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.selected=!1,t.isEditing&&t.exitEditing()}))},initMouseMoveHandler:function(){this.canvas.on("mouse:move",this.mouseMoveHandler)},mouseMoveHandler:function(t){if(this.__isMousedown&&this.isEditing){var e=this.getSelectionStartFromPointer(t.e),i=this.selectionStart,r=this.selectionEnd;(e===this.__selectionStartOnMouseDown&&i!==r||i!==e&&r!==e)&&(e>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=e):(this.selectionStart=e,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===i&&this.selectionEnd===r||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()))}},_setEditingProps:function(){this.hoverCursor="text",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor="text"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},fromStringToGraphemeSelection:function(t,e,i){var r=i.slice(0,t),n=A.util.string.graphemeSplit(r).length;if(t===e)return{selectionStart:n,selectionEnd:n};var o=i.slice(t,e);return{selectionStart:n,selectionEnd:n+A.util.string.graphemeSplit(o).length}},fromGraphemeToStringSelection:function(t,e,i){var r=i.slice(0,t).join("").length;return t===e?{selectionStart:r,selectionEnd:r}:{selectionStart:r,selectionEnd:r+i.slice(t,e).join("").length}},_updateTextarea:function(){if(this.cursorOffsetCache={},this.hiddenTextarea){if(!this.inCompositionMode){var t=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text);this.hiddenTextarea.selectionStart=t.selectionStart,this.hiddenTextarea.selectionEnd=t.selectionEnd}this.updateTextareaPosition()}},updateFromTextArea:function(){if(this.hiddenTextarea){this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords());var t=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value);this.selectionEnd=this.selectionStart=t.selectionEnd,this.inCompositionMode||(this.selectionStart=t.selectionStart),this.updateTextareaPosition()}},updateTextareaPosition:function(){if(this.selectionStart===this.selectionEnd){var t=this._calcTextareaPosition();this.hiddenTextarea.style.left=t.left,this.hiddenTextarea.style.top=t.top}},_calcTextareaPosition:function(){if(!this.canvas)return{x:1,y:1};var t=this.inCompositionMode?this.compositionStart:this.selectionStart,e=this._getCursorBoundaries(t),i=this.get2DCursorLocation(t),r=i.lineIndex,n=i.charIndex,o=this.getValueOfPropertyAt(r,n,"fontSize")*this.lineHeight,s=e.leftOffset,a=this.calcTransformMatrix(),l={x:e.left+s,y:e.top+e.topOffset+o},h=this.canvas.getRetinaScaling(),c=this.canvas.upperCanvasEl,u=c.width/h,f=c.height/h,d=u-o,p=f-o,g=c.clientWidth/u,m=c.clientHeight/f;return l=A.util.transformPoint(l,a),(l=A.util.transformPoint(l,this.canvas.viewportTransform)).x*=g,l.y*=m,l.x<0&&(l.x=0),l.x>d&&(l.x=d),l.y<0&&(l.y=0),l.y>p&&(l.y=p),l.x+=this.canvas._offset.left,l.y+=this.canvas._offset.top,{left:l.x+"px",top:l.y+"px",fontSize:o+"px",charHeight:o}},_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},exitEditing:function(){var t=this._textBeforeEdit!==this.text,e=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,e&&(e.blur&&e.blur(),e.parentNode&&e.parentNode.removeChild(e)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire("editing:exited"),t&&this.fire("modified"),this.canvas&&(this.canvas.off("mouse:move",this.mouseMoveHandler),this.canvas.fire("text:editing:exited",{target:this}),t&&this.canvas.fire("object:modified",{target:this})),this},_removeExtraneousStyles:function(){for(var t in this.styles)this._textLines[t]||delete this.styles[t]},removeStyleFromTo:function(t,e){var i,r,n=this.get2DCursorLocation(t,!0),o=this.get2DCursorLocation(e,!0),s=n.lineIndex,a=n.charIndex,l=o.lineIndex,h=o.charIndex;if(s!==l){if(this.styles[s])for(i=a;i<this._unwrappedTextLines[s].length;i++)delete this.styles[s][i];if(this.styles[l])for(i=h;i<this._unwrappedTextLines[l].length;i++)(r=this.styles[l][i])&&(this.styles[s]||(this.styles[s]={}),this.styles[s][a+i-h]=r);for(i=s+1;i<=l;i++)delete this.styles[i];this.shiftLineStyles(l,s-l)}else if(this.styles[s]){r=this.styles[s];var c,u,f=h-a;for(i=a;i<h;i++)delete r[i];for(u in this.styles[s])(c=parseInt(u,10))>=h&&(r[c-f]=r[u],delete r[u])}},shiftLineStyles:function(t,e){var i=_(this.styles);for(var r in this.styles){var n=parseInt(r,10);n>t&&(this.styles[n+e]=i[n],i[n-e]||delete this.styles[n])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},insertNewlineStyleObject:function(t,e,i,r){var n,o={},s=!1,a=this._unwrappedTextLines[t].length===e;for(var l in i||(i=1),this.shiftLineStyles(t,i),this.styles[t]&&(n=this.styles[t][0===e?e:e-1]),this.styles[t]){var h=parseInt(l,10);h>=e&&(s=!0,o[h-e]=this.styles[t][l],a&&0===e||delete this.styles[t][l])}var c=!1;for(s&&!a&&(this.styles[t+i]=o,c=!0),c&&i--;i>0;)r&&r[i-1]?this.styles[t+i]={0:_(r[i-1])}:n?this.styles[t+i]={0:_(n)}:delete this.styles[t+i],i--;this._forceClearCache=!0},insertCharStyleObject:function(t,e,i,r){this.styles||(this.styles={});var n=this.styles[t],o=n?_(n):{};for(var s in i||(i=1),o){var a=parseInt(s,10);a>=e&&(n[a+i]=o[a],o[a-i]||delete n[a])}if(this._forceClearCache=!0,r)for(;i--;)Object.keys(r[i]).length&&(this.styles[t]||(this.styles[t]={}),this.styles[t][e+i]=_(r[i]));else if(n)for(var l=n[e?e-1:1];l&&i--;)this.styles[t][e+i]=_(l)},insertNewStyleBlock:function(t,e,i){for(var r=this.get2DCursorLocation(e,!0),n=[0],o=0,s=0;s<t.length;s++)"\n"===t[s]?n[++o]=0:n[o]++;for(n[0]>0&&(this.insertCharStyleObject(r.lineIndex,r.charIndex,n[0],i),i=i&&i.slice(n[0]+1)),o&&this.insertNewlineStyleObject(r.lineIndex,r.charIndex+n[0],o),s=1;s<o;s++)n[s]>0?this.insertCharStyleObject(r.lineIndex+s,0,n[s],i):i&&(this.styles[r.lineIndex+s][0]=i[0]),i=i&&i.slice(n[s]+1);n[s]>0&&this.insertCharStyleObject(r.lineIndex+s,0,n[s],i)},setSelectionStartEndWithShift:function(t,e,i){i<=t?(e===t?this._selectionDirection="left":"right"===this._selectionDirection&&(this._selectionDirection="left",this.selectionEnd=t),this.selectionStart=i):i>t&&i<e?"right"===this._selectionDirection?this.selectionEnd=i:this.selectionStart=i:(e===t?this._selectionDirection="right":"left"===this._selectionDirection&&(this._selectionDirection="right",this.selectionStart=e),this.selectionEnd=i)},setSelectionInBoundaries:function(){var t=this.text.length;this.selectionStart>t?this.selectionStart=t:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>t?this.selectionEnd=t:this.selectionEnd<0&&(this.selectionEnd=0)}}),A.util.object.extend(A.IText.prototype,{initDoubleClickSimulation:function(){this.__lastClickTime=+new Date,this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on("mousedown",this.onMouseDown)},onMouseDown:function(t){if(this.canvas){this.__newClickTime=+new Date;var e=t.pointer;this.isTripleClick(e)&&(this.fire("tripleclick",t),this._stopEvent(t.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=e,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected}},isTripleClick:function(t){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===t.x&&this.__lastPointer.y===t.y},_stopEvent:function(t){t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},doubleClickHandler:function(t){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(t.e))},tripleClickHandler:function(t){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(t.e))},initClicks:function(){this.on("mousedblclick",this.doubleClickHandler),this.on("tripleclick",this.tripleClickHandler)},_mouseDownHandler:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.__isMousedown=!0,this.selected&&(this.inCompositionMode=!1,this.setCursorByClick(t.e)),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},_mouseDownHandlerBefore:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.selected=this===this.canvas._activeObject)},initMousedownHandler:function(){this.on("mousedown",this._mouseDownHandler),this.on("mousedown:before",this._mouseDownHandlerBefore)},initMouseupHandler:function(){this.on("mouseup",this.mouseUpHandler)},mouseUpHandler:function(t){if(this.__isMousedown=!1,!(!this.editable||this.group||t.transform&&t.transform.actionPerformed||t.e.button&&1!==t.e.button)){if(this.canvas){var e=this.canvas._activeObject;if(e&&e!==this)return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(t.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},setCursorByClick:function(t){var e=this.getSelectionStartFromPointer(t),i=this.selectionStart,r=this.selectionEnd;t.shiftKey?this.setSelectionStartEndWithShift(i,r,e):(this.selectionStart=e,this.selectionEnd=e),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},getSelectionStartFromPointer:function(t){for(var e=this.getLocalPointer(t),i=0,r=0,n=0,o=0,s=0,a=0,l=this._textLines.length;a<l&&n<=e.y;a++)n+=this.getHeightOfLine(a)*this.scaleY,s=a,a>0&&(o+=this._textLines[a-1].length+this.missingNewlineOffset(a-1));r=this._getLineLeftOffset(s)*this.scaleX;for(var h=0,c=this._textLines[s].length;h<c&&(i=r,(r+=this.__charBounds[s][h].kernedWidth*this.scaleX)<=e.x);h++)o++;return this._getNewSelectionStartFromOffset(e,i,r,o,c)},_getNewSelectionStartFromOffset:function(t,e,i,r,n){var o=t.x-e,s=i-t.x,a=r+(s>o||s<0?0:1);return this.flipX&&(a=n-a),a>this._text.length&&(a=this._text.length),a}}),A.util.object.extend(A.IText.prototype,{initHiddenTextarea:function(){this.hiddenTextarea=A.document.createElement("textarea"),this.hiddenTextarea.setAttribute("autocapitalize","off"),this.hiddenTextarea.setAttribute("autocorrect","off"),this.hiddenTextarea.setAttribute("autocomplete","off"),this.hiddenTextarea.setAttribute("spellcheck","false"),this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea",""),this.hiddenTextarea.setAttribute("wrap","off");var t=this._calcTextareaPosition();this.hiddenTextarea.style.cssText="position: absolute; top: "+t.top+"; left: "+t.left+"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: "+t.fontSize+";",A.document.body.appendChild(this.hiddenTextarea),A.util.addListener(this.hiddenTextarea,"keydown",this.onKeyDown.bind(this)),A.util.addListener(this.hiddenTextarea,"keyup",this.onKeyUp.bind(this)),A.util.addListener(this.hiddenTextarea,"input",this.onInput.bind(this)),A.util.addListener(this.hiddenTextarea,"copy",this.copy.bind(this)),A.util.addListener(this.hiddenTextarea,"cut",this.copy.bind(this)),A.util.addListener(this.hiddenTextarea,"paste",this.paste.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionstart",this.onCompositionStart.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionupdate",this.onCompositionUpdate.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionend",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(A.util.addListener(this.canvas.upperCanvasEl,"click",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},keysMap:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorRight",36:"moveCursorLeft",37:"moveCursorLeft",38:"moveCursorUp",39:"moveCursorRight",40:"moveCursorDown"},ctrlKeysMapUp:{67:"copy",88:"cut"},ctrlKeysMapDown:{65:"selectAll"},onClick:function(){this.hiddenTextarea&&this.hiddenTextarea.focus()},onKeyDown:function(t){if(this.isEditing){if(t.keyCode in this.keysMap)this[this.keysMap[t.keyCode]](t);else{if(!(t.keyCode in this.ctrlKeysMapDown)||!t.ctrlKey&&!t.metaKey)return;this[this.ctrlKeysMapDown[t.keyCode]](t)}t.stopImmediatePropagation(),t.preventDefault(),t.keyCode>=33&&t.keyCode<=40?(this.inCompositionMode=!1,this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},onKeyUp:function(t){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:t.keyCode in this.ctrlKeysMapUp&&(t.ctrlKey||t.metaKey)&&(this[this.ctrlKeysMapUp[t.keyCode]](t),t.stopImmediatePropagation(),t.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},onInput:function(t){var e=this.fromPaste;if(this.fromPaste=!1,t&&t.stopPropagation(),this.isEditing){var i,r,n,o,s,a=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,l=this._text.length,h=a.length,c=h-l,u=this.selectionStart,f=this.selectionEnd,d=u!==f;if(""===this.hiddenTextarea.value)return this.styles={},this.updateFromTextArea(),this.fire("changed"),void(this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll()));var p=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),g=u>p.selectionStart;d?(i=this._text.slice(u,f),c+=f-u):h<l&&(i=g?this._text.slice(f+c,f):this._text.slice(u,u-c)),r=a.slice(p.selectionEnd-c,p.selectionEnd),i&&i.length&&(r.length&&(n=this.getSelectionStyles(u,u+1,!1),n=r.map((function(){return n[0]}))),d?(o=u,s=f):g?(o=f-i.length,s=f):(o=f,s=f+i.length),this.removeStyleFromTo(o,s)),r.length&&(e&&r.join("")===A.copiedText&&!A.disableStyleCopyPaste&&(n=A.copiedTextStyle),this.insertNewStyleBlock(r,u,n)),this.updateFromTextArea(),this.fire("changed"),this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll())}},onCompositionStart:function(){this.inCompositionMode=!0},onCompositionEnd:function(){this.inCompositionMode=!1},onCompositionUpdate:function(t){this.compositionStart=t.target.selectionStart,this.compositionEnd=t.target.selectionEnd,this.updateTextareaPosition()},copy:function(){this.selectionStart!==this.selectionEnd&&(A.copiedText=this.getSelectedText(),A.disableStyleCopyPaste?A.copiedTextStyle=null:A.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},paste:function(){this.fromPaste=!0},_getClipboardData:function(t){return t&&t.clipboardData||A.window.clipboardData},_getWidthBeforeCursor:function(t,e){var i,r=this._getLineLeftOffset(t);return e>0&&(r+=(i=this.__charBounds[t][e-1]).left+i.width),r},getDownCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),r=this.get2DCursorLocation(i),n=r.lineIndex;if(n===this._textLines.length-1||t.metaKey||34===t.keyCode)return this._text.length-i;var o=r.charIndex,s=this._getWidthBeforeCursor(n,o),a=this._getIndexOnLine(n+1,s);return this._textLines[n].slice(o).length+a+1+this.missingNewlineOffset(n)},_getSelectionForOffset:function(t,e){return t.shiftKey&&this.selectionStart!==this.selectionEnd&&e?this.selectionEnd:this.selectionStart},getUpCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),r=this.get2DCursorLocation(i),n=r.lineIndex;if(0===n||t.metaKey||33===t.keyCode)return-i;var o=r.charIndex,s=this._getWidthBeforeCursor(n,o),a=this._getIndexOnLine(n-1,s),l=this._textLines[n].slice(0,o),h=this.missingNewlineOffset(n-1);return-this._textLines[n-1].length+a-l.length+(1-h)},_getIndexOnLine:function(t,e){for(var i,r,n=this._textLines[t],o=this._getLineLeftOffset(t),s=0,a=0,l=n.length;a<l;a++)if((o+=i=this.__charBounds[t][a].width)>e){r=!0;var h=o-i,c=o,u=Math.abs(h-e);s=Math.abs(c-e)<u?a:a-1;break}return r||(s=n.length-1),s},moveCursorDown:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown("Down",t)},moveCursorUp:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown("Up",t)},_moveCursorUpOrDown:function(t,e){var i=this["get"+t+"CursorOffset"](e,"right"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(i):this.moveCursorWithoutShift(i),0!==i&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorWithShift:function(t){var e="left"===this._selectionDirection?this.selectionStart+t:this.selectionEnd+t;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,e),0!==t},moveCursorWithoutShift:function(t){return t<0?(this.selectionStart+=t,this.selectionEnd=this.selectionStart):(this.selectionEnd+=t,this.selectionStart=this.selectionEnd),0!==t},moveCursorLeft:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight("Left",t)},_move:function(t,e,i){var r;if(t.altKey)r=this["findWordBoundary"+i](this[e]);else{if(!t.metaKey&&35!==t.keyCode&&36!==t.keyCode)return this[e]+="Left"===i?-1:1,!0;r=this["findLineBoundary"+i](this[e])}if(void 0!==typeof r&&this[e]!==r)return this[e]=r,!0},_moveLeft:function(t,e){return this._move(t,e,"Left")},_moveRight:function(t,e){return this._move(t,e,"Right")},moveCursorLeftWithoutShift:function(t){var e=!0;return this._selectionDirection="left",this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(e=this._moveLeft(t,"selectionStart")),this.selectionEnd=this.selectionStart,e},moveCursorLeftWithShift:function(t){return"right"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(t,"selectionEnd"):0!==this.selectionStart?(this._selectionDirection="left",this._moveLeft(t,"selectionStart")):void 0},moveCursorRight:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight("Right",t)},_moveCursorLeftOrRight:function(t,e){var i="moveCursor"+t+"With";this._currentCursorOpacity=1,e.shiftKey?i+="Shift":i+="outShift",this[i](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorRightWithShift:function(t){return"left"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(t,"selectionStart"):this.selectionEnd!==this._text.length?(this._selectionDirection="right",this._moveRight(t,"selectionEnd")):void 0},moveCursorRightWithoutShift:function(t){var e=!0;return this._selectionDirection="right",this.selectionStart===this.selectionEnd?(e=this._moveRight(t,"selectionStart"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,e},removeChars:function(t,e){void 0===e&&(e=t+1),this.removeStyleFromTo(t,e),this._text.splice(t,e-t),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},insertChars:function(t,e,i,r){void 0===r&&(r=i),r>i&&this.removeStyleFromTo(i,r);var n=A.util.string.graphemeSplit(t);this.insertNewStyleBlock(n,i,e),this._text=[].concat(this._text.slice(0,i),n,this._text.slice(r)),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),S=A.util.toFixed,C=/  +/g,A.util.object.extend(A.Text.prototype,{_toSVG:function(){var t=this._getSVGLeftTopOffsets(),e=this._getSVGTextAndBg(t.textTop,t.textLeft);return this._wrapSVGTextAndBg(e)},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,noStyle:!0,withShadow:!0})},_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},_wrapSVGTextAndBg:function(t){var e=this.getSvgTextDecoration(this);return[t.textBgRects.join(""),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,"'")+'" ':"",this.fontSize?'font-size="'+this.fontSize+'" ':"",this.fontStyle?'font-style="'+this.fontStyle+'" ':"",this.fontWeight?'font-weight="'+this.fontWeight+'" ':"",e?'text-decoration="'+e+'" ':"",'style="',this.getSvgStyles(!0),'"',this.addPaintOrder()," >",t.textSpans.join(""),"</text>\n"]},_getSVGTextAndBg:function(t,e){var i,r=[],n=[],o=t;this._setSVGBg(n);for(var s=0,a=this._textLines.length;s<a;s++)i=this._getLineLeftOffset(s),(this.textBackgroundColor||this.styleHas("textBackgroundColor",s))&&this._setSVGTextLineBg(n,s,e+i,o),this._setSVGTextLineText(r,s,e+i,o),o+=this.getHeightOfLine(s);return{textSpans:r,textBgRects:n}},_createTextCharSpan:function(t,e,i,r){var n=t!==t.trim()||t.match(C),o=this.getSvgSpanStyles(e,n),s=o?'style="'+o+'"':"",a=e.deltaY,l="",h=A.Object.NUM_FRACTION_DIGITS;return a&&(l=' dy="'+S(a,h)+'" '),['<tspan x="',S(i,h),'" y="',S(r,h),'" ',l,s,">",A.util.string.escapeXml(t),"</tspan>"].join("")},_setSVGTextLineText:function(t,e,i,r){var n,o,s,a,l,h=this.getHeightOfLine(e),c=-1!==this.textAlign.indexOf("justify"),u="",f=0,d=this._textLines[e];r+=h*(1-this._fontSizeFraction)/this.lineHeight;for(var p=0,g=d.length-1;p<=g;p++)l=p===g||this.charSpacing,u+=d[p],s=this.__charBounds[e][p],0===f?(i+=s.kernedWidth-s.width,f+=s.width):f+=s.kernedWidth,c&&!l&&this._reSpaceAndTab.test(d[p])&&(l=!0),l||(n=n||this.getCompleteStyleDeclaration(e,p),o=this.getCompleteStyleDeclaration(e,p+1),l=this._hasStyleChangedForSvg(n,o)),l&&(a=this._getStyleDeclaration(e,p)||{},t.push(this._createTextCharSpan(u,a,i,r)),u="",n=o,i+=f,f=0)},_pushTextBgRect:function(t,e,i,r,n,o){var s=A.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(e),' x="',S(i,s),'" y="',S(r,s),'" width="',S(n,s),'" height="',S(o,s),'"></rect>\n')},_setSVGTextLineBg:function(t,e,i,r){for(var n,o,s=this._textLines[e],a=this.getHeightOfLine(e)/this.lineHeight,l=0,h=0,c=this.getValueOfPropertyAt(e,0,"textBackgroundColor"),u=0,f=s.length;u<f;u++)n=this.__charBounds[e][u],(o=this.getValueOfPropertyAt(e,u,"textBackgroundColor"))!==c?(c&&this._pushTextBgRect(t,c,i+h,r,l,a),h=n.left,l=n.width,c=o):l+=n.kernedWidth;o&&this._pushTextBgRect(t,o,i+h,r,l,a)},_getFillAttributes:function(t){var e=t&&"string"==typeof t?new A.Color(t):"";return e&&e.getSource()&&1!==e.getAlpha()?'opacity="'+e.getAlpha()+'" fill="'+e.setAlpha(1).toRgb()+'"':'fill="'+t+'"'},_getSVGLineTopOffset:function(t){for(var e,i=0,r=0;r<t;r++)i+=this.getHeightOfLine(r);return e=this.getHeightOfLine(r),{lineTop:i,offset:(this._fontSizeMult-this._fontSizeFraction)*e/(this.lineHeight*this._fontSizeMult)}},getSvgStyles:function(t){return A.Object.prototype.getSvgStyles.call(this,t)+" white-space: pre;"}}),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Textbox=e.util.createClass(e.IText,e.Observable,{type:"textbox",minWidth:20,dynamicMinWidth:2,__cachedLines:null,lockScalingFlip:!0,noScaleCache:!1,_dimensionAffectingProps:e.Text.prototype._dimensionAffectingProps.concat("width"),_wordJoiners:/[ \t\r]/,splitByGrapheme:!1,initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),this.dynamicMinWidth=0,this._styleMap=this._generateStyleMap(this._splitText()),this.dynamicMinWidth>this.width&&this._set("width",this.dynamicMinWidth),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},_generateStyleMap:function(t){for(var e=0,i=0,r=0,n={},o=0;o<t.graphemeLines.length;o++)"\n"===t.graphemeText[r]&&o>0?(i=0,r++,e++):!this.splitByGrapheme&&this._reSpaceAndTab.test(t.graphemeText[r])&&o>0&&(i++,r++),n[o]={line:e,offset:i},r+=t.graphemeLines[o].length,i+=t.graphemeLines[o].length;return n},styleHas:function(t,i){if(this._styleMap&&!this.isWrapping){var r=this._styleMap[i];r&&(i=r.line)}return e.Text.prototype.styleHas.call(this,t,i)},isEmptyStyles:function(t){if(!this.styles)return!0;var e,i,r=0,n=!1,o=this._styleMap[t],s=this._styleMap[t+1];for(var a in o&&(t=o.line,r=o.offset),s&&(n=s.line===t,e=s.offset),i=void 0===t?this.styles:{line:this.styles[t]})for(var l in i[a])if(l>=r&&(!n||l<e))for(var h in i[a][l])return!1;return!0},_getStyleDeclaration:function(t,e){if(this._styleMap&&!this.isWrapping){var i=this._styleMap[t];if(!i)return null;t=i.line,e=i.offset+e}return this.callSuper("_getStyleDeclaration",t,e)},_setStyleDeclaration:function(t,e,i){var r=this._styleMap[t];t=r.line,e=r.offset+e,this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){var i=this._styleMap[t];t=i.line,e=i.offset+e,delete this.styles[t][e]},_getLineStyle:function(t){var e=this._styleMap[t];return!!this.styles[e.line]},_setLineStyle:function(t){var e=this._styleMap[t];this.styles[e.line]={}},_wrapText:function(t,e){var i,r=[];for(this.isWrapping=!0,i=0;i<t.length;i++)r=r.concat(this._wrapLine(t[i],i,e));return this.isWrapping=!1,r},_measureWord:function(t,e,i){var r,n=0;i=i||0;for(var o=0,s=t.length;o<s;o++)n+=this._getGraphemeBox(t[o],e,o+i,r,!0).kernedWidth,r=t[o];return n},_wrapLine:function(t,i,r,n){var o=0,s=this.splitByGrapheme,a=[],l=[],h=s?e.util.string.graphemeSplit(t):t.split(this._wordJoiners),c="",u=0,f=s?"":" ",d=0,p=0,g=0,m=!0,v=this._getWidthOfCharSpacing();n=n||0,0===h.length&&h.push([]),r-=n;for(var b=0;b<h.length;b++)c=s?h[b]:e.util.string.graphemeSplit(h[b]),d=this._measureWord(c,i,u),u+=c.length,(o+=p+d-v)>r&&!m?(a.push(l),l=[],o=d,m=!0):o+=v,m||s||l.push(f),l=l.concat(c),p=s?0:this._measureWord([f],i,u),u++,m=!1,d>g&&(g=d);return b&&a.push(l),g+n>this.dynamicMinWidth&&(this.dynamicMinWidth=g-v+n),a},isEndOfWrapping:function(t){return!this._styleMap[t+1]||this._styleMap[t+1].line!==this._styleMap[t].line},missingNewlineOffset:function(t){return this.splitByGrapheme?this.isEndOfWrapping(t)?1:0:1},_splitTextIntoLines:function(t){for(var i=e.Text.prototype._splitTextIntoLines.call(this,t),r=this._wrapText(i.lines,this.width),n=new Array(r.length),o=0;o<r.length;o++)n[o]=r[o].join("");return i.lines=n,i.graphemeLines=r,i},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var t={};for(var e in this._styleMap)this._textLines[e]&&(t[this._styleMap[e].line]=1);for(var e in this.styles)t[e]||delete this.styles[e]},toObject:function(t){return this.callSuper("toObject",["minWidth","splitByGrapheme"].concat(t))}}),e.Textbox.fromObject=function(t,i){return e.Object._fromObject("Textbox",t,i,"text")}}(e),function(){var t=A.controlsUtils,e=t.scaleSkewCursorStyleHandler,i=t.scaleCursorStyleHandler,r=t.scalingEqually,n=t.scalingYOrSkewingX,o=t.scalingXOrSkewingY,s=t.scaleOrSkewActionName,a=A.Object.prototype.controls;if(a.ml=new A.Control({x:-.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mr=new A.Control({x:.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mb=new A.Control({x:0,y:.5,cursorStyleHandler:e,actionHandler:n,getActionName:s}),a.mt=new A.Control({x:0,y:-.5,cursorStyleHandler:e,actionHandler:n,getActionName:s}),a.tl=new A.Control({x:-.5,y:-.5,cursorStyleHandler:i,actionHandler:r}),a.tr=new A.Control({x:.5,y:-.5,cursorStyleHandler:i,actionHandler:r}),a.bl=new A.Control({x:-.5,y:.5,cursorStyleHandler:i,actionHandler:r}),a.br=new A.Control({x:.5,y:.5,cursorStyleHandler:i,actionHandler:r}),a.mtr=new A.Control({x:0,y:-.5,actionHandler:t.rotationWithSnapping,cursorStyleHandler:t.rotationStyleHandler,offsetY:-40,withConnection:!0,actionName:"rotate"}),A.Textbox){var l=A.Textbox.prototype.controls={};l.mtr=a.mtr,l.tr=a.tr,l.br=a.br,l.tl=a.tl,l.bl=a.bl,l.mt=a.mt,l.mb=a.mb,l.mr=new A.Control({x:.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"}),l.ml=new A.Control({x:-.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"})}}()},162:function(t,e,i){var r,n;void 0===(n="function"==typeof(r=function(){"use strict";function e(t,e,i){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){a(r.response,e,i)},r.onerror=function(){console.error("could not download file")},r.send()}function r(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function n(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i.g&&i.g.global===i.g?i.g:void 0,s=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!s?function(t,i,s){var a=o.URL||o.webkitURL,l=document.createElement("a");i=i||t.name||"download",l.download=i,l.rel="noopener","string"==typeof t?(l.href=t,l.origin===location.origin?n(l):r(l.href)?e(t,i,s):n(l,l.target="_blank")):(l.href=a.createObjectURL(t),setTimeout((function(){a.revokeObjectURL(l.href)}),4e4),setTimeout((function(){n(l)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,i,o){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),i);else if(r(t))e(t,i,o);else{var s=document.createElement("a");s.href=t,s.target="_blank",setTimeout((function(){n(s)}))}}:function(t,i,r,n){if((n=n||open("","_blank"))&&(n.document.title=n.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,r);var a="application/octet-stream"===t.type,l=/constructor/i.test(o.HTMLElement)||o.safari,h=/CriOS\/[\d]+/.test(navigator.userAgent);if((h||a&&l||s)&&"undefined"!=typeof FileReader){var c=new FileReader;c.onloadend=function(){var t=c.result;t=h?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),n?n.location.href=t:location=t,n=null},c.readAsDataURL(t)}else{var u=o.URL||o.webkitURL,f=u.createObjectURL(t);n?n.location=f:location.href=f,n=null,setTimeout((function(){u.revokeObjectURL(f)}),4e4)}});o.saveAs=a.saveAs=a,t.exports=a})?r.apply(e,[]):r)||(t.exports=n)},245:()=>{!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e){var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options={overlayBackgroundColor:"#666666",overlayOpacity:.6,spinnerIcon:"ball-circus",spinnerColor:"#000",spinnerSize:"3x",overlayIDName:"overlay",spinnerIDName:"spinner",offsetY:0,offsetX:0,lockScroll:!1,containerID:null,spinnerZIndex:99999,overlayZIndex:99998},this.stylesheetBaseURL="https://cdn.jsdelivr.net/npm/load-awesome@1.1.0/css/",this.spinner=null,this.spinnerStylesheetURL=null,this.numberOfEmptyDivForSpinner={"ball-8bits":16,"ball-atom":4,"ball-beat":3,"ball-circus":5,"ball-climbing-dot":1,"ball-clip-rotate":1,"ball-clip-rotate-multiple":2,"ball-clip-rotate-pulse":2,"ball-elastic-dots":5,"ball-fall":3,"ball-fussion":4,"ball-grid-beat":9,"ball-grid-pulse":9,"ball-newton-cradle":4,"ball-pulse":3,"ball-pulse-rise":5,"ball-pulse-sync":3,"ball-rotate":1,"ball-running-dots":5,"ball-scale":1,"ball-scale-multiple":3,"ball-scale-pulse":2,"ball-scale-ripple":1,"ball-scale-ripple-multiple":3,"ball-spin":8,"ball-spin-clockwise":8,"ball-spin-clockwise-fade":8,"ball-spin-clockwise-fade-rotating":8,"ball-spin-fade":8,"ball-spin-fade-rotating":8,"ball-spin-rotate":2,"ball-square-clockwise-spin":8,"ball-square-spin":8,"ball-triangle-path":3,"ball-zig-zag":2,"ball-zig-zag-deflect":2,cog:1,"cube-transition":2,fire:3,"line-scale":5,"line-scale-party":5,"line-scale-pulse-out":5,"line-scale-pulse-out-rapid":5,"line-spin-clockwise-fade":8,"line-spin-clockwise-fade-rotating":8,"line-spin-fade":8,"line-spin-fade-rotating":8,pacman:6,"square-jelly-box":2,"square-loader":1,"square-spin":1,timer:1,"triangle-skew-spin":1}}var e;return(e=[{key:"show",value:function(t){this.setOptions(t),this.addSpinnerStylesheet(),this.generateSpinnerElement(),this.options.lockScroll&&(document.body.style.overflow="hidden",document.documentElement.style.overflow="hidden"),this.generateAndAddOverlayElement()}},{key:"hide",value:function(){this.options.lockScroll&&(document.body.style.overflow="",document.documentElement.style.overflow="");var t=document.getElementById("loading-overlay-stylesheet");t&&(t.disabled=!0,t.parentNode.removeChild(t),document.getElementById(this.options.overlayIDName).remove(),document.getElementById(this.options.spinnerIDName).remove())}},{key:"setOptions",value:function(t){if(void 0!==t)for(var e in t)this.options[e]=t[e]}},{key:"generateAndAddOverlayElement",value:function(){var t="50%";0!==this.options.offsetX&&(t="calc(50% + "+this.options.offsetX+")");var e="50%";if(0!==this.options.offsetY&&(e="calc(50% + "+this.options.offsetY+")"),this.options.containerID&&document.body.contains(document.getElementById(this.options.containerID))){var i='<div id="'.concat(this.options.overlayIDName,'" style="display: block !important; position: absolute; top: 0; left: 0; overflow: auto; opacity: ').concat(this.options.overlayOpacity,"; background: ").concat(this.options.overlayBackgroundColor,'; z-index: 50; width: 100%; height: 100%;"></div><div id="').concat(this.options.spinnerIDName,'" style="display: block !important; position: absolute; top: ').concat(e,"; left: ").concat(t,'; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: 9999;">').concat(this.spinner,"</div>"),r=document.getElementById(this.options.containerID);return r.style.position="relative",void r.insertAdjacentHTML("beforeend",i)}var n='<div id="'.concat(this.options.overlayIDName,'" style="display: block !important; position: fixed; top: 0; left: 0; overflow: auto; opacity: ').concat(this.options.overlayOpacity,"; background: ").concat(this.options.overlayBackgroundColor,"; z-index: ").concat(this.options.overlayZIndex,'; width: 100%; height: 100%;"></div><div id="').concat(this.options.spinnerIDName,'" style="display: block !important; position: fixed; top: ').concat(e,"; left: ").concat(t,"; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: ").concat(this.options.spinnerZIndex,';">').concat(this.spinner,"</div>");document.body.insertAdjacentHTML("beforeend",n)}},{key:"generateSpinnerElement",value:function(){var t=this,e=Object.keys(this.numberOfEmptyDivForSpinner).find((function(e){return e===t.options.spinnerIcon})),i=this.generateEmptyDivElement(this.numberOfEmptyDivForSpinner[e]);this.spinner='<div style="color: '.concat(this.options.spinnerColor,'" class="la-').concat(this.options.spinnerIcon," la-").concat(this.options.spinnerSize,'">').concat(i,"</div>")}},{key:"addSpinnerStylesheet",value:function(){this.setSpinnerStylesheetURL();var t=document.createElement("link");t.setAttribute("id","loading-overlay-stylesheet"),t.setAttribute("rel","stylesheet"),t.setAttribute("type","text/css"),t.setAttribute("href",this.spinnerStylesheetURL),document.getElementsByTagName("head")[0].appendChild(t)}},{key:"setSpinnerStylesheetURL",value:function(){this.spinnerStylesheetURL=this.stylesheetBaseURL+this.options.spinnerIcon+".min.css"}},{key:"generateEmptyDivElement",value:function(t){for(var e="",i=1;i<=t;i++)e+="<div></div>";return e}}])&&function(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}(t.prototype,e),t}();window.JsLoadingOverlay=new i,t.exports=JsLoadingOverlay}])},326:(t,e,i)=>{var r,n,o=i(702);r=function(){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t){if("object"!==r(t.console)){t.console={};for(var e,i,n=t.console,o=function(){},s=["memory"],a="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");e=s.pop();)n[e]||(n[e]={});for(;i=a.pop();)n[i]||(n[i]=o)}var l,h,c,u,f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";void 0===t.btoa&&(t.btoa=function(t){var e,i,r,n,o,s=0,a=0,l="",h=[];if(!t)return t;for(;e=(o=t.charCodeAt(s++)<<16|t.charCodeAt(s++)<<8|t.charCodeAt(s++))>>18&63,i=o>>12&63,r=o>>6&63,n=63&o,h[a++]=f.charAt(e)+f.charAt(i)+f.charAt(r)+f.charAt(n),s<t.length;);l=h.join("");var c=t.length%3;return(c?l.slice(0,c-3):l)+"===".slice(c||3)}),void 0===t.atob&&(t.atob=function(t){var e,i,r,n,o,s,a=0,l=0,h=[];if(!t)return t;for(t+="";e=(s=f.indexOf(t.charAt(a++))<<18|f.indexOf(t.charAt(a++))<<12|(n=f.indexOf(t.charAt(a++)))<<6|(o=f.indexOf(t.charAt(a++))))>>16&255,i=s>>8&255,r=255&s,h[l++]=64==n?String.fromCharCode(e):64==o?String.fromCharCode(e,i):String.fromCharCode(e,i,r),a<t.length;);return h.join("")}),Array.prototype.map||(Array.prototype.map=function(t){if(null==this||"function"!=typeof t)throw new TypeError;for(var e=Object(this),i=e.length>>>0,r=new Array(i),n=1<arguments.length?arguments[1]:void 0,o=0;o<i;o++)o in e&&(r[o]=t.call(n,e[o],o,e));return r}),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),Array.prototype.forEach||(Array.prototype.forEach=function(t,e){if(null==this||"function"!=typeof t)throw new TypeError;for(var i=Object(this),r=i.length>>>0,n=0;n<r;n++)n in i&&t.call(e,i[n],n,i)}),Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(t){if(null==this)throw new TypeError('"this" is null or not defined');var e=Object(this),i=e.length>>>0;if("function"!=typeof t)throw new TypeError("predicate must be a function");for(var r=arguments[1],n=0;n<i;){var o=e[n];if(t.call(r,o,n,e))return o;n++}},configurable:!0,writable:!0}),Object.keys||(Object.keys=(l=Object.prototype.hasOwnProperty,h=!{toString:null}.propertyIsEnumerable("toString"),u=(c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){if("object"!==r(t)&&("function"!=typeof t||null===t))throw new TypeError;var e,i,n=[];for(e in t)l.call(t,e)&&n.push(e);if(h)for(i=0;i<u;i++)l.call(t,c[i])&&n.push(c[i]);return n})),"function"!=typeof Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");t=Object(t);for(var e=1;e<arguments.length;e++){var i=arguments[e];if(null!=i)for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),String.prototype.trimLeft||(String.prototype.trimLeft=function(){return this.replace(/^\s+/g,"")}),String.prototype.trimRight||(String.prototype.trimRight=function(){return this.replace(/\s+$/g,"")}),Number.isInteger=Number.isInteger||function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")());var s,a,l,h,c,u,f,d,p,g,m,v,b,y,x,w,_,S,C,A,L,T,k,O,N,P,E,F,j,I,M,D,B,R,z,U,q,H,W,V,X,Y,G,K,J,$,Z,Q,tt,et,it,rt,nt,ot,st,at,lt,ht,ct,ut,ft,dt,pt=function(s){function a(t){if("object"!==r(t))throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");var e={};this.subscribe=function(t,i,r){if(r=r||!1,"string"!=typeof t||"function"!=typeof i||"boolean"!=typeof r)throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");e.hasOwnProperty(t)||(e[t]={});var n=Math.random().toString(35);return e[t][n]=[i,!!r],n},this.unsubscribe=function(t){for(var i in e)if(e[i][t])return delete e[i][t],0===Object.keys(e[i]).length&&delete e[i],!0;return!1},this.publish=function(i){if(e.hasOwnProperty(i)){var r=Array.prototype.slice.call(arguments,1),n=[];for(var o in e[i]){var a=e[i][o];try{a[0].apply(t,r)}catch(i){s.console&&console.error("jsPDF PubSub Error",i.message,i)}a[1]&&n.push(o)}n.length&&n.forEach(this.unsubscribe)}},this.getTopics=function(){return e}}function l(t,e,i,n){var h={},c=[],u=1;"object"===r(t)&&(t=(h=t).orientation,e=h.unit||e,i=h.format||i,n=h.compress||h.compressPdf||n,c=h.filters||(!0===n?["FlateEncode"]:c),u="number"==typeof h.userUnit?Math.abs(h.userUnit):1),e=e||"mm",t=(""+(t||"P")).toLowerCase();var f=h.putOnlyUsedFonts||!0,d={},p={internal:{},__private__:{}};p.__private__.PubSub=a;var g="1.3",m=p.__private__.getPdfVersion=function(){return g},v=(p.__private__.setPdfVersion=function(t){g=t},{a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]}),b=(p.__private__.getPageFormats=function(){return v},p.__private__.getPageFormat=function(t){return v[t]});"string"==typeof i&&(i=b(i)),i=i||b("a4");var y,x=p.f2=p.__private__.f2=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return t.toFixed(2)},w=p.__private__.f3=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f3");return t.toFixed(3)},_="00000000000000000000000000000000",S=p.__private__.getFileId=function(){return _},C=p.__private__.setFileId=function(t){return t=t||"12345678901234567890123456789012".split("").map((function(){return"ABCDEF0123456789".charAt(Math.floor(16*Math.random()))})).join(""),_=t};p.setFileId=function(t){return C(t),this},p.getFileId=function(){return S()};var A=p.__private__.convertDateToPDFDate=function(t){var e=t.getTimezoneOffset(),i=e<0?"+":"-",r=Math.floor(Math.abs(e/60)),n=Math.abs(e%60),o=[i,D(r),"'",D(n),"'"].join("");return["D:",t.getFullYear(),D(t.getMonth()+1),D(t.getDate()),D(t.getHours()),D(t.getMinutes()),D(t.getSeconds()),o].join("")},L=p.__private__.convertPDFDateToDate=function(t){var e=parseInt(t.substr(2,4),10),i=parseInt(t.substr(6,2),10)-1,r=parseInt(t.substr(8,2),10),n=parseInt(t.substr(10,2),10),o=parseInt(t.substr(12,2),10),s=parseInt(t.substr(14,2),10);return parseInt(t.substr(16,2),10),parseInt(t.substr(20,2),10),new Date(e,i,r,n,o,s,0)},T=p.__private__.setCreationDate=function(t){var e;if(void 0===t&&(t=new Date),"object"===r(t)&&"[object Date]"===Object.prototype.toString.call(t))e=A(t);else{if(!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|\-0[0-9]|\-1[0-1])\'(0[0-9]|[1-5][0-9])\'?$/.test(t))throw new Error("Invalid argument passed to jsPDF.setCreationDate");e=t}return y=e},k=p.__private__.getCreationDate=function(t){var e=y;return"jsDate"===t&&(e=L(y)),e};p.setCreationDate=function(t){return T(t),this},p.getCreationDate=function(t){return k(t)};var O,N,P,E,F,j,I,M,D=p.__private__.padd2=function(t){return("0"+parseInt(t)).slice(-2)},B=!1,R=[],z=[],U=0,q=(p.__private__.setCustomOutputDestination=function(t){N=t},p.__private__.resetCustomOutputDestination=function(t){N=void 0},p.__private__.out=function(t){var e;return t="string"==typeof t?t:t.toString(),(e=void 0===N?B?R[O]:z:N).push(t),B||(U+=t.length+1),e}),H=p.__private__.write=function(t){return q(1===arguments.length?t.toString():Array.prototype.join.call(arguments," "))},W=p.__private__.getArrayBuffer=function(t){for(var e=t.length,i=new ArrayBuffer(e),r=new Uint8Array(i);e--;)r[e]=t.charCodeAt(e);return i},V=[["Helvetica","helvetica","normal","WinAnsiEncoding"],["Helvetica-Bold","helvetica","bold","WinAnsiEncoding"],["Helvetica-Oblique","helvetica","italic","WinAnsiEncoding"],["Helvetica-BoldOblique","helvetica","bolditalic","WinAnsiEncoding"],["Courier","courier","normal","WinAnsiEncoding"],["Courier-Bold","courier","bold","WinAnsiEncoding"],["Courier-Oblique","courier","italic","WinAnsiEncoding"],["Courier-BoldOblique","courier","bolditalic","WinAnsiEncoding"],["Times-Roman","times","normal","WinAnsiEncoding"],["Times-Bold","times","bold","WinAnsiEncoding"],["Times-Italic","times","italic","WinAnsiEncoding"],["Times-BoldItalic","times","bolditalic","WinAnsiEncoding"],["ZapfDingbats","zapfdingbats","normal",null],["Symbol","symbol","normal",null]],X=(p.__private__.getStandardFonts=function(t){return V},h.fontSize||16),Y=(p.__private__.setFontSize=p.setFontSize=function(t){return X=t,this},p.__private__.getFontSize=p.getFontSize=function(){return X}),G=h.R2L||!1,K=(p.__private__.setR2L=p.setR2L=function(t){return G=t,this},p.__private__.getR2L=p.getR2L=function(t){return G},p.__private__.setZoomMode=function(t){if(/^\d*\.?\d*\%$/.test(t))P=t;else if(isNaN(t)){if(-1===[void 0,null,"fullwidth","fullheight","fullpage","original"].indexOf(t))throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "'+t+'" is not recognized.');P=t}else P=parseInt(t,10)}),J=(p.__private__.getZoomMode=function(){return P},p.__private__.setPageMode=function(t){if(-1==[void 0,null,"UseNone","UseOutlines","UseThumbs","FullScreen"].indexOf(t))throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "'+t+'" is not recognized.');E=t}),$=(p.__private__.getPageMode=function(){return E},p.__private__.setLayoutMode=function(t){if(-1==[void 0,null,"continuous","single","twoleft","tworight","two"].indexOf(t))throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "'+t+'" is not recognized.');F=t}),Z=(p.__private__.getLayoutMode=function(){return F},p.__private__.setDisplayMode=p.setDisplayMode=function(t,e,i){return K(t),$(e),J(i),this},{title:"",subject:"",author:"",keywords:"",creator:""}),Q=(p.__private__.getDocumentProperty=function(t){if(-1===Object.keys(Z).indexOf(t))throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");return Z[t]},p.__private__.getDocumentProperties=function(t){return Z},p.__private__.setDocumentProperties=p.setProperties=p.setDocumentProperties=function(t){for(var e in Z)Z.hasOwnProperty(e)&&t[e]&&(Z[e]=t[e]);return this},p.__private__.setDocumentProperty=function(t,e){if(-1===Object.keys(Z).indexOf(t))throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");return Z[t]=e},0),tt=[],et={},it={},rt=0,nt=[],ot=[],st=new a(p),at=h.hotfixes||[],lt=p.__private__.newObject=function(){var t=ht();return ct(t,!0),t},ht=p.__private__.newObjectDeferred=function(){return tt[++Q]=function(){return U},Q},ct=function(t,e){return e="boolean"==typeof e&&e,tt[t]=U,e&&q(t+" 0 obj"),t},ut=p.__private__.newAdditionalObject=function(){var t={objId:ht(),content:""};return ot.push(t),t},ft=ht(),dt=ht(),pt=p.__private__.decodeColorString=function(t){var e=t.split(" ");if(2===e.length&&("g"===e[1]||"G"===e[1])){var i=parseFloat(e[0]);e=[i,i,i,"r"]}for(var r="#",n=0;n<3;n++)r+=("0"+Math.floor(255*parseFloat(e[n])).toString(16)).slice(-2);return r},gt=p.__private__.encodeColorString=function(t){var e;"string"==typeof t&&(t={ch1:t});var i=t.ch1,n=t.ch2,o=t.ch3,s=t.ch4,a=(t.precision,"draw"===t.pdfColorType?["G","RG","K"]:["g","rg","k"]);if("string"==typeof i&&"#"!==i.charAt(0)){var l=new RGBColor(i);if(l.ok)i=l.toHex();else if(!/^\d*\.?\d*$/.test(i))throw new Error('Invalid color "'+i+'" passed to jsPDF.encodeColorString.')}if("string"==typeof i&&/^#[0-9A-Fa-f]{3}$/.test(i)&&(i="#"+i[1]+i[1]+i[2]+i[2]+i[3]+i[3]),"string"==typeof i&&/^#[0-9A-Fa-f]{6}$/.test(i)){var h=parseInt(i.substr(1),16);i=h>>16&255,n=h>>8&255,o=255&h}if(void 0===n||void 0===s&&i===n&&n===o)if("string"==typeof i)e=i+" "+a[0];else switch(t.precision){case 2:e=x(i/255)+" "+a[0];break;case 3:default:e=w(i/255)+" "+a[0]}else if(void 0===s||"object"===r(s)){if(s&&!isNaN(s.a)&&0===s.a)return["1.000","1.000","1.000",a[1]].join(" ");if("string"==typeof i)e=[i,n,o,a[1]].join(" ");else switch(t.precision){case 2:e=[x(i/255),x(n/255),x(o/255),a[1]].join(" ");break;default:case 3:e=[w(i/255),w(n/255),w(o/255),a[1]].join(" ")}}else if("string"==typeof i)e=[i,n,o,s,a[2]].join(" ");else switch(t.precision){case 2:e=[x(i/255),x(n/255),x(o/255),x(s/255),a[2]].join(" ");break;case 3:default:e=[w(i/255),w(n/255),w(o/255),w(s/255),a[2]].join(" ")}return e},mt=p.__private__.getFilters=function(){return c},vt=p.__private__.putStream=function(t){var e,i=(t=t||{}).data||"",r=t.filters||mt(),n=t.alreadyAppliedFilters||[],o=t.addLength1||!1,s=i.length;!0===r&&(r=["FlateEncode"]);var a=t.additionalKeyValues||[],h=(e=void 0!==l.API.processDataByFilters?l.API.processDataByFilters(i,r):{data:i,reverseChain:[]}).reverseChain+(Array.isArray(n)?n.join(" "):n.toString());0!==e.data.length&&(a.push({key:"Length",value:e.data.length}),!0===o&&a.push({key:"Length1",value:s})),0!=h.length&&(h.split("/").length-1==1?a.push({key:"Filter",value:h}):a.push({key:"Filter",value:"["+h+"]"})),q("<<");for(var c=0;c<a.length;c++)q("/"+a[c].key+" "+a[c].value);q(">>"),0!==e.data.length&&(q("stream"),q(e.data),q("endstream"))},bt=p.__private__.putPage=function(t){t.mediaBox;var e=t.number,i=t.data,r=t.objId,n=t.contentsObjId;ct(r,!0),nt[O].mediaBox.topRightX,nt[O].mediaBox.bottomLeftX,nt[O].mediaBox.topRightY,nt[O].mediaBox.bottomLeftY,q("<</Type /Page"),q("/Parent "+t.rootDictionaryObjId+" 0 R"),q("/Resources "+t.resourceDictionaryObjId+" 0 R"),q("/MediaBox ["+parseFloat(x(t.mediaBox.bottomLeftX))+" "+parseFloat(x(t.mediaBox.bottomLeftY))+" "+x(t.mediaBox.topRightX)+" "+x(t.mediaBox.topRightY)+"]"),null!==t.cropBox&&q("/CropBox ["+x(t.cropBox.bottomLeftX)+" "+x(t.cropBox.bottomLeftY)+" "+x(t.cropBox.topRightX)+" "+x(t.cropBox.topRightY)+"]"),null!==t.bleedBox&&q("/BleedBox ["+x(t.bleedBox.bottomLeftX)+" "+x(t.bleedBox.bottomLeftY)+" "+x(t.bleedBox.topRightX)+" "+x(t.bleedBox.topRightY)+"]"),null!==t.trimBox&&q("/TrimBox ["+x(t.trimBox.bottomLeftX)+" "+x(t.trimBox.bottomLeftY)+" "+x(t.trimBox.topRightX)+" "+x(t.trimBox.topRightY)+"]"),null!==t.artBox&&q("/ArtBox ["+x(t.artBox.bottomLeftX)+" "+x(t.artBox.bottomLeftY)+" "+x(t.artBox.topRightX)+" "+x(t.artBox.topRightY)+"]"),"number"==typeof t.userUnit&&1!==t.userUnit&&q("/UserUnit "+t.userUnit),st.publish("putPage",{objId:r,pageContext:nt[e],pageNumber:e,page:i}),q("/Contents "+n+" 0 R"),q(">>"),q("endobj");var o=i.join("\n");return ct(n,!0),vt({data:o,filters:mt()}),q("endobj"),r},yt=p.__private__.putPages=function(){var t,e,i=[];for(t=1;t<=rt;t++)nt[t].objId=ht(),nt[t].contentsObjId=ht();for(t=1;t<=rt;t++)i.push(bt({number:t,data:R[t],objId:nt[t].objId,contentsObjId:nt[t].contentsObjId,mediaBox:nt[t].mediaBox,cropBox:nt[t].cropBox,bleedBox:nt[t].bleedBox,trimBox:nt[t].trimBox,artBox:nt[t].artBox,userUnit:nt[t].userUnit,rootDictionaryObjId:ft,resourceDictionaryObjId:dt}));ct(ft,!0),q("<</Type /Pages");var r="/Kids [";for(e=0;e<rt;e++)r+=i[e]+" 0 R ";q(r+"]"),q("/Count "+rt),q(">>"),q("endobj"),st.publish("postPutPages")},xt=function(t,e,i){it.hasOwnProperty(e)||(it[e]={}),it[e][i]=t},wt=function(t,e,i,r,n){n=n||!1;var o="F"+(Object.keys(et).length+1).toString(10),s={id:o,postScriptName:t,fontName:e,fontStyle:i,encoding:r,isStandardFont:n,metadata:{}};return st.publish("addFont",{font:s,instance:this}),void 0!==o&&(et[o]=s,xt(o,e,i)),o},_t=p.__private__.pdfEscape=p.pdfEscape=function(t,e){return function(t,e){var i,r,n,o,s,a,l,h,c;if(n=(e=e||{}).sourceEncoding||"Unicode",s=e.outputEncoding,(e.autoencode||s)&&et[j].metadata&&et[j].metadata[n]&&et[j].metadata[n].encoding&&(o=et[j].metadata[n].encoding,!s&&et[j].encoding&&(s=et[j].encoding),!s&&o.codePages&&(s=o.codePages[0]),"string"==typeof s&&(s=o[s]),s)){for(l=!1,a=[],i=0,r=t.length;i<r;i++)(h=s[t.charCodeAt(i)])?a.push(String.fromCharCode(h)):a.push(t[i]),a[i].charCodeAt(0)>>8&&(l=!0);t=a.join("")}for(i=t.length;void 0===l&&0!==i;)t.charCodeAt(i-1)>>8&&(l=!0),i--;if(!l)return t;for(a=e.noBOM?[]:[254,255],i=0,r=t.length;i<r;i++){if((c=(h=t.charCodeAt(i))>>8)>>8)throw new Error("Character at position "+i+" of string '"+t+"' exceeds 16bits. Cannot be encoded into UCS-2 BE");a.push(c),a.push(h-(c<<8))}return String.fromCharCode.apply(void 0,a)}(t,e).replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},St=p.__private__.beginPage=function(t,e){var r,n="string"==typeof e&&e.toLowerCase();if("string"==typeof t&&(r=b(t.toLowerCase()))&&(t=r[0],e=r[1]),Array.isArray(t)&&(e=t[1],t=t[0]),(isNaN(t)||isNaN(e))&&(t=i[0],e=i[1]),n){switch(n.substr(0,1)){case"l":t<e&&(n="s");break;case"p":e<t&&(n="s")}"s"===n&&(r=t,t=e,e=r)}(14400<t||14400<e)&&(console.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"),t=Math.min(14400,t),e=Math.min(14400,e)),i=[t,e],B=!0,R[++rt]=[],nt[rt]={objId:0,contentsObjId:0,userUnit:Number(u),artBox:null,bleedBox:null,cropBox:null,trimBox:null,mediaBox:{bottomLeftX:0,bottomLeftY:0,topRightX:Number(t),topRightY:Number(e)}},At(rt)},Ct=function(){St.apply(this,arguments),Vt(Wt),q(Qt),0!==oe&&q(oe+" J"),0!==ae&&q(ae+" j"),st.publish("addPage",{pageNumber:rt})},At=function(t){0<t&&t<=rt&&(O=t)},Lt=p.__private__.getNumberOfPages=p.getNumberOfPages=function(){return R.length-1},Tt=function(t,e,i){var r,n=void 0;return i=i||{},t=void 0!==t?t:et[j].fontName,e=void 0!==e?e:et[j].fontStyle,r=t.toLowerCase(),void 0!==it[r]&&void 0!==it[r][e]?n=it[r][e]:void 0!==it[t]&&void 0!==it[t][e]?n=it[t][e]:!1===i.disableWarning&&console.warn("Unable to look up font label for font '"+t+"', '"+e+"'. Refer to getFontList() for available fonts."),n||i.noFallback||null==(n=it.times[e])&&(n=it.times.normal),n},kt=p.__private__.putInfo=function(){for(var t in lt(),q("<<"),q("/Producer (jsPDF "+l.version+")"),Z)Z.hasOwnProperty(t)&&Z[t]&&q("/"+t.substr(0,1).toUpperCase()+t.substr(1)+" ("+_t(Z[t])+")");q("/CreationDate ("+y+")"),q(">>"),q("endobj")},Ot=p.__private__.putCatalog=function(t){var e=(t=t||{}).rootDictionaryObjId||ft;switch(lt(),q("<<"),q("/Type /Catalog"),q("/Pages "+e+" 0 R"),P||(P="fullwidth"),P){case"fullwidth":q("/OpenAction [3 0 R /FitH null]");break;case"fullheight":q("/OpenAction [3 0 R /FitV null]");break;case"fullpage":q("/OpenAction [3 0 R /Fit]");break;case"original":q("/OpenAction [3 0 R /XYZ null null 1]");break;default:var i=""+P;"%"===i.substr(i.length-1)&&(P=parseInt(P)/100),"number"==typeof P&&q("/OpenAction [3 0 R /XYZ null null "+x(P)+"]")}switch(F||(F="continuous"),F){case"continuous":q("/PageLayout /OneColumn");break;case"single":q("/PageLayout /SinglePage");break;case"two":case"twoleft":q("/PageLayout /TwoColumnLeft");break;case"tworight":q("/PageLayout /TwoColumnRight")}E&&q("/PageMode /"+E),st.publish("putCatalog"),q(">>"),q("endobj")},Pt=p.__private__.putTrailer=function(){q("trailer"),q("<<"),q("/Size "+(Q+1)),q("/Root "+Q+" 0 R"),q("/Info "+(Q-1)+" 0 R"),q("/ID [ <"+_+"> <"+_+"> ]"),q(">>")},Et=p.__private__.putHeader=function(){q("%PDF-"+g),q("%ºß¬à")},Ft=p.__private__.putXRef=function(){var t=1,e="0000000000";for(q("xref"),q("0 "+(Q+1)),q("0000000000 65535 f "),t=1;t<=Q;t++)"function"==typeof tt[t]?q((e+tt[t]()).slice(-10)+" 00000 n "):void 0!==tt[t]?q((e+tt[t]).slice(-10)+" 00000 n "):q("0000000000 00000 n ")},jt=p.__private__.buildDocument=function(){B=!1,U=Q=0,z=[],tt=[],ot=[],ft=ht(),dt=ht(),st.publish("buildDocument"),Et(),yt(),function(){st.publish("putAdditionalObjects");for(var t=0;t<ot.length;t++){var e=ot[t];ct(e.objId,!0),q(e.content),q("endobj")}st.publish("postPutAdditionalObjects")}(),function(){for(var t in et)et.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&(e=et[t],st.publish("putFont",{font:e,out:q,newObject:lt,putStream:vt}),!0!==e.isAlreadyPutted&&(e.objectNumber=lt(),q("<<"),q("/Type /Font"),q("/BaseFont /"+e.postScriptName),q("/Subtype /Type1"),"string"==typeof e.encoding&&q("/Encoding /"+e.encoding),q("/FirstChar 32"),q("/LastChar 255"),q(">>"),q("endobj")));var e}(),st.publish("putResources"),ct(dt,!0),q("<<"),function(){for(var t in q("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"),q("/Font <<"),et)et.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&q("/"+t+" "+et[t].objectNumber+" 0 R");q(">>"),q("/XObject <<"),st.publish("putXobjectDict"),q(">>")}(),q(">>"),q("endobj"),st.publish("postPutResources"),kt(),Ot();var t=U;return Ft(),Pt(),q("startxref"),q(""+t),q("%%EOF"),B=!0,z.join("\n")},It=p.__private__.getBlob=function(t){return new Blob([W(t)],{type:"application/pdf"})},Mt=p.output=p.__private__.output=((M=function(t,e){e=e||{};var i=jt();switch("string"==typeof e?e={filename:e}:e.filename=e.filename||"generated.pdf",t){case void 0:return i;case"save":p.save(e.filename);break;case"arraybuffer":return W(i);case"blob":return It(i);case"bloburi":case"bloburl":if(void 0!==s.URL&&"function"==typeof s.URL.createObjectURL)return s.URL&&s.URL.createObjectURL(It(i))||void 0;console.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");break;case"datauristring":case"dataurlstring":return"data:application/pdf;filename="+e.filename+";base64,"+btoa(i);case"dataurlnewwindow":var r='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="'+this.output("datauristring")+'"></iframe></body></html>',n=s.open();if(null!==n&&n.document.write(r),n||"undefined"==typeof safari)return n;case"datauri":case"dataurl":return s.document.location.href="data:application/pdf;filename="+e.filename+";base64,"+btoa(i);default:return null}}).foo=function(){try{return M.apply(this,arguments)}catch(i){var t=i.stack||"";~t.indexOf(" at ")&&(t=t.split(" at ")[1]);var e="Error in function "+t.split("\n")[0].split("<")[0]+": "+i.message;if(!s.console)throw new Error(e);s.console.error(e,i),s.alert&&alert(e)}},(M.foo.bar=M).foo),Dt=function(t){return!0===Array.isArray(at)&&-1<at.indexOf(t)};switch(e){case"pt":I=1;break;case"mm":I=72/25.4;break;case"cm":I=72/2.54;break;case"in":I=72;break;case"px":I=1==Dt("px_scaling")?.75:96/72;break;case"pc":case"em":I=12;break;case"ex":I=6;break;default:throw new Error("Invalid unit: "+e)}T(),C();var Bt=p.__private__.getPageInfo=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfo");return{objId:nt[t].objId,pageNumber:t,pageContext:nt[t]}},Rt=p.__private__.getPageInfoByObjId=function(t){for(var e in nt)if(nt[e].objId===t)break;if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");return Bt(e)},zt=p.__private__.getCurrentPageInfo=function(){return{objId:nt[O].objId,pageNumber:O,pageContext:nt[O]}};p.addPage=function(){return Ct.apply(this,arguments),this},p.setPage=function(){return At.apply(this,arguments),this},p.insertPage=function(t){return this.addPage(),this.movePage(O,t),this},p.movePage=function(t,e){if(e<t){for(var i=R[t],r=nt[t],n=t;e<n;n--)R[n]=R[n-1],nt[n]=nt[n-1];R[e]=i,nt[e]=r,this.setPage(e)}else if(t<e){for(i=R[t],r=nt[t],n=t;n<e;n++)R[n]=R[n+1],nt[n]=nt[n+1];R[e]=i,nt[e]=r,this.setPage(e)}return this},p.deletePage=function(){return function(t){0<t&&t<=rt&&(R.splice(t,1),--rt<O&&(O=rt),this.setPage(O))}.apply(this,arguments),this},p.__private__.text=p.text=function(t,e,i,n){var o;"number"!=typeof t||"number"!=typeof e||"string"!=typeof i&&!Array.isArray(i)||(o=i,i=e,e=t,t=o);var s=arguments[3],a=arguments[4],l=arguments[5];if("object"===r(s)&&null!==s||("string"==typeof a&&(l=a,a=null),"string"==typeof s&&(l=s,s=null),"number"==typeof s&&(a=s,s=null),n={flags:s,angle:a,align:l}),(s=s||{}).noBOM=s.noBOM||!0,s.autoencode=s.autoencode||!0,isNaN(e)||isNaN(i)||null==t)throw new Error("Invalid arguments passed to jsPDF.text");if(0===t.length)return f;var h,c="",u="number"==typeof n.lineHeightFactor?n.lineHeightFactor:Ht,f=n.scope||this;function p(t){for(var e,i=t.concat(),r=[],n=i.length;n--;)"string"==typeof(e=i.shift())?r.push(e):Array.isArray(t)&&1===e.length?r.push(e[0]):r.push([e[0],e[1],e[2]]);return r}function g(t,e){var i;if("string"==typeof t)i=e(t)[0];else if(Array.isArray(t)){for(var r,n,o=t.concat(),s=[],a=o.length;a--;)"string"==typeof(r=o.shift())?s.push(e(r)[0]):Array.isArray(r)&&"string"===r[0]&&(n=e(r[0],r[1],r[2]),s.push([n[0],n[1],n[2]]));i=s}return i}var m=!1,v=!0;if("string"==typeof t)m=!0;else if(Array.isArray(t)){for(var b,y=t.concat(),_=[],S=y.length;S--;)("string"!=typeof(b=y.shift())||Array.isArray(b)&&"string"!=typeof b[0])&&(v=!1);m=v}if(!1===m)throw new Error('Type of text must be string or Array. "'+t+'" is not recognized.');var C=et[j].encoding;"WinAnsiEncoding"!==C&&"StandardEncoding"!==C||(t=g(t,(function(t,e,i){return[(r=t,r=r.split("\t").join(Array(n.TabLen||9).join(" ")),_t(r,s)),e,i];var r}))),"string"==typeof t&&(t=t.match(/[\r?\n]/)?t.split(/\r\n|\r|\n/g):[t]);var A=X/f.internal.scaleFactor,L=A*(Ht-1);switch(n.baseline){case"bottom":i-=L;break;case"top":i+=A-L;break;case"hanging":i+=A-2*L;break;case"middle":i+=A/2-L}0<(U=n.maxWidth||0)&&("string"==typeof t?t=f.splitTextToSize(t,U):"[object Array]"===Object.prototype.toString.call(t)&&(t=f.splitTextToSize(t.join(" "),U)));var T={text:t,x:e,y:i,options:n,mutex:{pdfEscape:_t,activeFontKey:j,fonts:et,activeFontSize:X}};st.publish("preProcessText",T),t=T.text,a=(n=T.options).angle;var k=f.internal.scaleFactor,O=[];if(a){a*=Math.PI/180;var N=Math.cos(a),P=Math.sin(a);O=[x(N),x(P),x(-1*P),x(N)]}void 0!==(z=n.charSpace)&&(c+=w(z*k)+" Tc\n"),n.lang;var E=-1,F=void 0!==n.renderingMode?n.renderingMode:n.stroke,I=f.internal.getCurrentPageInfo().pageContext;switch(F){case 0:case!1:case"fill":E=0;break;case 1:case!0:case"stroke":E=1;break;case 2:case"fillThenStroke":E=2;break;case 3:case"invisible":E=3;break;case 4:case"fillAndAddForClipping":E=4;break;case 5:case"strokeAndAddPathForClipping":E=5;break;case 6:case"fillThenStrokeAndAddToPathForClipping":E=6;break;case 7:case"addToPathForClipping":E=7}var M=void 0!==I.usedRenderingMode?I.usedRenderingMode:-1;-1!==E?c+=E+" Tr\n":-1!==M&&(c+="0 Tr\n"),-1!==E&&(I.usedRenderingMode=E),l=n.align||"left";var D=X*u,B=f.internal.pageSize.getWidth(),R=(k=f.internal.scaleFactor,et[j]),z=n.charSpace||re,U=n.maxWidth||0,H=(s={},[]);if("[object Array]"===Object.prototype.toString.call(t)){var W,V;_=p(t),"left"!==l&&(V=_.map((function(t){return f.getStringUnitWidth(t,{font:R,charSpace:z,fontSize:X})*X/k}))),Math.max.apply(Math,V);var Y,K=0;if("right"===l){e-=V[0],t=[];var J=0;for(S=_.length;J<S;J++)V[J],W=0===J?(Y=Kt(e),Jt(i)):(Y=(K-V[J])*k,-D),t.push([_[J],Y,W]),K=V[J]}else if("center"===l)for(e-=V[0]/2,t=[],J=0,S=_.length;J<S;J++)V[J],W=0===J?(Y=Kt(e),Jt(i)):(Y=(K-V[J])/2*k,-D),t.push([_[J],Y,W]),K=V[J];else if("left"===l)for(t=[],J=0,S=_.length;J<S;J++)W=0===J?Jt(i):-D,Y=0===J?Kt(e):0,t.push(_[J]);else{if("justify"!==l)throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');for(t=[],U=0!==U?U:B,J=0,S=_.length;J<S;J++)W=0===J?Jt(i):-D,Y=0===J?Kt(e):0,J<S-1&&H.push(((U-V[J])/(_[J].split(" ").length-1)*k).toFixed(2)),t.push([_[J],Y,W])}}!0===("boolean"==typeof n.R2L?n.R2L:G)&&(t=g(t,(function(t,e,i){return[t.split("").reverse().join(""),e,i]}))),T={text:t,x:e,y:i,options:n,mutex:{pdfEscape:_t,activeFontKey:j,fonts:et,activeFontSize:X}},st.publish("postProcessText",T),t=T.text,h=T.mutex.isHex,_=p(t),t=[];var $,Z,Q,tt=0,it=(S=_.length,"");for(J=0;J<S;J++)it="",Array.isArray(_[J])?($=parseFloat(_[J][1]),Z=parseFloat(_[J][2]),Q=(h?"<":"(")+_[J][0]+(h?">":")"),tt=1):($=Kt(e),Z=Jt(i),Q=(h?"<":"(")+_[J]+(h?">":")")),void 0!==H&&void 0!==H[J]&&(it=H[J]+" Tw\n"),0!==O.length&&0===J?t.push(it+O.join(" ")+" "+$.toFixed(2)+" "+Z.toFixed(2)+" Tm\n"+Q):1===tt||0===tt&&0===J?t.push(it+$.toFixed(2)+" "+Z.toFixed(2)+" Td\n"+Q):t.push(it+Q);t=0===tt?t.join(" Tj\nT* "):t.join(" Tj\n"),t+=" Tj\n";var rt="BT\n/"+j+" "+X+" Tf\n"+(X*u).toFixed(2)+" TL\n"+ee+"\n";return rt+=c,rt+=t,q(rt+="ET"),d[j]=!0,f},p.__private__.lstext=p.lstext=function(t,e,i,r){return console.warn("jsPDF.lstext is deprecated"),this.text(t,e,i,{charSpace:r})},p.__private__.clip=p.clip=function(t){q("evenodd"===t?"W*":"W"),q("n")},p.__private__.clip_fixed=p.clip_fixed=function(t){console.log("clip_fixed is deprecated"),p.clip(t)};var Ut=p.__private__.isValidStyle=function(t){var e=!1;return-1!==[void 0,null,"S","F","DF","FD","f","f*","B","B*"].indexOf(t)&&(e=!0),e},qt=p.__private__.getStyle=function(t){var e="S";return"F"===t?e="f":"FD"===t||"DF"===t?e="B":"f"!==t&&"f*"!==t&&"B"!==t&&"B*"!==t||(e=t),e};p.__private__.line=p.line=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw new Error("Invalid arguments passed to jsPDF.line");return this.lines([[i-t,r-e]],t,e)},p.__private__.lines=p.lines=function(t,e,i,r,n,o){var s,a,l,h,c,u,f,d,p,g,m,v;if("number"==typeof t&&(v=i,i=e,e=t,t=v),r=r||[1,1],o=o||!1,isNaN(e)||isNaN(i)||!Array.isArray(t)||!Array.isArray(r)||!Ut(n)||"boolean"!=typeof o)throw new Error("Invalid arguments passed to jsPDF.lines");for(q(w(Kt(e))+" "+w(Jt(i))+" m "),s=r[0],a=r[1],h=t.length,g=e,m=i,l=0;l<h;l++)2===(c=t[l]).length?(g=c[0]*s+g,m=c[1]*a+m,q(w(Kt(g))+" "+w(Jt(m))+" l")):(u=c[0]*s+g,f=c[1]*a+m,d=c[2]*s+g,p=c[3]*a+m,g=c[4]*s+g,m=c[5]*a+m,q(w(Kt(u))+" "+w(Jt(f))+" "+w(Kt(d))+" "+w(Jt(p))+" "+w(Kt(g))+" "+w(Jt(m))+" c"));return o&&q(" h"),null!==n&&q(qt(n)),this},p.__private__.rect=p.rect=function(t,e,i,r,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||!Ut(n))throw new Error("Invalid arguments passed to jsPDF.rect");return q([x(Kt(t)),x(Jt(e)),x(i*I),x(-r*I),"re"].join(" ")),null!==n&&q(qt(n)),this},p.__private__.triangle=p.triangle=function(t,e,i,r,n,o,s){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||isNaN(n)||isNaN(o)||!Ut(s))throw new Error("Invalid arguments passed to jsPDF.triangle");return this.lines([[i-t,r-e],[n-i,o-r],[t-n,e-o]],t,e,[1,1],s,!0),this},p.__private__.roundedRect=p.roundedRect=function(t,e,i,r,n,o,s){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||isNaN(n)||isNaN(o)||!Ut(s))throw new Error("Invalid arguments passed to jsPDF.roundedRect");var a=4/3*(Math.SQRT2-1);return this.lines([[i-2*n,0],[n*a,0,n,o-o*a,n,o],[0,r-2*o],[0,o*a,-n*a,o,-n,o],[2*n-i,0],[-n*a,0,-n,-o*a,-n,-o],[0,2*o-r],[0,-o*a,n*a,-o,n,-o]],t+n,e,[1,1],s),this},p.__private__.ellipse=p.ellipse=function(t,e,i,r,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||!Ut(n))throw new Error("Invalid arguments passed to jsPDF.ellipse");var o=4/3*(Math.SQRT2-1)*i,s=4/3*(Math.SQRT2-1)*r;return q([x(Kt(t+i)),x(Jt(e)),"m",x(Kt(t+i)),x(Jt(e-s)),x(Kt(t+o)),x(Jt(e-r)),x(Kt(t)),x(Jt(e-r)),"c"].join(" ")),q([x(Kt(t-o)),x(Jt(e-r)),x(Kt(t-i)),x(Jt(e-s)),x(Kt(t-i)),x(Jt(e)),"c"].join(" ")),q([x(Kt(t-i)),x(Jt(e+s)),x(Kt(t-o)),x(Jt(e+r)),x(Kt(t)),x(Jt(e+r)),"c"].join(" ")),q([x(Kt(t+o)),x(Jt(e+r)),x(Kt(t+i)),x(Jt(e+s)),x(Kt(t+i)),x(Jt(e)),"c"].join(" ")),null!==n&&q(qt(n)),this},p.__private__.circle=p.circle=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||!Ut(r))throw new Error("Invalid arguments passed to jsPDF.circle");return this.ellipse(t,e,i,i,r)},p.setFont=function(t,e){return j=Tt(t,e,{disableWarning:!1}),this},p.setFontStyle=p.setFontType=function(t){return j=Tt(void 0,t),this},p.__private__.getFontList=p.getFontList=function(){var t,e,i,r={};for(t in it)if(it.hasOwnProperty(t))for(e in r[t]=i=[],it[t])it[t].hasOwnProperty(e)&&i.push(e);return r},p.addFont=function(t,e,i,r){wt.call(this,t,e,i,r=r||"Identity-H")};var Ht,Wt=h.lineWidth||.200025,Vt=p.__private__.setLineWidth=p.setLineWidth=function(t){return q((t*I).toFixed(2)+" w"),this},Xt=(p.__private__.setLineDash=l.API.setLineDash=function(t,e){if(t=t||[],e=e||0,isNaN(e)||!Array.isArray(t))throw new Error("Invalid arguments passed to jsPDF.setLineDash");return t=t.map((function(t){return(t*I).toFixed(3)})).join(" "),e=parseFloat((e*I).toFixed(3)),q("["+t+"] "+e+" d"),this},p.__private__.getLineHeight=p.getLineHeight=function(){return X*Ht}),Yt=(Xt=p.__private__.getLineHeight=p.getLineHeight=function(){return X*Ht},p.__private__.setLineHeightFactor=p.setLineHeightFactor=function(t){return"number"==typeof(t=t||1.15)&&(Ht=t),this}),Gt=p.__private__.getLineHeightFactor=p.getLineHeightFactor=function(){return Ht};Yt(h.lineHeight);var Kt=p.__private__.getHorizontalCoordinate=function(t){return t*I},Jt=p.__private__.getVerticalCoordinate=function(t){return nt[O].mediaBox.topRightY-nt[O].mediaBox.bottomLeftY-t*I},$t=p.__private__.getHorizontalCoordinateString=function(t){return x(t*I)},Zt=p.__private__.getVerticalCoordinateString=function(t){return x(nt[O].mediaBox.topRightY-nt[O].mediaBox.bottomLeftY-t*I)},Qt=h.strokeColor||"0 G",te=(p.__private__.getStrokeColor=p.getDrawColor=function(){return pt(Qt)},p.__private__.setStrokeColor=p.setDrawColor=function(t,e,i,r){return Qt=gt({ch1:t,ch2:e,ch3:i,ch4:r,pdfColorType:"draw",precision:2}),q(Qt),this},h.fillColor||"0 g"),ee=(p.__private__.getFillColor=p.getFillColor=function(){return pt(te)},p.__private__.setFillColor=p.setFillColor=function(t,e,i,r){return te=gt({ch1:t,ch2:e,ch3:i,ch4:r,pdfColorType:"fill",precision:2}),q(te),this},h.textColor||"0 g"),ie=p.__private__.getTextColor=p.getTextColor=function(){return pt(ee)},re=(p.__private__.setTextColor=p.setTextColor=function(t,e,i,r){return ee=gt({ch1:t,ch2:e,ch3:i,ch4:r,pdfColorType:"text",precision:3}),this},h.charSpace||0),ne=p.__private__.getCharSpace=p.getCharSpace=function(){return re},oe=(p.__private__.setCharSpace=p.setCharSpace=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.setCharSpace");return re=t,this},0);p.CapJoinStyles={0:0,butt:0,but:0,miter:0,1:1,round:1,rounded:1,circle:1,2:2,projecting:2,project:2,square:2,bevel:2},p.__private__.setLineCap=p.setLineCap=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line cap style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return q((oe=e)+" J"),this};var se,ae=0;for(var le in p.__private__.setLineJoin=p.setLineJoin=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line join style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return q((ae=e)+" j"),this},p.__private__.setMiterLimit=p.setMiterLimit=function(t){if(t=t||0,isNaN(t))throw new Error("Invalid argument passed to jsPDF.setMiterLimit");return se=parseFloat(x(t*I)),q(se+" M"),this},p.save=function(t,e){if(t=t||"generated.pdf",(e=e||{}).returnPromise=e.returnPromise||!1,!1!==e.returnPromise)return new o((function(e,i){try{var r=Nt(It(jt()),t);"function"==typeof Nt.unload&&s.setTimeout&&setTimeout(Nt.unload,911),e(r)}catch(e){i(e.message)}}));Nt(It(jt()),t),"function"==typeof Nt.unload&&s.setTimeout&&setTimeout(Nt.unload,911)},l.API)l.API.hasOwnProperty(le)&&("events"===le&&l.API.events.length?function(t,e){var i,r,n;for(n=e.length-1;-1!==n;n--)i=e[n][0],r=e[n][1],t.subscribe.apply(t,[i].concat("function"==typeof r?[r]:r))}(st,l.API.events):p[le]=l.API[le]);return p.internal={pdfEscape:_t,getStyle:qt,getFont:function(){return et[Tt.apply(p,arguments)]},getFontSize:Y,getCharSpace:ne,getTextColor:ie,getLineHeight:Xt,getLineHeightFactor:Gt,write:H,getHorizontalCoordinate:Kt,getVerticalCoordinate:Jt,getCoordinateString:$t,getVerticalCoordinateString:Zt,collections:{},newObject:lt,newAdditionalObject:ut,newObjectDeferred:ht,newObjectDeferredBegin:ct,getFilters:mt,putStream:vt,events:st,scaleFactor:I,pageSize:{getWidth:function(){return(nt[O].mediaBox.topRightX-nt[O].mediaBox.bottomLeftX)/I},setWidth:function(t){nt[O].mediaBox.topRightX=t*I+nt[O].mediaBox.bottomLeftX},getHeight:function(){return(nt[O].mediaBox.topRightY-nt[O].mediaBox.bottomLeftY)/I},setHeight:function(t){nt[O].mediaBox.topRightY=t*I+nt[O].mediaBox.bottomLeftY}},output:Mt,getNumberOfPages:Lt,pages:R,out:q,f2:x,f3:w,getPageInfo:Bt,getPageInfoByObjId:Rt,getCurrentPageInfo:zt,getPDFVersion:m,hasHotfix:Dt},Object.defineProperty(p.internal.pageSize,"width",{get:function(){return(nt[O].mediaBox.topRightX-nt[O].mediaBox.bottomLeftX)/I},set:function(t){nt[O].mediaBox.topRightX=t*I+nt[O].mediaBox.bottomLeftX},enumerable:!0,configurable:!0}),Object.defineProperty(p.internal.pageSize,"height",{get:function(){return(nt[O].mediaBox.topRightY-nt[O].mediaBox.bottomLeftY)/I},set:function(t){nt[O].mediaBox.topRightY=t*I+nt[O].mediaBox.bottomLeftY},enumerable:!0,configurable:!0}),function(t){for(var e=0,i=V.length;e<i;e++){var r=wt(t[e][0],t[e][1],t[e][2],V[e][3],!0);d[r]=!0;var n=t[e][0].split("-");xt(r,n[0],n[1]||"")}st.publish("addFonts",{fonts:et,dictionary:it})}(V),j="F1",Ct(i,t),st.publish("initialized"),p}return l.API={events:[]},l.version="1.5.3",void 0!==(n=function(){return l}.call(e,i,e,t))&&(t.exports=n),l}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")());(function(t,e){var i,n=1,o=function(t){return t.replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},s=function(t){return t.replace(/\\\\/g,"\\").replace(/\\\(/g,"(").replace(/\\\)/g,")")},a=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return t.toFixed(2)},l=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return t.toFixed(5)};t.__acroform__={};var h=function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t},c=function(t){return t*n},u=function(t){return t/n},f=function(t){var e=new j,i=G.internal.getHeight(t)||0,r=G.internal.getWidth(t)||0;return e.BBox=[0,0,Number(a(r)),Number(a(i))],e},d=t.__acroform__.setBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");return t|1<<e},p=t.__acroform__.clearBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");return t&~(1<<e)},g=t.__acroform__.getBit=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");return 0==(t&1<<e)?0:1},m=t.__acroform__.getBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");return g(t,e-1)},v=t.__acroform__.setBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");return d(t,e-1)},b=t.__acroform__.clearBitForPdf=function(t,e,i){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");return p(t,e-1)},y=t.__acroform__.calculateCoordinates=function(t){var e=this.internal.getHorizontalCoordinate,i=this.internal.getVerticalCoordinate,r=t[0],n=t[1],o=t[2],s=t[3],l={};return l.lowerLeft_X=e(r)||0,l.lowerLeft_Y=i(n+s)||0,l.upperRight_X=e(r+o)||0,l.upperRight_Y=i(n)||0,[Number(a(l.lowerLeft_X)),Number(a(l.lowerLeft_Y)),Number(a(l.upperRight_X)),Number(a(l.upperRight_Y))]},x=function(t){if(t.appearanceStreamContent)return t.appearanceStreamContent;if(t.V||t.DV){var e=[],r=t.V||t.DV,n=w(t,r),o=i.internal.getFont(t.fontName,t.fontStyle).id;e.push("/Tx BMC"),e.push("q"),e.push("BT"),e.push(i.__private__.encodeColorString(t.color)),e.push("/"+o+" "+a(n.fontSize)+" Tf"),e.push("1 0 0 1 0 0 Tm"),e.push(n.text),e.push("ET"),e.push("Q"),e.push("EMC");var s=new f(t);return s.stream=e.join("\n"),s}},w=function(t,e){var r=t.maxFontSize||12,n=(t.fontName,{text:"",fontSize:""}),s=(e=")"==(e="("==e.substr(0,1)?e.substr(1):e).substr(e.length-1)?e.substr(0,e.length-1):e).split(" "),l=(i.__private__.encodeColorString(t.color),r),h=G.internal.getHeight(t)||0;h=h<0?-h:h;var c=G.internal.getWidth(t)||0;c=c<0?-c:c;var u=function(e,i,r){if(e+1<s.length){var n=i+" "+s[e+1];return _(n,t,r).width<=c-4}return!1};l++;t:for(;;){e="";var f=_("3",t,--l).height,d=t.multiline?h-l:(h-f)/2,p=-2,g=d+=2,m=0,v=0,b=0;if(l<=0){e="(...) Tj\n",e+="% Width of Text: "+_(e,t,l=12).width+", FieldWidth:"+c+"\n";break}b=_(s[0]+" ",t,l).width;var y="",x=0;for(var w in s)if(s.hasOwnProperty(w)){y=" "==(y+=s[w]+" ").substr(y.length-1)?y.substr(0,y.length-1):y;var S=parseInt(w);b=_(y+" ",t,l).width;var C=u(S,y,l),A=w>=s.length-1;if(C&&!A){y+=" ";continue}if(C||A){if(A)v=S;else if(t.multiline&&h<(f+2)*(x+2)+2)continue t}else{if(!t.multiline)continue t;if(h<(f+2)*(x+2)+2)continue t;v=S}for(var L="",T=m;T<=v;T++)L+=s[T]+" ";switch(L=" "==L.substr(L.length-1)?L.substr(0,L.length-1):L,b=_(L,t,l).width,t.textAlign){case"right":p=c-b-2;break;case"center":p=(c-b)/2;break;case"left":default:p=2}e+=a(p)+" "+a(g)+" Td\n",e+="("+o(L)+") Tj\n",e+=-a(p)+" 0 Td\n",g=-(l+2),b=0,m=v+1,x++,y=""}break}return n.text=e,n.fontSize=l,n},_=function(t,e,r){var n=i.internal.getFont(e.fontName,e.fontStyle),o=i.getStringUnitWidth(t,{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r);return{height:i.getStringUnitWidth("3",{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r)*1.5,width:o}},S={fields:[],xForms:[],acroFormDictionaryRoot:null,printedOut:!1,internal:null,isInitialized:!1},C=function(){i.internal.acroformPlugin.acroFormDictionaryRoot.objId=void 0;var t=i.internal.acroformPlugin.acroFormDictionaryRoot.Fields;for(var e in t)if(t.hasOwnProperty(e)){var r=t[e];r.objId=void 0,r.hasAnnotation&&A.call(i,r)}},A=function(t){var e={type:"reference",object:t};void 0===i.internal.getPageInfo(t.page).pageContext.annotations.find((function(t){return t.type===e.type&&t.object===e.object}))&&i.internal.getPageInfo(t.page).pageContext.annotations.push(e)},L=function(){if(void 0===i.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("putCatalogCallback: Root missing.");i.internal.write("/AcroForm "+i.internal.acroformPlugin.acroFormDictionaryRoot.objId+" 0 R")},T=function(){i.internal.events.unsubscribe(i.internal.acroformPlugin.acroFormDictionaryRoot._eventID),delete i.internal.acroformPlugin.acroFormDictionaryRoot._eventID,i.internal.acroformPlugin.printedOut=!0},k=function(t){var e=!t;for(var n in t||(i.internal.newObjectDeferredBegin(i.internal.acroformPlugin.acroFormDictionaryRoot.objId,!0),i.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),t=t||i.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if(t.hasOwnProperty(n)){var o=t[n],s=[],a=o.Rect;if(o.Rect&&(o.Rect=y.call(this,o.Rect)),i.internal.newObjectDeferredBegin(o.objId,!0),o.DA=G.createDefaultAppearanceStream(o),"object"===r(o)&&"function"==typeof o.getKeyValueListForStream&&(s=o.getKeyValueListForStream()),o.Rect=a,o.hasAppearanceStream&&!o.appearanceStreamContent){var l=x.call(this,o);s.push({key:"AP",value:"<</N "+l+">>"}),i.internal.acroformPlugin.xForms.push(l)}if(o.appearanceStreamContent){var h="";for(var c in o.appearanceStreamContent)if(o.appearanceStreamContent.hasOwnProperty(c)){var u=o.appearanceStreamContent[c];if(h+="/"+c+" ",h+="<<",1<=Object.keys(u).length||Array.isArray(u))for(var n in u){var f;u.hasOwnProperty(n)&&("function"==typeof(f=u[n])&&(f=f.call(this,o)),h+="/"+n+" "+f+" ",0<=i.internal.acroformPlugin.xForms.indexOf(f)||i.internal.acroformPlugin.xForms.push(f))}else"function"==typeof(f=u)&&(f=f.call(this,o)),h+="/"+n+" "+f,0<=i.internal.acroformPlugin.xForms.indexOf(f)||i.internal.acroformPlugin.xForms.push(f);h+=">>"}s.push({key:"AP",value:"<<\n"+h+">>"})}i.internal.putStream({additionalKeyValues:s}),i.internal.out("endobj")}e&&O.call(this,i.internal.acroformPlugin.xForms)},O=function(t){for(var e in t)if(t.hasOwnProperty(e)){var n=e,o=t[e];i.internal.newObjectDeferredBegin(o&&o.objId,!0),"object"===r(o)&&"function"==typeof o.putStream&&o.putStream(),delete t[n]}},N=function(){if(void 0!==this.internal&&(void 0===this.internal.acroformPlugin||!1===this.internal.acroformPlugin.isInitialized)){if(i=this,M.FieldNum=0,this.internal.acroformPlugin=JSON.parse(JSON.stringify(S)),this.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("Exception while creating AcroformDictionary");n=i.internal.scaleFactor,i.internal.acroformPlugin.acroFormDictionaryRoot=new I,i.internal.acroformPlugin.acroFormDictionaryRoot._eventID=i.internal.events.subscribe("postPutResources",T),i.internal.events.subscribe("buildDocument",C),i.internal.events.subscribe("putCatalog",L),i.internal.events.subscribe("postPutPages",k),i.internal.acroformPlugin.isInitialized=!0}},P=t.__acroform__.arrayToPdfArray=function(t){if(Array.isArray(t)){for(var e="[",i=0;i<t.length;i++)switch(0!==i&&(e+=" "),r(t[i])){case"boolean":case"number":case"object":e+=t[i].toString();break;case"string":"/"!==t[i].substr(0,1)?e+="("+o(t[i].toString())+")":e+=t[i].toString()}return e+"]"}throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray")},E=function(t){return(t=t||"").toString(),"("+o(t)+")"},F=function(){var t;Object.defineProperty(this,"objId",{configurable:!0,get:function(){if(t||(t=i.internal.newObjectDeferred()),!t)throw new Error("AcroFormPDFObject: Couldn't create Object ID");return t},set:function(e){t=e}})};F.prototype.toString=function(){return this.objId+" 0 R"},F.prototype.putStream=function(){var t=this.getKeyValueListForStream();i.internal.putStream({data:this.stream,additionalKeyValues:t}),i.internal.out("endobj")},F.prototype.getKeyValueListForStream=function(){return function(t){var e=[],i=Object.getOwnPropertyNames(t).filter((function(t){return"content"!=t&&"appearanceStreamContent"!=t&&"_"!=t.substring(0,1)}));for(var r in i)if(!1===Object.getOwnPropertyDescriptor(t,i[r]).configurable){var n=i[r],o=t[n];o&&(Array.isArray(o)?e.push({key:n,value:P(o)}):o instanceof F?e.push({key:n,value:o.objId+" 0 R"}):"function"!=typeof o&&e.push({key:n,value:o}))}return e}(this)};var j=function(){F.call(this),Object.defineProperty(this,"Type",{value:"/XObject",configurable:!1,writeable:!0}),Object.defineProperty(this,"Subtype",{value:"/Form",configurable:!1,writeable:!0}),Object.defineProperty(this,"FormType",{value:1,configurable:!1,writeable:!0});var t,e=[];Object.defineProperty(this,"BBox",{configurable:!1,writeable:!0,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"Resources",{value:"2 0 R",configurable:!1,writeable:!0}),Object.defineProperty(this,"stream",{enumerable:!1,configurable:!0,set:function(e){t=e.trim()},get:function(){return t||null}})};h(j,F);var I=function(){F.call(this);var t,e=[];Object.defineProperty(this,"Kids",{enumerable:!1,configurable:!0,get:function(){return 0<e.length?e:void 0}}),Object.defineProperty(this,"Fields",{enumerable:!1,configurable:!1,get:function(){return e}}),Object.defineProperty(this,"DA",{enumerable:!1,configurable:!1,get:function(){if(t)return"("+t+")"},set:function(e){t=e}})};h(I,F);var M=function t(){F.call(this);var e=4;Object.defineProperty(this,"F",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute F supplied.');e=t}}),Object.defineProperty(this,"showWhenPrinted",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(e,3))},set:function(t){!0===Boolean(t)?this.F=v(e,3):this.F=b(e,3)}});var i=0;Object.defineProperty(this,"Ff",{enumerable:!1,configurable:!1,get:function(){return i},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute Ff supplied.');i=t}});var r=[];Object.defineProperty(this,"Rect",{enumerable:!1,configurable:!1,get:function(){if(0!==r.length)return r},set:function(t){r=void 0!==t?t:[]}}),Object.defineProperty(this,"x",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[0])?0:u(r[0])},set:function(t){r[0]=c(t)}}),Object.defineProperty(this,"y",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[1])?0:u(r[1])},set:function(t){r[1]=c(t)}}),Object.defineProperty(this,"width",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[2])?0:u(r[2])},set:function(t){r[2]=c(t)}}),Object.defineProperty(this,"height",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[3])?0:u(r[3])},set:function(t){r[3]=c(t)}});var n="";Object.defineProperty(this,"FT",{enumerable:!0,configurable:!1,get:function(){return n},set:function(t){switch(t){case"/Btn":case"/Tx":case"/Ch":case"/Sig":n=t;break;default:throw new Error('Invalid value "'+t+'" for attribute FT supplied.')}}});var a=null;Object.defineProperty(this,"T",{enumerable:!0,configurable:!1,get:function(){if(!a||a.length<1){if(this instanceof W)return;a="FieldObject"+t.FieldNum++}return"("+o(a)+")"},set:function(t){a=t.toString()}}),Object.defineProperty(this,"fieldName",{configurable:!0,enumerable:!0,get:function(){return a},set:function(t){a=t}});var l="helvetica";Object.defineProperty(this,"fontName",{enumerable:!0,configurable:!0,get:function(){return l},set:function(t){l=t}});var h="normal";Object.defineProperty(this,"fontStyle",{enumerable:!0,configurable:!0,get:function(){return h},set:function(t){h=t}});var f=0;Object.defineProperty(this,"fontSize",{enumerable:!0,configurable:!0,get:function(){return u(f)},set:function(t){f=c(t)}});var d=50;Object.defineProperty(this,"maxFontSize",{enumerable:!0,configurable:!0,get:function(){return u(d)},set:function(t){d=c(t)}});var p="black";Object.defineProperty(this,"color",{enumerable:!0,configurable:!0,get:function(){return p},set:function(t){p=t}});var g="/F1 0 Tf 0 g";Object.defineProperty(this,"DA",{enumerable:!0,configurable:!1,get:function(){if(!(!g||this instanceof W||this instanceof X))return E(g)},set:function(t){t=t.toString(),g=t}});var y=null;Object.defineProperty(this,"DV",{enumerable:!1,configurable:!1,get:function(){if(y)return this instanceof U==0?E(y):y},set:function(t){t=t.toString(),y=this instanceof U==0?"("===t.substr(0,1)?s(t.substr(1,t.length-2)):s(t):t}}),Object.defineProperty(this,"defaultValue",{enumerable:!0,configurable:!0,get:function(){return this instanceof U==1?s(y.substr(1,y.length-1)):y},set:function(t){t=t.toString(),y=this instanceof U==1?"/"+t:t}});var x=null;Object.defineProperty(this,"V",{enumerable:!1,configurable:!1,get:function(){if(x)return this instanceof U==0?E(x):x},set:function(t){t=t.toString(),x=this instanceof U==0?"("===t.substr(0,1)?s(t.substr(1,t.length-2)):s(t):t}}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,get:function(){return this instanceof U==1?s(x.substr(1,x.length-1)):x},set:function(t){t=t.toString(),x=this instanceof U==1?"/"+t:t}}),Object.defineProperty(this,"hasAnnotation",{enumerable:!0,configurable:!0,get:function(){return this.Rect}}),Object.defineProperty(this,"Type",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Annot":null}}),Object.defineProperty(this,"Subtype",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Widget":null}});var w,_=!1;Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,writeable:!0,get:function(){return _},set:function(t){t=Boolean(t),_=t}}),Object.defineProperty(this,"page",{enumerable:!0,configurable:!0,writeable:!0,get:function(){if(w)return w},set:function(t){w=t}}),Object.defineProperty(this,"readOnly",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,1))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,1):this.Ff=b(this.Ff,1)}}),Object.defineProperty(this,"required",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,2))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,2):this.Ff=b(this.Ff,2)}}),Object.defineProperty(this,"noExport",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,3))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,3):this.Ff=b(this.Ff,3)}});var S=null;Object.defineProperty(this,"Q",{enumerable:!0,configurable:!1,get:function(){if(null!==S)return S},set:function(t){if(-1===[0,1,2].indexOf(t))throw new Error('Invalid value "'+t+'" for attribute Q supplied.');S=t}}),Object.defineProperty(this,"textAlign",{get:function(){var t="left";switch(S){case 0:default:t="left";break;case 1:t="center";break;case 2:t="right"}return t},configurable:!0,enumerable:!0,set:function(t){switch(t){case"right":case 2:S=2;break;case"center":case 1:S=1;break;case"left":case 0:default:S=0}}})};h(M,F);var D=function(){M.call(this),this.FT="/Ch",this.V="()",this.fontName="zapfdingbats";var t=0;Object.defineProperty(this,"TI",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"topIndex",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){t=e}});var e=[];Object.defineProperty(this,"Opt",{enumerable:!0,configurable:!1,get:function(){return P(e)},set:function(t){var i,r;r=[],"string"==typeof(i=t)&&(r=function(t,e,i){i||(i=1);for(var r,n=[];r=e.exec(t);)n.push(r[i]);return n}(i,/\((.*?)\)/g)),e=r}}),this.getOptions=function(){return e},this.setOptions=function(t){e=t,this.sort&&e.sort()},this.addOption=function(t){t=(t=t||"").toString(),e.push(t),this.sort&&e.sort()},this.removeOption=function(t,i){for(i=i||!1,t=(t=t||"").toString();-1!==e.indexOf(t)&&(e.splice(e.indexOf(t),1),!1!==i););},Object.defineProperty(this,"combo",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,18))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,18):this.Ff=b(this.Ff,18)}}),Object.defineProperty(this,"edit",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,19))},set:function(t){!0===this.combo&&(!0===Boolean(t)?this.Ff=v(this.Ff,19):this.Ff=b(this.Ff,19))}}),Object.defineProperty(this,"sort",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,20))},set:function(t){!0===Boolean(t)?(this.Ff=v(this.Ff,20),e.sort()):this.Ff=b(this.Ff,20)}}),Object.defineProperty(this,"multiSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,22))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,22):this.Ff=b(this.Ff,22)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,23):this.Ff=b(this.Ff,23)}}),Object.defineProperty(this,"commitOnSelChange",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,27))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,27):this.Ff=b(this.Ff,27)}}),this.hasAppearanceStream=!1};h(D,M);var B=function(){D.call(this),this.fontName="helvetica",this.combo=!1};h(B,D);var R=function(){B.call(this),this.combo=!0};h(R,B);var z=function(){R.call(this),this.edit=!0};h(z,R);var U=function(){M.call(this),this.FT="/Btn",Object.defineProperty(this,"noToggleToOff",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,15))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,15):this.Ff=b(this.Ff,15)}}),Object.defineProperty(this,"radio",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,16))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,16):this.Ff=b(this.Ff,16)}}),Object.defineProperty(this,"pushButton",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,17))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,17):this.Ff=b(this.Ff,17)}}),Object.defineProperty(this,"radioIsUnison",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,26):this.Ff=b(this.Ff,26)}});var t,e={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){if(0!==Object.keys(e).length){var t,i=[];for(t in i.push("<<"),e)i.push("/"+t+" ("+e[t]+")");return i.push(">>"),i.join("\n")}},set:function(t){"object"===r(t)&&(e=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return e.CA||""},set:function(t){"string"==typeof t&&(e.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return t.substr(1,t.length-1)},set:function(e){t="/"+e}})};h(U,M);var q=function(){U.call(this),this.pushButton=!0};h(q,U);var H=function(){U.call(this),this.radio=!0,this.pushButton=!1;var t=[];Object.defineProperty(this,"Kids",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=void 0!==e?e:[]}})};h(H,U);var W=function(){var t,e;M.call(this),Object.defineProperty(this,"Parent",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"optionName",{enumerable:!1,configurable:!0,get:function(){return e},set:function(t){e=t}});var i,n={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t,e=[];for(t in e.push("<<"),n)e.push("/"+t+" ("+n[t]+")");return e.push(">>"),e.join("\n")},set:function(t){"object"===r(t)&&(n=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return n.CA||""},set:function(t){"string"==typeof t&&(n.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return i},set:function(t){i=t}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return i.substr(1,i.length-1)},set:function(t){i="/"+t}}),this.optionName=name,this.caption="l",this.appearanceState="Off",this._AppearanceType=G.RadioButton.Circle,this.appearanceStreamContent=this._AppearanceType.createAppearanceStream(name)};h(W,M),H.prototype.setAppearance=function(t){if(!("createAppearanceStream"in t)||!("getCA"in t))throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");for(var e in this.Kids)if(this.Kids.hasOwnProperty(e)){var i=this.Kids[e];i.appearanceStreamContent=t.createAppearanceStream(i.optionName),i.caption=t.getCA()}},H.prototype.createOption=function(t){this.Kids.length;var e=new W;return e.Parent=this,e.optionName=t,this.Kids.push(e),K.call(this,e),e};var V=function(){U.call(this),this.fontName="zapfdingbats",this.caption="3",this.appearanceState="On",this.value="On",this.textAlign="center",this.appearanceStreamContent=G.CheckBox.createAppearanceStream()};h(V,U);var X=function(){M.call(this),this.FT="/Tx",Object.defineProperty(this,"multiline",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,13))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,13):this.Ff=b(this.Ff,13)}}),Object.defineProperty(this,"fileSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,21))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,21):this.Ff=b(this.Ff,21)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,23):this.Ff=b(this.Ff,23)}}),Object.defineProperty(this,"doNotScroll",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,24))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,24):this.Ff=b(this.Ff,24)}}),Object.defineProperty(this,"comb",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,25))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,25):this.Ff=b(this.Ff,25)}}),Object.defineProperty(this,"richText",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,26):this.Ff=b(this.Ff,26)}});var t=null;Object.defineProperty(this,"MaxLen",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"maxLength",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){Number.isInteger(e)&&(t=e)}}),Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return this.V||this.DV}})};h(X,M);var Y=function(){X.call(this),Object.defineProperty(this,"password",{enumerable:!0,configurable:!0,get:function(){return Boolean(m(this.Ff,14))},set:function(t){!0===Boolean(t)?this.Ff=v(this.Ff,14):this.Ff=b(this.Ff,14)}}),this.password=!0};h(Y,X);var G={CheckBox:{createAppearanceStream:function(){return{N:{On:G.CheckBox.YesNormal},D:{On:G.CheckBox.YesPushDown,Off:G.CheckBox.OffPushDown}}},YesPushDown:function(t){var e=f(t),r=[],n=i.internal.getFont(t.fontName,t.fontStyle).id,o=i.__private__.encodeColorString(t.color),s=w(t,t.caption);return r.push("0.749023 g"),r.push("0 0 "+a(G.internal.getWidth(t))+" "+a(G.internal.getHeight(t))+" re"),r.push("f"),r.push("BMC"),r.push("q"),r.push("0 0 1 rg"),r.push("/"+n+" "+a(s.fontSize)+" Tf "+o),r.push("BT"),r.push(s.text),r.push("ET"),r.push("Q"),r.push("EMC"),e.stream=r.join("\n"),e},YesNormal:function(t){var e=f(t),r=i.internal.getFont(t.fontName,t.fontStyle).id,n=i.__private__.encodeColorString(t.color),o=[],s=G.internal.getHeight(t),l=G.internal.getWidth(t),h=w(t,t.caption);return o.push("1 g"),o.push("0 0 "+a(l)+" "+a(s)+" re"),o.push("f"),o.push("q"),o.push("0 0 1 rg"),o.push("0 0 "+a(l-1)+" "+a(s-1)+" re"),o.push("W"),o.push("n"),o.push("0 g"),o.push("BT"),o.push("/"+r+" "+a(h.fontSize)+" Tf "+n),o.push(h.text),o.push("ET"),o.push("Q"),e.stream=o.join("\n"),e},OffPushDown:function(t){var e=f(t),i=[];return i.push("0.749023 g"),i.push("0 0 "+a(G.internal.getWidth(t))+" "+a(G.internal.getHeight(t))+" re"),i.push("f"),e.stream=i.join("\n"),e}},RadioButton:{Circle:{createAppearanceStream:function(t){var e={D:{Off:G.RadioButton.Circle.OffPushDown},N:{}};return e.N[t]=G.RadioButton.Circle.YesNormal,e.D[t]=G.RadioButton.Circle.YesPushDown,e},getCA:function(){return"l"},YesNormal:function(t){var e=f(t),i=[],r=G.internal.getWidth(t)<=G.internal.getHeight(t)?G.internal.getWidth(t)/4:G.internal.getHeight(t)/4;r=Number((.9*r).toFixed(5));var n=G.internal.Bezier_C,o=Number((r*n).toFixed(5));return i.push("q"),i.push("1 0 0 1 "+l(G.internal.getWidth(t)/2)+" "+l(G.internal.getHeight(t)/2)+" cm"),i.push(r+" 0 m"),i.push(r+" "+o+" "+o+" "+r+" 0 "+r+" c"),i.push("-"+o+" "+r+" -"+r+" "+o+" -"+r+" 0 c"),i.push("-"+r+" -"+o+" -"+o+" -"+r+" 0 -"+r+" c"),i.push(o+" -"+r+" "+r+" -"+o+" "+r+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e},YesPushDown:function(t){var e=f(t),i=[],r=G.internal.getWidth(t)<=G.internal.getHeight(t)?G.internal.getWidth(t)/4:G.internal.getHeight(t)/4,n=(r=Number((.9*r).toFixed(5)),Number((2*r).toFixed(5))),o=Number((n*G.internal.Bezier_C).toFixed(5)),s=Number((r*G.internal.Bezier_C).toFixed(5));return i.push("0.749023 g"),i.push("q"),i.push("1 0 0 1 "+l(G.internal.getWidth(t)/2)+" "+l(G.internal.getHeight(t)/2)+" cm"),i.push(n+" 0 m"),i.push(n+" "+o+" "+o+" "+n+" 0 "+n+" c"),i.push("-"+o+" "+n+" -"+n+" "+o+" -"+n+" 0 c"),i.push("-"+n+" -"+o+" -"+o+" -"+n+" 0 -"+n+" c"),i.push(o+" -"+n+" "+n+" -"+o+" "+n+" 0 c"),i.push("f"),i.push("Q"),i.push("0 g"),i.push("q"),i.push("1 0 0 1 "+l(G.internal.getWidth(t)/2)+" "+l(G.internal.getHeight(t)/2)+" cm"),i.push(r+" 0 m"),i.push(r+" "+s+" "+s+" "+r+" 0 "+r+" c"),i.push("-"+s+" "+r+" -"+r+" "+s+" -"+r+" 0 c"),i.push("-"+r+" -"+s+" -"+s+" -"+r+" 0 -"+r+" c"),i.push(s+" -"+r+" "+r+" -"+s+" "+r+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e},OffPushDown:function(t){var e=f(t),i=[],r=G.internal.getWidth(t)<=G.internal.getHeight(t)?G.internal.getWidth(t)/4:G.internal.getHeight(t)/4,n=(r=Number((.9*r).toFixed(5)),Number((2*r).toFixed(5))),o=Number((n*G.internal.Bezier_C).toFixed(5));return i.push("0.749023 g"),i.push("q"),i.push("1 0 0 1 "+l(G.internal.getWidth(t)/2)+" "+l(G.internal.getHeight(t)/2)+" cm"),i.push(n+" 0 m"),i.push(n+" "+o+" "+o+" "+n+" 0 "+n+" c"),i.push("-"+o+" "+n+" -"+n+" "+o+" -"+n+" 0 c"),i.push("-"+n+" -"+o+" -"+o+" -"+n+" 0 -"+n+" c"),i.push(o+" -"+n+" "+n+" -"+o+" "+n+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e}},Cross:{createAppearanceStream:function(t){var e={D:{Off:G.RadioButton.Cross.OffPushDown},N:{}};return e.N[t]=G.RadioButton.Cross.YesNormal,e.D[t]=G.RadioButton.Cross.YesPushDown,e},getCA:function(){return"8"},YesNormal:function(t){var e=f(t),i=[],r=G.internal.calculateCross(t);return i.push("q"),i.push("1 1 "+a(G.internal.getWidth(t)-2)+" "+a(G.internal.getHeight(t)-2)+" re"),i.push("W"),i.push("n"),i.push(a(r.x1.x)+" "+a(r.x1.y)+" m"),i.push(a(r.x2.x)+" "+a(r.x2.y)+" l"),i.push(a(r.x4.x)+" "+a(r.x4.y)+" m"),i.push(a(r.x3.x)+" "+a(r.x3.y)+" l"),i.push("s"),i.push("Q"),e.stream=i.join("\n"),e},YesPushDown:function(t){var e=f(t),i=G.internal.calculateCross(t),r=[];return r.push("0.749023 g"),r.push("0 0 "+a(G.internal.getWidth(t))+" "+a(G.internal.getHeight(t))+" re"),r.push("f"),r.push("q"),r.push("1 1 "+a(G.internal.getWidth(t)-2)+" "+a(G.internal.getHeight(t)-2)+" re"),r.push("W"),r.push("n"),r.push(a(i.x1.x)+" "+a(i.x1.y)+" m"),r.push(a(i.x2.x)+" "+a(i.x2.y)+" l"),r.push(a(i.x4.x)+" "+a(i.x4.y)+" m"),r.push(a(i.x3.x)+" "+a(i.x3.y)+" l"),r.push("s"),r.push("Q"),e.stream=r.join("\n"),e},OffPushDown:function(t){var e=f(t),i=[];return i.push("0.749023 g"),i.push("0 0 "+a(G.internal.getWidth(t))+" "+a(G.internal.getHeight(t))+" re"),i.push("f"),e.stream=i.join("\n"),e}}},createDefaultAppearanceStream:function(t){var e=i.internal.getFont(t.fontName,t.fontStyle).id,r=i.__private__.encodeColorString(t.color);return"/"+e+" "+t.fontSize+" Tf "+r}};G.internal={Bezier_C:.551915024494,calculateCross:function(t){var e=G.internal.getWidth(t),i=G.internal.getHeight(t),r=Math.min(e,i);return{x1:{x:(e-r)/2,y:(i-r)/2+r},x2:{x:(e-r)/2+r,y:(i-r)/2},x3:{x:(e-r)/2,y:(i-r)/2},x4:{x:(e-r)/2+r,y:(i-r)/2+r}}}},G.internal.getWidth=function(t){var e=0;return"object"===r(t)&&(e=c(t.Rect[2])),e},G.internal.getHeight=function(t){var e=0;return"object"===r(t)&&(e=c(t.Rect[3])),e};var K=t.addField=function(t){if(N.call(this),!(t instanceof M))throw new Error("Invalid argument passed to jsPDF.addField.");return function(t){i.internal.acroformPlugin.printedOut&&(i.internal.acroformPlugin.printedOut=!1,i.internal.acroformPlugin.acroFormDictionaryRoot=null),i.internal.acroformPlugin.acroFormDictionaryRoot||N.call(i),i.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(t)}.call(this,t),t.page=i.internal.getCurrentPageInfo().pageNumber,this};t.addButton=function(t){if(t instanceof U==0)throw new Error("Invalid argument passed to jsPDF.addButton.");return K.call(this,t)},t.addTextField=function(t){if(t instanceof X==0)throw new Error("Invalid argument passed to jsPDF.addTextField.");return K.call(this,t)},t.addChoiceField=function(t){if(t instanceof D==0)throw new Error("Invalid argument passed to jsPDF.addChoiceField.");return K.call(this,t)},"object"==r(e)&&void 0===e.ChoiceField&&void 0===e.ListBox&&void 0===e.ComboBox&&void 0===e.EditBox&&void 0===e.Button&&void 0===e.PushButton&&void 0===e.RadioButton&&void 0===e.CheckBox&&void 0===e.TextField&&void 0===e.PasswordField?(e.ChoiceField=D,e.ListBox=B,e.ComboBox=R,e.EditBox=z,e.Button=U,e.PushButton=q,e.RadioButton=H,e.CheckBox=V,e.TextField=X,e.PasswordField=Y,e.AcroForm={Appearance:G}):console.warn("AcroForm-Classes are not populated into global-namespace, because the class-Names exist already."),t.AcroFormChoiceField=D,t.AcroFormListBox=B,t.AcroFormComboBox=R,t.AcroFormEditBox=z,t.AcroFormButton=U,t.AcroFormPushButton=q,t.AcroFormRadioButton=H,t.AcroFormCheckBox=V,t.AcroFormTextField=X,t.AcroFormPasswordField=Y,t.AcroFormAppearance=G,t.AcroForm={ChoiceField:D,ListBox:B,ComboBox:R,EditBox:z,Button:U,PushButton:q,RadioButton:H,CheckBox:V,TextField:X,PasswordField:Y,Appearance:G}})((window.tmp=pt).API,"undefined"!=typeof window&&window||void 0!==i.g&&i.g),function(t){var e="addImage_",i={PNG:[[137,80,78,71]],TIFF:[[77,77,0,42],[73,73,42,0]],JPEG:[[255,216,255,224,void 0,void 0,74,70,73,70,0],[255,216,255,225,void 0,void 0,69,120,105,102,0,0]],JPEG2000:[[0,0,0,12,106,80,32,32]],GIF87a:[[71,73,70,56,55,97]],GIF89a:[[71,73,70,56,57,97]],BMP:[[66,77],[66,65],[67,73],[67,80],[73,67],[80,84]]},n=t.getImageFileTypeByImageData=function(e,r){var n,o;r=r||"UNKNOWN";var s,a,l,h="UNKNOWN";for(l in t.isArrayBufferView(e)&&(e=t.arrayBufferToBinaryString(e)),i)for(s=i[l],n=0;n<s.length;n+=1){for(a=!0,o=0;o<s[n].length;o+=1)if(void 0!==s[n][o]&&s[n][o]!==e.charCodeAt(o)){a=!1;break}if(!0===a){h=l;break}}return"UNKNOWN"===h&&"UNKNOWN"!==r&&(console.warn('FileType of Image not recognized. Processing image as "'+r+'".'),h=r),h},o=function t(e){for(var i=this.internal.newObject(),r=this.internal.write,n=this.internal.putStream,o=(0,this.internal.getFilters)();-1!==o.indexOf("FlateEncode");)o.splice(o.indexOf("FlateEncode"),1);e.n=i;var s=[];if(s.push({key:"Type",value:"/XObject"}),s.push({key:"Subtype",value:"/Image"}),s.push({key:"Width",value:e.w}),s.push({key:"Height",value:e.h}),e.cs===this.color_spaces.INDEXED?s.push({key:"ColorSpace",value:"[/Indexed /DeviceRGB "+(e.pal.length/3-1)+" "+("smask"in e?i+2:i+1)+" 0 R]"}):(s.push({key:"ColorSpace",value:"/"+e.cs}),e.cs===this.color_spaces.DEVICE_CMYK&&s.push({key:"Decode",value:"[1 0 1 0 1 0 1 0]"})),s.push({key:"BitsPerComponent",value:e.bpc}),"dp"in e&&s.push({key:"DecodeParms",value:"<<"+e.dp+">>"}),"trns"in e&&e.trns.constructor==Array){for(var a="",l=0,h=e.trns.length;l<h;l++)a+=e.trns[l]+" "+e.trns[l]+" ";s.push({key:"Mask",value:"["+a+"]"})}"smask"in e&&s.push({key:"SMask",value:i+1+" 0 R"});var c=void 0!==e.f?["/"+e.f]:void 0;if(n({data:e.data,additionalKeyValues:s,alreadyAppliedFilters:c}),r("endobj"),"smask"in e){var u="/Predictor "+e.p+" /Colors 1 /BitsPerComponent "+e.bpc+" /Columns "+e.w,f={w:e.w,h:e.h,cs:"DeviceGray",bpc:e.bpc,dp:u,data:e.smask};"f"in e&&(f.f=e.f),t.call(this,f)}e.cs===this.color_spaces.INDEXED&&(this.internal.newObject(),n({data:this.arrayBufferToBinaryString(new Uint8Array(e.pal))}),r("endobj"))},s=function(){var t=this.internal.collections[e+"images"];for(var i in t)o.call(this,t[i])},a=function(){var t,i=this.internal.collections[e+"images"],r=this.internal.write;for(var n in i)r("/I"+(t=i[n]).i,t.n,"0","R")},l=function(e){return"function"==typeof t["process"+e.toUpperCase()]},h=function(t){return"object"===r(t)&&1===t.nodeType},c=function(e,i){if("IMG"===e.nodeName&&e.hasAttribute("src")){var r=""+e.getAttribute("src");if(0===r.indexOf("data:image/"))return unescape(r);var n=t.loadFile(r);if(void 0!==n)return btoa(n)}if("CANVAS"===e.nodeName){var o=e;return e.toDataURL("image/jpeg",1)}(o=document.createElement("canvas")).width=e.clientWidth||e.width,o.height=e.clientHeight||e.height;var s=o.getContext("2d");if(!s)throw"addImage requires canvas to be supported by browser.";return s.drawImage(e,0,0,o.width,o.height),o.toDataURL("png"==(""+i).toLowerCase()?"image/png":"image/jpeg")},u=function(t,e){var i;if(e)for(var r in e)if(t===e[r].alias){i=e[r];break}return i};t.color_spaces={DEVICE_RGB:"DeviceRGB",DEVICE_GRAY:"DeviceGray",DEVICE_CMYK:"DeviceCMYK",CAL_GREY:"CalGray",CAL_RGB:"CalRGB",LAB:"Lab",ICC_BASED:"ICCBased",INDEXED:"Indexed",PATTERN:"Pattern",SEPARATION:"Separation",DEVICE_N:"DeviceN"},t.decode={DCT_DECODE:"DCTDecode",FLATE_DECODE:"FlateDecode",LZW_DECODE:"LZWDecode",JPX_DECODE:"JPXDecode",JBIG2_DECODE:"JBIG2Decode",ASCII85_DECODE:"ASCII85Decode",ASCII_HEX_DECODE:"ASCIIHexDecode",RUN_LENGTH_DECODE:"RunLengthDecode",CCITT_FAX_DECODE:"CCITTFaxDecode"},t.image_compression={NONE:"NONE",FAST:"FAST",MEDIUM:"MEDIUM",SLOW:"SLOW"},t.sHashCode=function(t){var e,i=0;if(0===(t=t||"").length)return i;for(e=0;e<t.length;e++)i=(i<<5)-i+t.charCodeAt(e),i|=0;return i},t.isString=function(t){return"string"==typeof t},t.validateStringAsBase64=function(t){(t=t||"").toString().trim();var e=!0;return 0===t.length&&(e=!1),t.length%4!=0&&(e=!1),!1===/^[A-Za-z0-9+\/]+$/.test(t.substr(0,t.length-2))&&(e=!1),!1===/^[A-Za-z0-9\/][A-Za-z0-9+\/]|[A-Za-z0-9+\/]=|==$/.test(t.substr(-2))&&(e=!1),e},t.extractInfoFromBase64DataURI=function(t){return/^data:([\w]+?\/([\w]+?));\S*;*base64,(.+)$/g.exec(t)},t.extractImageFromDataUrl=function(t){var e=(t=t||"").split("base64,"),i=null;if(2===e.length){var r=/^data:(\w*\/\w*);*(charset=[\w=-]*)*;*$/.exec(e[0]);Array.isArray(r)&&(i={mimeType:r[1],charset:r[2],data:e[1]})}return i},t.supportsArrayBuffer=function(){return"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array},t.isArrayBuffer=function(t){return!!this.supportsArrayBuffer()&&t instanceof ArrayBuffer},t.isArrayBufferView=function(t){return!!this.supportsArrayBuffer()&&"undefined"!=typeof Uint32Array&&(t instanceof Int8Array||t instanceof Uint8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)},t.binaryStringToUint8Array=function(t){for(var e=t.length,i=new Uint8Array(e),r=0;r<e;r++)i[r]=t.charCodeAt(r);return i},t.arrayBufferToBinaryString=function(t){if("function"==typeof atob)return atob(this.arrayBufferToBase64(t))},t.arrayBufferToBase64=function(t){for(var e,i="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(t),o=n.byteLength,s=o%3,a=o-s,l=0;l<a;l+=3)i+=r[(16515072&(e=n[l]<<16|n[l+1]<<8|n[l+2]))>>18]+r[(258048&e)>>12]+r[(4032&e)>>6]+r[63&e];return 1==s?i+=r[(252&(e=n[a]))>>2]+r[(3&e)<<4]+"==":2==s&&(i+=r[(64512&(e=n[a]<<8|n[a+1]))>>10]+r[(1008&e)>>4]+r[(15&e)<<2]+"="),i},t.createImageInfo=function(t,e,i,r,n,o,s,a,l,h,c,u,f){var d={alias:a,w:e,h:i,cs:r,bpc:n,i:s,data:t};return o&&(d.f=o),l&&(d.dp=l),h&&(d.trns=h),c&&(d.pal=c),u&&(d.smask=u),f&&(d.p=f),d},t.addImage=function(i,n,o,f,d,p,g,m,v){var b="";if("string"!=typeof n){var y=p;p=d,d=f,f=o,o=n,n=y}if("object"===r(i)&&!h(i)&&"imageData"in i){var x=i;i=x.imageData,n=x.format||n||"UNKNOWN",o=x.x||o||0,f=x.y||f||0,d=x.w||d,p=x.h||p,g=x.alias||g,m=x.compression||m,v=x.rotation||x.angle||v}var w=this.internal.getFilters();if(void 0===m&&-1!==w.indexOf("FlateEncode")&&(m="SLOW"),"string"==typeof i&&(i=unescape(i)),isNaN(o)||isNaN(f))throw console.error("jsPDF.addImage: Invalid coordinates",arguments),new Error("Invalid coordinates passed to jsPDF.addImage");var _,S,C,A,L,T,k,O=function(){var t=this.internal.collections[e+"images"];return t||(this.internal.collections[e+"images"]=t={},this.internal.events.subscribe("putResources",s),this.internal.events.subscribe("putXobjectDict",a)),t}.call(this);if(!((_=u(i,O))||(h(i)&&(i=c(i,n)),(null==(k=g)||0===k.length)&&(g="string"==typeof(T=i)?t.sHashCode(T):t.isArrayBufferView(T)?t.sHashCode(t.arrayBufferToBinaryString(T)):null),_=u(g,O)))){if(this.isString(i)&&(""!==(b=this.convertStringToImageData(i))||void 0!==(b=t.loadFile(i)))&&(i=b),n=this.getImageFileTypeByImageData(i,n),!l(n))throw new Error("addImage does not support files of type '"+n+"', please ensure that a plugin for '"+n+"' support is added.");if(this.supportsArrayBuffer()&&(i instanceof Uint8Array||(S=i,i=this.binaryStringToUint8Array(i))),!(_=this["process"+n.toUpperCase()](i,(L=0,(A=O)&&(L=Object.keys?Object.keys(A).length:function(t){var e=0;for(var i in t)t.hasOwnProperty(i)&&e++;return e}(A)),L),g,((C=m)&&"string"==typeof C&&(C=C.toUpperCase()),C in t.image_compression?C:t.image_compression.NONE),S)))throw new Error("An unknown error occurred whilst processing the image")}return function(t,e,i,r,n,o,s,a){var l=function(t,e,i){return t||e||(e=t=-96),t<0&&(t=-1*i.w*72/t/this.internal.scaleFactor),e<0&&(e=-1*i.h*72/e/this.internal.scaleFactor),0===t&&(t=e*i.w/i.h),0===e&&(e=t*i.h/i.w),[t,e]}.call(this,i,r,n),h=this.internal.getCoordinateString,c=this.internal.getVerticalCoordinateString;if(i=l[0],r=l[1],s[o]=n,a){a*=Math.PI/180;var u=Math.cos(a),f=Math.sin(a),d=function(t){return t.toFixed(4)},p=[d(u),d(f),d(-1*f),d(u),0,0,"cm"]}this.internal.write("q"),a?(this.internal.write([1,"0","0",1,h(t),c(e+r),"cm"].join(" ")),this.internal.write(p.join(" ")),this.internal.write([h(i),"0","0",h(r),"0","0","cm"].join(" "))):this.internal.write([h(i),"0","0",h(r),h(t),c(e+r),"cm"].join(" ")),this.internal.write("/I"+n.i+" Do"),this.internal.write("Q")}.call(this,o,f,d,p,_,_.i,O,v),this},t.convertStringToImageData=function(e){var i,r="";if(this.isString(e)){var n;i=null!==(n=this.extractImageFromDataUrl(e))?n.data:e;try{r=atob(i)}catch(e){throw t.validateStringAsBase64(i)?new Error("atob-Error in jsPDF.convertStringToImageData "+e.message):new Error("Supplied Data is not a valid base64-String jsPDF.convertStringToImageData ")}}return r};var f=function(t,e){return t.subarray(e,e+5)};t.processJPEG=function(t,e,i,r,o,s){var a,l=this.decode.DCT_DECODE;if(!this.isString(t)&&!this.isArrayBuffer(t)&&!this.isArrayBufferView(t))return null;if(this.isString(t)&&(a=function(t){var e;if("JPEG"!==n(t))throw new Error("getJpegSize requires a binary string jpeg file");for(var i=256*t.charCodeAt(4)+t.charCodeAt(5),r=4,o=t.length;r<o;){if(r+=i,255!==t.charCodeAt(r))throw new Error("getJpegSize could not find the size of the image");if(192===t.charCodeAt(r+1)||193===t.charCodeAt(r+1)||194===t.charCodeAt(r+1)||195===t.charCodeAt(r+1)||196===t.charCodeAt(r+1)||197===t.charCodeAt(r+1)||198===t.charCodeAt(r+1)||199===t.charCodeAt(r+1))return e=256*t.charCodeAt(r+5)+t.charCodeAt(r+6),[256*t.charCodeAt(r+7)+t.charCodeAt(r+8),e,t.charCodeAt(r+9)];r+=2,i=256*t.charCodeAt(r)+t.charCodeAt(r+1)}}(t)),this.isArrayBuffer(t)&&(t=new Uint8Array(t)),this.isArrayBufferView(t)&&(a=function(t){if(65496!=(t[0]<<8|t[1]))throw new Error("Supplied data is not a JPEG");for(var e,i=t.length,r=(t[4]<<8)+t[5],n=4;n<i;){if(r=((e=f(t,n+=r))[2]<<8)+e[3],(192===e[1]||194===e[1])&&255===e[0]&&7<r)return{width:((e=f(t,n+5))[2]<<8)+e[3],height:(e[0]<<8)+e[1],numcomponents:e[4]};n+=2}throw new Error("getJpegSizeFromBytes could not find the size of the image")}(t),t=o||this.arrayBufferToBinaryString(t)),void 0===s)switch(a.numcomponents){case 1:s=this.color_spaces.DEVICE_GRAY;break;case 4:s=this.color_spaces.DEVICE_CMYK;break;default:case 3:s=this.color_spaces.DEVICE_RGB}return this.createImageInfo(t,a.width,a.height,s,8,l,e,i)},t.processJPG=function(){return this.processJPEG.apply(this,arguments)},t.getImageProperties=function(e){var i,r,n="";if(h(e)&&(e=c(e)),this.isString(e)&&(""!==(n=this.convertStringToImageData(e))||void 0!==(n=t.loadFile(e)))&&(e=n),r=this.getImageFileTypeByImageData(e),!l(r))throw new Error("addImage does not support files of type '"+r+"', please ensure that a plugin for '"+r+"' support is added.");if(this.supportsArrayBuffer()&&(e instanceof Uint8Array||(e=this.binaryStringToUint8Array(e))),!(i=this["process"+r.toUpperCase()](e)))throw new Error("An unknown error occurred whilst processing the image");return{fileType:r,width:i.w,height:i.h,colorSpace:i.cs,compressionMode:i.f,bitsPerComponent:i.bpc}}}(pt.API),s=pt.API,pt.API.events.push(["addPage",function(t){this.internal.getPageInfo(t.pageNumber).pageContext.annotations=[]}]),s.events.push(["putPage",function(t){for(var e=this.internal.getPageInfoByObjId(t.objId),i=t.pageContext.annotations,r=function(t){if(void 0!==t&&""!=t)return!0},n=!1,o=0;o<i.length&&!n;o++)switch((l=i[o]).type){case"link":if(r(l.options.url)||r(l.options.pageNumber)){n=!0;break}case"reference":case"text":case"freetext":n=!0}if(0!=n){this.internal.write("/Annots ["),this.internal.pageSize.height;var s=this.internal.getCoordinateString,a=this.internal.getVerticalCoordinateString;for(o=0;o<i.length;o++){var l;switch((l=i[o]).type){case"reference":this.internal.write(" "+l.object.objId+" 0 R ");break;case"text":var h=this.internal.newAdditionalObject(),c=this.internal.newAdditionalObject(),u=l.title||"Note";m="<</Type /Annot /Subtype /Text "+(d="/Rect ["+s(l.bounds.x)+" "+a(l.bounds.y+l.bounds.h)+" "+s(l.bounds.x+l.bounds.w)+" "+a(l.bounds.y)+"] ")+"/Contents ("+l.contents+")",m+=" /Popup "+c.objId+" 0 R",m+=" /P "+e.objId+" 0 R",m+=" /T ("+u+") >>",h.content=m;var f=h.objId+" 0 R";m="<</Type /Annot /Subtype /Popup "+(d="/Rect ["+s(l.bounds.x+30)+" "+a(l.bounds.y+l.bounds.h)+" "+s(l.bounds.x+l.bounds.w+30)+" "+a(l.bounds.y)+"] ")+" /Parent "+f,l.open&&(m+=" /Open true"),m+=" >>",c.content=m,this.internal.write(h.objId,"0 R",c.objId,"0 R");break;case"freetext":var d="/Rect ["+s(l.bounds.x)+" "+a(l.bounds.y)+" "+s(l.bounds.x+l.bounds.w)+" "+a(l.bounds.y+l.bounds.h)+"] ",p=l.color||"#000000";m="<</Type /Annot /Subtype /FreeText "+d+"/Contents ("+l.contents+")",m+=" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#"+p+")",m+=" /Border [0 0 0]",m+=" >>",this.internal.write(m);break;case"link":if(l.options.name){var g=this.annotations._nameMap[l.options.name];l.options.pageNumber=g.page,l.options.top=g.y}else l.options.top||(l.options.top=0);d="/Rect ["+s(l.x)+" "+a(l.y)+" "+s(l.x+l.w)+" "+a(l.y+l.h)+"] ";var m="";if(l.options.url)m="<</Type /Annot /Subtype /Link "+d+"/Border [0 0 0] /A <</S /URI /URI ("+l.options.url+") >>";else if(l.options.pageNumber)switch(m="<</Type /Annot /Subtype /Link "+d+"/Border [0 0 0] /Dest ["+this.internal.getPageInfo(l.options.pageNumber).objId+" 0 R",l.options.magFactor=l.options.magFactor||"XYZ",l.options.magFactor){case"Fit":m+=" /Fit]";break;case"FitH":m+=" /FitH "+l.options.top+"]";break;case"FitV":l.options.left=l.options.left||0,m+=" /FitV "+l.options.left+"]";break;case"XYZ":default:var v=a(l.options.top);l.options.left=l.options.left||0,void 0===l.options.zoom&&(l.options.zoom=0),m+=" /XYZ "+l.options.left+" "+v+" "+l.options.zoom+"]"}""!=m&&(m+=" >>",this.internal.write(m))}}this.internal.write("]")}}]),s.createAnnotation=function(t){var e=this.internal.getCurrentPageInfo();switch(t.type){case"link":this.link(t.bounds.x,t.bounds.y,t.bounds.w,t.bounds.h,t);break;case"text":case"freetext":e.pageContext.annotations.push(t)}},s.link=function(t,e,i,r,n){this.internal.getCurrentPageInfo().pageContext.annotations.push({x:t,y:e,w:i,h:r,options:n,type:"link"})},s.textWithLink=function(t,e,i,r){var n=this.getTextWidth(t),o=this.internal.getLineHeight()/this.internal.scaleFactor;return this.text(t,e,i),i+=.2*o,this.link(e,i-o,n,o,r),n},s.getTextWidth=function(t){var e=this.internal.getFontSize();return this.getStringUnitWidth(t)*e/this.internal.scaleFactor},function(t){var e={1569:[65152],1570:[65153,65154],1571:[65155,65156],1572:[65157,65158],1573:[65159,65160],1574:[65161,65162,65163,65164],1575:[65165,65166],1576:[65167,65168,65169,65170],1577:[65171,65172],1578:[65173,65174,65175,65176],1579:[65177,65178,65179,65180],1580:[65181,65182,65183,65184],1581:[65185,65186,65187,65188],1582:[65189,65190,65191,65192],1583:[65193,65194],1584:[65195,65196],1585:[65197,65198],1586:[65199,65200],1587:[65201,65202,65203,65204],1588:[65205,65206,65207,65208],1589:[65209,65210,65211,65212],1590:[65213,65214,65215,65216],1591:[65217,65218,65219,65220],1592:[65221,65222,65223,65224],1593:[65225,65226,65227,65228],1594:[65229,65230,65231,65232],1601:[65233,65234,65235,65236],1602:[65237,65238,65239,65240],1603:[65241,65242,65243,65244],1604:[65245,65246,65247,65248],1605:[65249,65250,65251,65252],1606:[65253,65254,65255,65256],1607:[65257,65258,65259,65260],1608:[65261,65262],1609:[65263,65264,64488,64489],1610:[65265,65266,65267,65268],1649:[64336,64337],1655:[64477],1657:[64358,64359,64360,64361],1658:[64350,64351,64352,64353],1659:[64338,64339,64340,64341],1662:[64342,64343,64344,64345],1663:[64354,64355,64356,64357],1664:[64346,64347,64348,64349],1667:[64374,64375,64376,64377],1668:[64370,64371,64372,64373],1670:[64378,64379,64380,64381],1671:[64382,64383,64384,64385],1672:[64392,64393],1676:[64388,64389],1677:[64386,64387],1678:[64390,64391],1681:[64396,64397],1688:[64394,64395],1700:[64362,64363,64364,64365],1702:[64366,64367,64368,64369],1705:[64398,64399,64400,64401],1709:[64467,64468,64469,64470],1711:[64402,64403,64404,64405],1713:[64410,64411,64412,64413],1715:[64406,64407,64408,64409],1722:[64414,64415],1723:[64416,64417,64418,64419],1726:[64426,64427,64428,64429],1728:[64420,64421],1729:[64422,64423,64424,64425],1733:[64480,64481],1734:[64473,64474],1735:[64471,64472],1736:[64475,64476],1737:[64482,64483],1739:[64478,64479],1740:[64508,64509,64510,64511],1744:[64484,64485,64486,64487],1746:[64430,64431],1747:[64432,64433]},i={65247:{65154:65269,65156:65271,65160:65273,65166:65275},65248:{65154:65270,65156:65272,65160:65274,65166:65276},65165:{65247:{65248:{65258:65010}}},1617:{1612:64606,1613:64607,1614:64608,1615:64609,1616:64610}},r={1612:64606,1613:64607,1614:64608,1615:64609,1616:64610},n=[1570,1571,1573,1575];t.__arabicParser__={};var o=t.__arabicParser__.isInArabicSubstitutionA=function(t){return void 0!==e[t.charCodeAt(0)]},s=t.__arabicParser__.isArabicLetter=function(t){return"string"==typeof t&&/^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t)},a=t.__arabicParser__.isArabicEndLetter=function(t){return s(t)&&o(t)&&e[t.charCodeAt(0)].length<=2},l=t.__arabicParser__.isArabicAlfLetter=function(t){return s(t)&&0<=n.indexOf(t.charCodeAt(0))},h=(t.__arabicParser__.arabicLetterHasIsolatedForm=function(t){return s(t)&&o(t)&&1<=e[t.charCodeAt(0)].length},t.__arabicParser__.arabicLetterHasFinalForm=function(t){return s(t)&&o(t)&&2<=e[t.charCodeAt(0)].length}),c=(t.__arabicParser__.arabicLetterHasInitialForm=function(t){return s(t)&&o(t)&&3<=e[t.charCodeAt(0)].length},t.__arabicParser__.arabicLetterHasMedialForm=function(t){return s(t)&&o(t)&&4==e[t.charCodeAt(0)].length}),u=t.__arabicParser__.resolveLigatures=function(t){var e=0,r=i,n=0,o="",s=0;for(e=0;e<t.length;e+=1)void 0!==r[t.charCodeAt(e)]?(s++,"number"==typeof(r=r[t.charCodeAt(e)])&&(n=-1!==(n=f(t.charAt(e),t.charAt(e-s),t.charAt(e+1)))?n:0,o+=String.fromCharCode(r),r=i,s=0),e===t.length-1&&(r=i,o+=t.charAt(e-(s-1)),e-=s-1,s=0)):(r=i,o+=t.charAt(e-s),e-=s,s=0);return o},f=(t.__arabicParser__.isArabicDiacritic=function(t){return void 0!==t&&void 0!==r[t.charCodeAt(0)]},t.__arabicParser__.getCorrectForm=function(t,e,i){return s(t)?!1===o(t)?-1:!h(t)||!s(e)&&!s(i)||!s(i)&&a(e)||a(t)&&!s(e)||a(t)&&l(e)||a(t)&&a(e)?0:c(t)&&s(e)&&!a(e)&&s(i)&&h(i)?3:a(t)||!s(i)?1:2:-1}),d=t.__arabicParser__.processArabic=t.processArabic=function(t){var i=0,r=0,n=0,o="",a="",l="",h=(t=t||"").split("\\s+"),c=[];for(i=0;i<h.length;i+=1){for(c.push(""),r=0;r<h[i].length;r+=1)o=h[i][r],a=h[i][r-1],l=h[i][r+1],s(o)?(n=f(o,a,l),c[i]+=-1!==n?String.fromCharCode(e[o.charCodeAt(0)][n]):o):c[i]+=o;c[i]=u(c[i])}return c.join(" ")};t.events.push(["preProcessText",function(t){var e=t.text,i=(t.x,t.y,t.options||{}),r=(t.mutex,i.lang,[]);if("[object Array]"===Object.prototype.toString.call(e)){var n=0;for(r=[],n=0;n<e.length;n+=1)"[object Array]"===Object.prototype.toString.call(e[n])?r.push([d(e[n][0]),e[n][1],e[n][2]]):r.push([d(e[n])]);t.text=r}else t.text=d(e)}])}(pt.API),pt.API.autoPrint=function(t){var e;switch((t=t||{}).variant=t.variant||"non-conform",t.variant){case"javascript":this.addJS("print({});");break;case"non-conform":default:this.internal.events.subscribe("postPutResources",(function(){e=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /Named"),this.internal.out("/Type /Action"),this.internal.out("/N /Print"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){this.internal.out("/OpenAction "+e+" 0 R")}))}return this},a=pt.API,(l=function(){var t=void 0;Object.defineProperty(this,"pdf",{get:function(){return t},set:function(e){t=e}});var e=150;Object.defineProperty(this,"width",{get:function(){return e},set:function(t){e=isNaN(t)||!1===Number.isInteger(t)||t<0?150:t,this.getContext("2d").pageWrapXEnabled&&(this.getContext("2d").pageWrapX=e+1)}});var i=300;Object.defineProperty(this,"height",{get:function(){return i},set:function(t){i=isNaN(t)||!1===Number.isInteger(t)||t<0?300:t,this.getContext("2d").pageWrapYEnabled&&(this.getContext("2d").pageWrapY=i+1)}});var r=[];Object.defineProperty(this,"childNodes",{get:function(){return r},set:function(t){r=t}});var n={};Object.defineProperty(this,"style",{get:function(){return n},set:function(t){n=t}}),Object.defineProperty(this,"parentNode",{get:function(){return!1}})}).prototype.getContext=function(t,e){var i;if("2d"!==(t=t||"2d"))return null;for(i in e)this.pdf.context2d.hasOwnProperty(i)&&(this.pdf.context2d[i]=e[i]);return(this.pdf.context2d._canvas=this).pdf.context2d},l.prototype.toDataURL=function(){throw new Error("toDataURL is not implemented.")},a.events.push(["initialized",function(){this.canvas=new l,this.canvas.pdf=this}]),h=pt.API,u={x:void 0,y:void 0,w:void 0,h:void 0,ln:void 0},f=1,d=function(t,e,i,r,n){u={x:t,y:e,w:i,h:r,ln:n}},p=function(){return u},g={left:0,top:0,bottom:0},h.setHeaderFunction=function(t){c=t},h.getTextDimensions=function(t,e){var i=this.table_font_size||this.internal.getFontSize(),r=(this.internal.getFont().fontStyle,(e=e||{}).scaleFactor||this.internal.scaleFactor),n=0,o=0,s=0;if("string"==typeof t)0!=(n=this.getStringUnitWidth(t)*i)&&(o=1);else{if("[object Array]"!==Object.prototype.toString.call(t))throw new Error("getTextDimensions expects text-parameter to be of type String or an Array of Strings.");for(var a=0;a<t.length;a++)n<(s=this.getStringUnitWidth(t[a])*i)&&(n=s);0!==n&&(o=t.length)}return{w:n/=r,h:Math.max((o*i*this.getLineHeightFactor()-i*(this.getLineHeightFactor()-1))/r,0)}},h.cellAddPage=function(){var t=this.margins||g;this.addPage(),d(t.left,t.top,void 0,void 0),f+=1},h.cellInitialize=function(){u={x:void 0,y:void 0,w:void 0,h:void 0,ln:void 0},f=1},h.cell=function(t,e,i,r,n,o,s){var a=p(),l=!1;if(void 0!==a.ln)if(a.ln===o)t=a.x+a.w,e=a.y;else{var h=this.margins||g;a.y+a.h+r+13>=this.internal.pageSize.getHeight()-h.bottom&&(this.cellAddPage(),l=!0,this.printHeaders&&this.tableHeaderRow&&this.printHeaderRow(o,!0)),e=p().y+p().h,l&&(e=23)}if(void 0!==n[0])if(this.printingHeaderRow?this.rect(t,e,i,r,"FD"):this.rect(t,e,i,r),"right"===s){n instanceof Array||(n=[n]);for(var c=0;c<n.length;c++){var u=n[c],f=this.getStringUnitWidth(u)*this.internal.getFontSize()/this.internal.scaleFactor;this.text(u,t+i-f-3,e+this.internal.getLineHeight()*(c+1))}}else this.text(n,t+3,e+this.internal.getLineHeight());return d(t,e,i,r,o),this},h.arrayMax=function(t,e){var i,r,n,o=t[0];for(i=0,r=t.length;i<r;i+=1)n=t[i],e?-1===e(o,n)&&(o=n):o<n&&(o=n);return o},h.table=function(t,e,i,r,n){if(!i)throw"No data for PDF table";var o,s,a,l,c,d,p,m,v,b,y=[],x=[],w={},_={},S=[],C=[],A=!1,L=!0,T=12,k=g;if(k.width=this.internal.pageSize.getWidth(),n&&(!0===n.autoSize&&(A=!0),!1===n.printHeaders&&(L=!1),n.fontSize&&(T=n.fontSize),n.css&&void 0!==n.css["font-size"]&&(T=16*n.css["font-size"]),n.margins&&(k=n.margins)),this.lnMod=0,u={x:void 0,y:void 0,w:void 0,h:void 0,ln:void 0},f=1,this.printHeaders=L,this.margins=k,this.setFontSize(T),this.table_font_size=T,null==r)y=Object.keys(i[0]);else if(r[0]&&"string"!=typeof r[0])for(s=0,a=r.length;s<a;s+=1)o=r[s],y.push(o.name),x.push(o.prompt),_[o.name]=o.width*(19.049976/25.4);else y=r;if(A)for(b=function(t){return t[o]},s=0,a=y.length;s<a;s+=1){for(w[o=y[s]]=i.map(b),S.push(this.getTextDimensions(x[s]||o,{scaleFactor:1}).w),p=0,l=(d=w[o]).length;p<l;p+=1)c=d[p],S.push(this.getTextDimensions(c,{scaleFactor:1}).w);_[o]=h.arrayMax(S),S=[]}if(L){var O=this.calculateLineHeight(y,_,x.length?x:y);for(s=0,a=y.length;s<a;s+=1)o=y[s],C.push([t,e,_[o],O,String(x.length?x[s]:o)]);this.setTableHeaderRow(C),this.printHeaderRow(1,!1)}for(s=0,a=i.length;s<a;s+=1)for(m=i[s],O=this.calculateLineHeight(y,_,m),p=0,v=y.length;p<v;p+=1)o=y[p],this.cell(t,e,_[o],O,m[o],s+2,o.align);return this.lastCellPos=u,this.table_x=t,this.table_y=e,this},h.calculateLineHeight=function(t,e,i){for(var r,n=0,o=0;o<t.length;o++){i[r=t[o]]=this.splitTextToSize(String(i[r]),e[r]-3);var s=this.internal.getLineHeight()*i[r].length+3;n<s&&(n=s)}return n},h.setTableHeaderRow=function(t){this.tableHeaderRow=t},h.printHeaderRow=function(t,e){if(!this.tableHeaderRow)throw"Property tableHeaderRow does not exist.";var i,r,n,o;if(this.printingHeaderRow=!0,void 0!==c){var s=c(this,f);d(s[0],s[1],s[2],s[3],-1)}this.setFontStyle("bold");var a=[];for(n=0,o=this.tableHeaderRow.length;n<o;n+=1)this.setFillColor(200,200,200),i=this.tableHeaderRow[n],e&&(this.margins.top=13,i[1]=this.margins&&this.margins.top||0,a.push(i)),r=[].concat(i),this.cell.apply(this,r.concat(t));0<a.length&&this.setTableHeaderRow(a),this.setFontStyle("normal"),this.printingHeaderRow=!1},function(t,e){var i,n,o,s,a,l=function(t){return t=t||{},this.isStrokeTransparent=t.isStrokeTransparent||!1,this.strokeOpacity=t.strokeOpacity||1,this.strokeStyle=t.strokeStyle||"#000000",this.fillStyle=t.fillStyle||"#000000",this.isFillTransparent=t.isFillTransparent||!1,this.fillOpacity=t.fillOpacity||1,this.font=t.font||"10px sans-serif",this.textBaseline=t.textBaseline||"alphabetic",this.textAlign=t.textAlign||"left",this.lineWidth=t.lineWidth||1,this.lineJoin=t.lineJoin||"miter",this.lineCap=t.lineCap||"butt",this.path=t.path||[],this.transform=void 0!==t.transform?t.transform.clone():new I,this.globalCompositeOperation=t.globalCompositeOperation||"normal",this.globalAlpha=t.globalAlpha||1,this.clip_path=t.clip_path||[],this.currentPoint=t.currentPoint||new F,this.miterLimit=t.miterLimit||10,this.lastPoint=t.lastPoint||new F,this.ignoreClearRect="boolean"!=typeof t.ignoreClearRect||t.ignoreClearRect,this};t.events.push(["initialized",function(){this.context2d=new h(this),i=this.internal.f2,this.internal.f3,n=this.internal.getCoordinateString,o=this.internal.getVerticalCoordinateString,s=this.internal.getHorizontalCoordinate,a=this.internal.getVerticalCoordinate}]);var h=function(t){Object.defineProperty(this,"canvas",{get:function(){return{parentNode:!1,style:!1}}}),Object.defineProperty(this,"pdf",{get:function(){return t}});var e=!1;Object.defineProperty(this,"pageWrapXEnabled",{get:function(){return e},set:function(t){e=Boolean(t)}});var i=!1;Object.defineProperty(this,"pageWrapYEnabled",{get:function(){return i},set:function(t){i=Boolean(t)}});var r=0;Object.defineProperty(this,"posX",{get:function(){return r},set:function(t){isNaN(t)||(r=t)}});var n=0;Object.defineProperty(this,"posY",{get:function(){return n},set:function(t){isNaN(t)||(n=t)}});var o=!1;Object.defineProperty(this,"autoPaging",{get:function(){return o},set:function(t){o=Boolean(t)}});var s=0;Object.defineProperty(this,"lastBreak",{get:function(){return s},set:function(t){s=t}});var a=[];Object.defineProperty(this,"pageBreaks",{get:function(){return a},set:function(t){a=t}});var h=new l;Object.defineProperty(this,"ctx",{get:function(){return h},set:function(t){t instanceof l&&(h=t)}}),Object.defineProperty(this,"path",{get:function(){return h.path},set:function(t){h.path=t}});var u=[];Object.defineProperty(this,"ctxStack",{get:function(){return u},set:function(t){u=t}}),Object.defineProperty(this,"fillStyle",{get:function(){return this.ctx.fillStyle},set:function(t){var e;e=c(t),this.ctx.fillStyle=e.style,this.ctx.isFillTransparent=0===e.a,this.ctx.fillOpacity=e.a,this.pdf.setFillColor(e.r,e.g,e.b,{a:e.a}),this.pdf.setTextColor(e.r,e.g,e.b,{a:e.a})}}),Object.defineProperty(this,"strokeStyle",{get:function(){return this.ctx.strokeStyle},set:function(t){var e=c(t);this.ctx.strokeStyle=e.style,this.ctx.isStrokeTransparent=0===e.a,this.ctx.strokeOpacity=e.a,0===e.a?this.pdf.setDrawColor(255,255,255):(e.a,this.pdf.setDrawColor(e.r,e.g,e.b))}}),Object.defineProperty(this,"lineCap",{get:function(){return this.ctx.lineCap},set:function(t){-1!==["butt","round","square"].indexOf(t)&&(this.ctx.lineCap=t,this.pdf.setLineCap(t))}}),Object.defineProperty(this,"lineWidth",{get:function(){return this.ctx.lineWidth},set:function(t){isNaN(t)||(this.ctx.lineWidth=t,this.pdf.setLineWidth(t))}}),Object.defineProperty(this,"lineJoin",{get:function(){return this.ctx.lineJoin},set:function(t){-1!==["bevel","round","miter"].indexOf(t)&&(this.ctx.lineJoin=t,this.pdf.setLineJoin(t))}}),Object.defineProperty(this,"miterLimit",{get:function(){return this.ctx.miterLimit},set:function(t){isNaN(t)||(this.ctx.miterLimit=t,this.pdf.setMiterLimit(t))}}),Object.defineProperty(this,"textBaseline",{get:function(){return this.ctx.textBaseline},set:function(t){this.ctx.textBaseline=t}}),Object.defineProperty(this,"textAlign",{get:function(){return this.ctx.textAlign},set:function(t){-1!==["right","end","center","left","start"].indexOf(t)&&(this.ctx.textAlign=t)}}),Object.defineProperty(this,"font",{get:function(){return this.ctx.font},set:function(t){var e;if(this.ctx.font=t,null!==(e=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))){var i=e[1],r=(e[2],e[3]),n=e[4],o=e[5],s=e[6];n="px"===o?Math.floor(parseFloat(n)):"em"===o?Math.floor(parseFloat(n)*this.pdf.getFontSize()):Math.floor(parseFloat(n)),this.pdf.setFontSize(n);var a="";("bold"===r||700<=parseInt(r,10)||"bold"===i)&&(a="bold"),"italic"===i&&(a+="italic"),0===a.length&&(a="normal");for(var l="",h=s.toLowerCase().replace(/"|'/g,"").split(/\s*,\s*/),c={arial:"Helvetica",verdana:"Helvetica",helvetica:"Helvetica","sans-serif":"Helvetica",fixed:"Courier",monospace:"Courier",terminal:"Courier",courier:"Courier",times:"Times",cursive:"Times",fantasy:"Times",serif:"Times"},u=0;u<h.length;u++){if(void 0!==this.pdf.internal.getFont(h[u],a,{noFallback:!0,disableWarning:!0})){l=h[u];break}if("bolditalic"===a&&void 0!==this.pdf.internal.getFont(h[u],"bold",{noFallback:!0,disableWarning:!0}))l=h[u],a="bold";else if(void 0!==this.pdf.internal.getFont(h[u],"normal",{noFallback:!0,disableWarning:!0})){l=h[u],a="normal";break}}if(""===l)for(u=0;u<h.length;u++)if(c[h[u]]){l=c[h[u]];break}l=""===l?"Times":l,this.pdf.setFont(l,a)}}}),Object.defineProperty(this,"globalCompositeOperation",{get:function(){return this.ctx.globalCompositeOperation},set:function(t){this.ctx.globalCompositeOperation=t}}),Object.defineProperty(this,"globalAlpha",{get:function(){return this.ctx.globalAlpha},set:function(t){this.ctx.globalAlpha=t}}),Object.defineProperty(this,"ignoreClearRect",{get:function(){return this.ctx.ignoreClearRect},set:function(t){this.ctx.ignoreClearRect=Boolean(t)}})};h.prototype.fill=function(){m.call(this,"fill",!1)},h.prototype.stroke=function(){m.call(this,"stroke",!1)},h.prototype.beginPath=function(){this.path=[{type:"begin"}]},h.prototype.moveTo=function(t,e){if(isNaN(t)||isNaN(e))throw console.error("jsPDF.context2d.moveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.moveTo");var i=this.ctx.transform.applyToPoint(new F(t,e));this.path.push({type:"mt",x:i.x,y:i.y}),this.ctx.lastPoint=new F(t,e)},h.prototype.closePath=function(){var t=new F(0,0),e=0;for(e=this.path.length-1;-1!==e;e--)if("begin"===this.path[e].type&&"object"===r(this.path[e+1])&&"number"==typeof this.path[e+1].x){t=new F(this.path[e+1].x,this.path[e+1].y),this.path.push({type:"lt",x:t.x,y:t.y});break}"object"===r(this.path[e+2])&&"number"==typeof this.path[e+2].x&&this.path.push(JSON.parse(JSON.stringify(this.path[e+2]))),this.path.push({type:"close"}),this.ctx.lastPoint=new F(t.x,t.y)},h.prototype.lineTo=function(t,e){if(isNaN(t)||isNaN(e))throw console.error("jsPDF.context2d.lineTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.lineTo");var i=this.ctx.transform.applyToPoint(new F(t,e));this.path.push({type:"lt",x:i.x,y:i.y}),this.ctx.lastPoint=new F(i.x,i.y)},h.prototype.clip=function(){this.ctx.clip_path=JSON.parse(JSON.stringify(this.path)),m.call(this,null,!0)},h.prototype.quadraticCurveTo=function(t,e,i,r){if(isNaN(i)||isNaN(r)||isNaN(t)||isNaN(e))throw console.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");var n=this.ctx.transform.applyToPoint(new F(i,r)),o=this.ctx.transform.applyToPoint(new F(t,e));this.path.push({type:"qct",x1:o.x,y1:o.y,x:n.x,y:n.y}),this.ctx.lastPoint=new F(n.x,n.y)},h.prototype.bezierCurveTo=function(t,e,i,r,n,o){if(isNaN(n)||isNaN(o)||isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw console.error("jsPDF.context2d.bezierCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");var s=this.ctx.transform.applyToPoint(new F(n,o)),a=this.ctx.transform.applyToPoint(new F(t,e)),l=this.ctx.transform.applyToPoint(new F(i,r));this.path.push({type:"bct",x1:a.x,y1:a.y,x2:l.x,y2:l.y,x:s.x,y:s.y}),this.ctx.lastPoint=new F(s.x,s.y)},h.prototype.arc=function(t,e,i,r,n,o){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||isNaN(n))throw console.error("jsPDF.context2d.arc: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.arc");if(o=Boolean(o),!this.ctx.transform.isIdentity){var s=this.ctx.transform.applyToPoint(new F(t,e));t=s.x,e=s.y;var a=this.ctx.transform.applyToPoint(new F(0,i)),l=this.ctx.transform.applyToPoint(new F(0,0));i=Math.sqrt(Math.pow(a.x-l.x,2)+Math.pow(a.y-l.y,2))}Math.abs(n-r)>=2*Math.PI&&(r=0,n=2*Math.PI),this.path.push({type:"arc",x:t,y:e,radius:i,startAngle:r,endAngle:n,counterclockwise:o})},h.prototype.arcTo=function(t,e,i,r,n){throw new Error("arcTo not implemented.")},h.prototype.rect=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw console.error("jsPDF.context2d.rect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rect");this.moveTo(t,e),this.lineTo(t+i,e),this.lineTo(t+i,e+r),this.lineTo(t,e+r),this.lineTo(t,e),this.lineTo(t+i,e),this.lineTo(t,e)},h.prototype.fillRect=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw console.error("jsPDF.context2d.fillRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillRect");if(!u.call(this)){var n={};"butt"!==this.lineCap&&(n.lineCap=this.lineCap,this.lineCap="butt"),"miter"!==this.lineJoin&&(n.lineJoin=this.lineJoin,this.lineJoin="miter"),this.beginPath(),this.rect(t,e,i,r),this.fill(),n.hasOwnProperty("lineCap")&&(this.lineCap=n.lineCap),n.hasOwnProperty("lineJoin")&&(this.lineJoin=n.lineJoin)}},h.prototype.strokeRect=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw console.error("jsPDF.context2d.strokeRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");f.call(this)||(this.beginPath(),this.rect(t,e,i,r),this.stroke())},h.prototype.clearRect=function(t,e,i,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r))throw console.error("jsPDF.context2d.clearRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.clearRect");this.ignoreClearRect||(this.fillStyle="#ffffff",this.fillRect(t,e,i,r))},h.prototype.save=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,i=0;i<this.pdf.internal.getNumberOfPages();i++)this.pdf.setPage(i+1),this.pdf.internal.out("q");if(this.pdf.setPage(e),t){this.ctx.fontSize=this.pdf.internal.getFontSize();var r=new l(this.ctx);this.ctxStack.push(this.ctx),this.ctx=r}},h.prototype.restore=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,i=0;i<this.pdf.internal.getNumberOfPages();i++)this.pdf.setPage(i+1),this.pdf.internal.out("Q");this.pdf.setPage(e),t&&0!==this.ctxStack.length&&(this.ctx=this.ctxStack.pop(),this.fillStyle=this.ctx.fillStyle,this.strokeStyle=this.ctx.strokeStyle,this.font=this.ctx.font,this.lineCap=this.ctx.lineCap,this.lineWidth=this.ctx.lineWidth,this.lineJoin=this.ctx.lineJoin)},h.prototype.toDataURL=function(){throw new Error("toDataUrl not implemented.")};var c=function(t){var e,i,r,n;if(!0===t.isCanvasGradient&&(t=t.getColor()),!t)return{r:0,g:0,b:0,a:0,style:t};if(/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t))n=r=i=e=0;else{var o=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);if(null!==o)e=parseInt(o[1]),i=parseInt(o[2]),r=parseInt(o[3]),n=1;else if(null!==(o=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/.exec(t)))e=parseInt(o[1]),i=parseInt(o[2]),r=parseInt(o[3]),n=parseFloat(o[4]);else{if(n=1,"string"==typeof t&&"#"!==t.charAt(0)){var s=new RGBColor(t);t=s.ok?s.toHex():"#000000"}4===t.length?(e=t.substring(1,2),e+=e,i=t.substring(2,3),i+=i,r=t.substring(3,4),r+=r):(e=t.substring(1,3),i=t.substring(3,5),r=t.substring(5,7)),e=parseInt(e,16),i=parseInt(i,16),r=parseInt(r,16)}}return{r:e,g:i,b:r,a:n,style:t}},u=function(){return this.ctx.isFillTransparent||0==this.globalAlpha},f=function(){return Boolean(this.ctx.isStrokeTransparent||0==this.globalAlpha)};h.prototype.fillText=function(t,e,i,r){if(isNaN(e)||isNaN(i)||"string"!=typeof t)throw console.error("jsPDF.context2d.fillText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillText");if(r=isNaN(r)?void 0:r,!u.call(this)){i=b.call(this,i);var n=O(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;S.call(this,{text:t,x:e,y:i,scale:o,angle:n,align:this.textAlign,maxWidth:r})}},h.prototype.strokeText=function(t,e,i,r){if(isNaN(e)||isNaN(i)||"string"!=typeof t)throw console.error("jsPDF.context2d.strokeText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeText");if(!f.call(this)){r=isNaN(r)?void 0:r,i=b.call(this,i);var n=O(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;S.call(this,{text:t,x:e,y:i,scale:o,renderingMode:"stroke",angle:n,align:this.textAlign,maxWidth:r})}},h.prototype.measureText=function(t){if("string"!=typeof t)throw console.error("jsPDF.context2d.measureText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.measureText");var e=this.pdf,i=this.pdf.internal.scaleFactor,r=e.internal.getFontSize(),n=e.getStringUnitWidth(t)*r/e.internal.scaleFactor;return new function(t){var e=(t=t||{}).width||0;return Object.defineProperty(this,"width",{get:function(){return e}}),this}({width:n*=Math.round(96*i/72*1e4)/1e4})},h.prototype.scale=function(t,e){if(isNaN(t)||isNaN(e))throw console.error("jsPDF.context2d.scale: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.scale");var i=new I(t,0,0,e,0,0);this.ctx.transform=this.ctx.transform.multiply(i)},h.prototype.rotate=function(t){if(isNaN(t))throw console.error("jsPDF.context2d.rotate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rotate");var e=new I(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);this.ctx.transform=this.ctx.transform.multiply(e)},h.prototype.translate=function(t,e){if(isNaN(t)||isNaN(e))throw console.error("jsPDF.context2d.translate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.translate");var i=new I(1,0,0,1,t,e);this.ctx.transform=this.ctx.transform.multiply(i)},h.prototype.transform=function(t,e,i,r,n,o){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(r)||isNaN(n)||isNaN(o))throw console.error("jsPDF.context2d.transform: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.transform");var s=new I(t,e,i,r,n,o);this.ctx.transform=this.ctx.transform.multiply(s)},h.prototype.setTransform=function(t,e,i,r,n,o){t=isNaN(t)?1:t,e=isNaN(e)?0:e,i=isNaN(i)?0:i,r=isNaN(r)?1:r,n=isNaN(n)?0:n,o=isNaN(o)?0:o,this.ctx.transform=new I(t,e,i,r,n,o)},h.prototype.drawImage=function(t,e,i,r,n,o,s,a,l){var h=this.pdf.getImageProperties(t),c=1,u=1,f=1,p=1;void 0!==r&&void 0!==a&&(f=a/r,p=l/n,c=h.width/r*a/r,u=h.height/n*l/n),void 0===o&&(o=e,s=i,i=e=0),void 0!==r&&void 0===a&&(a=r,l=n),void 0===r&&void 0===a&&(a=h.width,l=h.height);var m=this.ctx.transform.decompose(),b=O(m.rotate.shx);m.scale.sx,m.scale.sy;for(var y,x=new I,w=((x=(x=(x=x.multiply(m.translate)).multiply(m.skew)).multiply(m.scale)).applyToPoint(new F(a,l)),x.applyToRectangle(new j(o-e*f,s-i*p,r*c,n*u))),_=d.call(this,w),S=[],C=0;C<_.length;C+=1)-1===S.indexOf(_[C])&&S.push(_[C]);if(S.sort(),this.autoPaging)for(var A=S[0],L=S[S.length-1],T=A;T<L+1;T++){if(this.pdf.setPage(T),0!==this.ctx.clip_path.length){var k=this.path;y=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=g(y,this.posX,-1*this.pdf.internal.pageSize.height*(T-1)+this.posY),v.call(this,"fill",!0),this.path=k}var N=JSON.parse(JSON.stringify(w));N=g([N],this.posX,-1*this.pdf.internal.pageSize.height*(T-1)+this.posY)[0],this.pdf.addImage(t,"jpg",N.x,N.y,N.w,N.h,null,null,b)}else this.pdf.addImage(t,"jpg",w.x,w.y,w.w,w.h,null,null,b)};var d=function(t,e,i){var r=[];switch(e=e||this.pdf.internal.pageSize.width,i=i||this.pdf.internal.pageSize.height,t.type){default:case"mt":case"lt":r.push(Math.floor((t.y+this.posY)/i)+1);break;case"arc":r.push(Math.floor((t.y+this.posY-t.radius)/i)+1),r.push(Math.floor((t.y+this.posY+t.radius)/i)+1);break;case"qct":var n=P(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x,t.y);r.push(Math.floor(n.y/i)+1),r.push(Math.floor((n.y+n.h)/i)+1);break;case"bct":var o=E(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x2,t.y2,t.x,t.y);r.push(Math.floor(o.y/i)+1),r.push(Math.floor((o.y+o.h)/i)+1);break;case"rect":r.push(Math.floor((t.y+this.posY)/i)+1),r.push(Math.floor((t.y+t.h+this.posY)/i)+1)}for(var s=0;s<r.length;s+=1)for(;this.pdf.internal.getNumberOfPages()<r[s];)p.call(this);return r},p=function(){var t=this.fillStyle,e=this.strokeStyle,i=this.font,r=this.lineCap,n=this.lineWidth,o=this.lineJoin;this.pdf.addPage(),this.fillStyle=t,this.strokeStyle=e,this.font=i,this.lineCap=r,this.lineWidth=n,this.lineJoin=o},g=function(t,e,i){for(var r=0;r<t.length;r++)switch(t[r].type){case"bct":t[r].x2+=e,t[r].y2+=i;case"qct":t[r].x1+=e,t[r].y1+=i;case"mt":case"lt":case"arc":default:t[r].x+=e,t[r].y+=i}return t},m=function(t,e){for(var i,r,n=this.fillStyle,o=this.strokeStyle,s=(this.font,this.lineCap),a=this.lineWidth,l=this.lineJoin,h=JSON.parse(JSON.stringify(this.path)),c=JSON.parse(JSON.stringify(this.path)),u=[],f=0;f<c.length;f++)if(void 0!==c[f].x)for(var m=d.call(this,c[f]),b=0;b<m.length;b+=1)-1===u.indexOf(m[b])&&u.push(m[b]);for(f=0;f<u.length;f++)for(;this.pdf.internal.getNumberOfPages()<u[f];)p.call(this);if(u.sort(),this.autoPaging){var y=u[0],x=u[u.length-1];for(f=y;f<x+1;f++){if(this.pdf.setPage(f),this.fillStyle=n,this.strokeStyle=o,this.lineCap=s,this.lineWidth=a,this.lineJoin=l,0!==this.ctx.clip_path.length){var w=this.path;i=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=g(i,this.posX,-1*this.pdf.internal.pageSize.height*(f-1)+this.posY),v.call(this,t,!0),this.path=w}r=JSON.parse(JSON.stringify(h)),this.path=g(r,this.posX,-1*this.pdf.internal.pageSize.height*(f-1)+this.posY),!1!==e&&0!==f||v.call(this,t,e)}}else v.call(this,t,e);this.path=h},v=function(t,e){if(("stroke"!==t||e||!f.call(this))&&("stroke"===t||e||!u.call(this))){var i=[];this.ctx.globalAlpha,this.ctx.fillOpacity<1&&this.ctx.fillOpacity;for(var r,n=this.path,o=0;o<n.length;o++){var s=n[o];switch(s.type){case"begin":i.push({begin:!0});break;case"close":i.push({close:!0});break;case"mt":i.push({start:s,deltas:[],abs:[]});break;case"lt":var a=i.length;if(!isNaN(n[o-1].x)){var l=[s.x-n[o-1].x,s.y-n[o-1].y];if(0<a)for(;0<=a;a--)if(!0!==i[a-1].close&&!0!==i[a-1].begin){i[a-1].deltas.push(l),i[a-1].abs.push(s);break}}break;case"bct":l=[s.x1-n[o-1].x,s.y1-n[o-1].y,s.x2-n[o-1].x,s.y2-n[o-1].y,s.x-n[o-1].x,s.y-n[o-1].y],i[i.length-1].deltas.push(l);break;case"qct":var h=n[o-1].x+2/3*(s.x1-n[o-1].x),c=n[o-1].y+2/3*(s.y1-n[o-1].y),d=s.x+2/3*(s.x1-s.x),p=s.y+2/3*(s.y1-s.y),g=s.x,m=s.y;l=[h-n[o-1].x,c-n[o-1].y,d-n[o-1].x,p-n[o-1].y,g-n[o-1].x,m-n[o-1].y],i[i.length-1].deltas.push(l);break;case"arc":i.push({deltas:[],abs:[],arc:!0}),Array.isArray(i[i.length-1].abs)&&i[i.length-1].abs.push(s)}}for(r=e?null:"stroke"===t?"stroke":"fill",o=0;o<i.length;o++){if(i[o].arc)for(var v=i[o].abs,b=0;b<v.length;b++){var _=v[b];if(void 0!==_.startAngle){var S=O(_.startAngle),L=O(_.endAngle),T=_.x,k=_.y;y.call(this,T,k,_.radius,S,L,_.counterclockwise,r,e)}else C.call(this,_.x,_.y)}i[o].arc||!0===i[o].close||!0===i[o].begin||(T=i[o].start.x,k=i[o].start.y,A.call(this,i[o].deltas,T,k,null,null))}r&&x.call(this,r),e&&w.call(this)}},b=function(t){var e=this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor,i=e*(this.pdf.internal.getLineHeightFactor()-1);switch(this.ctx.textBaseline){case"bottom":return t-i;case"top":return t+e-i;case"hanging":return t+e-2*i;case"middle":return t+e/2-i;case"ideographic":return t;case"alphabetic":default:return t}};h.prototype.createLinearGradient=function(){var t=function(){};return t.colorStops=[],t.addColorStop=function(t,e){this.colorStops.push([t,e])},t.getColor=function(){return 0===this.colorStops.length?"#000000":this.colorStops[0][1]},t.isCanvasGradient=!0,t},h.prototype.createPattern=function(){return this.createLinearGradient()},h.prototype.createRadialGradient=function(){return this.createLinearGradient()};var y=function(t,e,i,r,n,o,s,a){this.pdf.internal.scaleFactor;for(var l=N(r),h=N(n),c=T.call(this,i,l,h,o),u=0;u<c.length;u++){var f=c[u];0===u&&_.call(this,f.x1+t,f.y1+e),L.call(this,t,e,f.x2,f.y2,f.x3,f.y3,f.x4,f.y4)}a?w.call(this):x.call(this,s)},x=function(t){switch(t){case"stroke":this.pdf.internal.out("S");break;case"fill":this.pdf.internal.out("f")}},w=function(){this.pdf.clip()},_=function(t,e){this.pdf.internal.out(n(t)+" "+o(e)+" m")},S=function(t){var e;switch(t.align){case"right":case"end":e="right";break;case"center":e="center";break;case"left":case"start":default:e="left"}var i=this.ctx.transform.applyToPoint(new F(t.x,t.y)),r=this.ctx.transform.decompose(),n=new I;n=(n=(n=n.multiply(r.translate)).multiply(r.skew)).multiply(r.scale);for(var o,s=this.pdf.getTextDimensions(t.text),a=this.ctx.transform.applyToRectangle(new j(t.x,t.y,s.w,s.h)),l=n.applyToRectangle(new j(t.x,t.y-s.h,s.w,s.h)),h=d.call(this,l),c=[],u=0;u<h.length;u+=1)-1===c.indexOf(h[u])&&c.push(h[u]);if(c.sort(),!0===this.autoPaging)for(var f=c[0],p=c[c.length-1],m=f;m<p+1;m++){if(this.pdf.setPage(m),0!==this.ctx.clip_path.length){var b=this.path;o=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=g(o,this.posX,-1*this.pdf.internal.pageSize.height*(m-1)+this.posY),v.call(this,"fill",!0),this.path=b}var y=JSON.parse(JSON.stringify(a));if(y=g([y],this.posX,-1*this.pdf.internal.pageSize.height*(m-1)+this.posY)[0],.01<=t.scale){var x=this.pdf.internal.getFontSize();this.pdf.setFontSize(x*t.scale)}this.pdf.text(t.text,y.x,y.y,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),.01<=t.scale&&this.pdf.setFontSize(x)}else.01<=t.scale&&(x=this.pdf.internal.getFontSize(),this.pdf.setFontSize(x*t.scale)),this.pdf.text(t.text,i.x+this.posX,i.y+this.posY,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),.01<=t.scale&&this.pdf.setFontSize(x)},C=function(t,e,i,r){i=i||0,r=r||0,this.pdf.internal.out(n(t+i)+" "+o(e+r)+" l")},A=function(t,e,i){return this.pdf.lines(t,e,i,null,null)},L=function(t,e,r,n,o,l,h,c){this.pdf.internal.out([i(s(r+t)),i(a(n+e)),i(s(o+t)),i(a(l+e)),i(s(h+t)),i(a(c+e)),"c"].join(" "))},T=function(t,e,i,r){var n=2*Math.PI,o=e;(o<n||n<o)&&(o%=n);var s=i;(s<n||n<s)&&(s%=n);for(var a=[],l=Math.PI/2,h=r?-1:1,c=e,u=Math.min(n,Math.abs(s-o));1e-5<u;){var f=c+h*Math.min(u,l);a.push(k.call(this,t,c,f)),u-=Math.abs(f-c),c=f}return a},k=function(t,e,i){var r=(i-e)/2,n=t*Math.cos(r),o=t*Math.sin(r),s=n,a=-o,l=s*s+a*a,h=l+s*n+a*o,c=4/3*(Math.sqrt(2*l*h)-h)/(s*o-a*n),u=s-c*a,f=a+c*s,d=u,p=-f,g=r+e,m=Math.cos(g),v=Math.sin(g);return{x1:t*Math.cos(e),y1:t*Math.sin(e),x2:u*m-f*v,y2:u*v+f*m,x3:d*m-p*v,y3:d*v+p*m,x4:t*Math.cos(i),y4:t*Math.sin(i)}},O=function(t){return 180*t/Math.PI},N=function(t){return t*Math.PI/180},P=function(t,e,i,r,n,o){var s=t+.5*(i-t),a=e+.5*(r-e),l=n+.5*(i-n),h=o+.5*(r-o),c=Math.min(t,n,s,l),u=Math.max(t,n,s,l),f=Math.min(e,o,a,h),d=Math.max(e,o,a,h);return new j(c,f,u-c,d-f)},E=function(t,e,i,r,n,o,s,a){for(var l,h,c,u,f,d,p,g,m,v,b,y,x,w=i-t,_=r-e,S=n-i,C=o-r,A=s-n,L=a-o,T=0;T<41;T++)g=(d=(h=t+(l=T/40)*w)+l*((u=i+l*S)-h))+l*(u+l*(n+l*A-u)-d),m=(p=(c=e+l*_)+l*((f=r+l*C)-c))+l*(f+l*(o+l*L-f)-p),x=0==T?(y=v=g,b=m):(v=Math.min(v,g),b=Math.min(b,m),y=Math.max(y,g),Math.max(x,m));return new j(Math.round(v),Math.round(b),Math.round(y-v),Math.round(x-b))},F=function(t,e){var i=t||0;Object.defineProperty(this,"x",{enumerable:!0,get:function(){return i},set:function(t){isNaN(t)||(i=parseFloat(t))}});var r=e||0;Object.defineProperty(this,"y",{enumerable:!0,get:function(){return r},set:function(t){isNaN(t)||(r=parseFloat(t))}});var n="pt";return Object.defineProperty(this,"type",{enumerable:!0,get:function(){return n},set:function(t){n=t.toString()}}),this},j=function(t,e,i,r){F.call(this,t,e),this.type="rect";var n=i||0;Object.defineProperty(this,"w",{enumerable:!0,get:function(){return n},set:function(t){isNaN(t)||(n=parseFloat(t))}});var o=r||0;return Object.defineProperty(this,"h",{enumerable:!0,get:function(){return o},set:function(t){isNaN(t)||(o=parseFloat(t))}}),this},I=function(t,e,i,r,n,o){var s=[];return Object.defineProperty(this,"sx",{get:function(){return s[0]},set:function(t){s[0]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"shy",{get:function(){return s[1]},set:function(t){s[1]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"shx",{get:function(){return s[2]},set:function(t){s[2]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"sy",{get:function(){return s[3]},set:function(t){s[3]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"tx",{get:function(){return s[4]},set:function(t){s[4]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"ty",{get:function(){return s[5]},set:function(t){s[5]=Math.round(1e5*t)/1e5}}),Object.defineProperty(this,"rotation",{get:function(){return Math.atan2(this.shx,this.sx)}}),Object.defineProperty(this,"scaleX",{get:function(){return this.decompose().scale.sx}}),Object.defineProperty(this,"scaleY",{get:function(){return this.decompose().scale.sy}}),Object.defineProperty(this,"isIdentity",{get:function(){return 1===this.sx&&0===this.shy&&0===this.shx&&1===this.sy&&0===this.tx&&0===this.ty}}),this.sx=isNaN(t)?1:t,this.shy=isNaN(e)?0:e,this.shx=isNaN(i)?0:i,this.sy=isNaN(r)?1:r,this.tx=isNaN(n)?0:n,this.ty=isNaN(o)?0:o,this};I.prototype.multiply=function(t){var e=t.sx*this.sx+t.shy*this.shx,i=t.sx*this.shy+t.shy*this.sy,r=t.shx*this.sx+t.sy*this.shx,n=t.shx*this.shy+t.sy*this.sy,o=t.tx*this.sx+t.ty*this.shx+this.tx,s=t.tx*this.shy+t.ty*this.sy+this.ty;return new I(e,i,r,n,o,s)},I.prototype.decompose=function(){var t=this.sx,e=this.shy,i=this.shx,r=this.sy,n=this.tx,o=this.ty,s=Math.sqrt(t*t+e*e),a=(t/=s)*i+(e/=s)*r;i-=t*a,r-=e*a;var l=Math.sqrt(i*i+r*r);return a/=l,t*(r/=l)<e*(i/=l)&&(t=-t,e=-e,a=-a,s=-s),{scale:new I(s,0,0,l,0,0),translate:new I(1,0,0,1,n,o),rotate:new I(t,e,-e,t,0,0),skew:new I(1,0,a,1,0,0)}},I.prototype.applyToPoint=function(t){var e=t.x*this.sx+t.y*this.shx+this.tx,i=t.x*this.shy+t.y*this.sy+this.ty;return new F(e,i)},I.prototype.applyToRectangle=function(t){var e=this.applyToPoint(t),i=this.applyToPoint(new F(t.x+t.w,t.y+t.h));return new j(e.x,e.y,i.x-e.x,i.y-e.y)},I.prototype.clone=function(){var t=this.sx,e=this.shy,i=this.shx,r=this.sy,n=this.tx,o=this.ty;return new I(t,e,i,r,n,o)}}(pt.API,"undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")()),m=pt.API,v=function(t){var e,i,r,n,o,s,a,l,h,c;for(/[^\x00-\xFF]/.test(t),i=[],r=0,n=(t+=e="\0\0\0\0".slice(t.length%4||4)).length;r<n;r+=4)0!==(o=(t.charCodeAt(r)<<24)+(t.charCodeAt(r+1)<<16)+(t.charCodeAt(r+2)<<8)+t.charCodeAt(r+3))?(s=(o=((o=((o=((o=(o-(c=o%85))/85)-(h=o%85))/85)-(l=o%85))/85)-(a=o%85))/85)%85,i.push(s+33,a+33,l+33,h+33,c+33)):i.push(122);return function(t,i){for(var r=e.length;0<r;r--)t.pop()}(i),String.fromCharCode.apply(String,i)+"~>"},b=function(t){var e,i,r,n,o,s=String,a="length",l="charCodeAt",h="slice",c="replace";for(t[h](-2),t=t[h](0,-2)[c](/\s/g,"")[c]("z","!!!!!"),r=[],n=0,o=(t+=e="uuuuu"[h](t[a]%5||5))[a];n<o;n+=5)i=52200625*(t[l](n)-33)+614125*(t[l](n+1)-33)+7225*(t[l](n+2)-33)+85*(t[l](n+3)-33)+(t[l](n+4)-33),r.push(255&i>>24,255&i>>16,255&i>>8,255&i);return function(t,i){for(var r=e[a];0<r;r--)t.pop()}(r),s.fromCharCode.apply(s,r)},y=function(t){for(var e="",i=0;i<t.length;i+=1)e+=("0"+t.charCodeAt(i).toString(16)).slice(-2);return e+">"},x=function(t){var e=new RegExp(/^([0-9A-Fa-f]{2})+$/);if(-1!==(t=t.replace(/\s/g,"")).indexOf(">")&&(t=t.substr(0,t.indexOf(">"))),t.length%2&&(t+="0"),!1===e.test(t))return"";for(var i="",r=0;r<t.length;r+=2)i+=String.fromCharCode("0x"+(t[r]+t[r+1]));return i},w=function(t,e){e=Object.assign({predictor:1,colors:1,bitsPerComponent:8,columns:1},e);for(var i,r,n=[],o=t.length;o--;)n[o]=t.charCodeAt(o);return i=m.adler32cs.from(t),(r=new Deflater(6)).append(new Uint8Array(n)),t=r.flush(),(n=new Uint8Array(t.length+6)).set(new Uint8Array([120,156])),n.set(t,2),n.set(new Uint8Array([255&i,i>>8&255,i>>16&255,i>>24&255]),t.length+2),String.fromCharCode.apply(null,n)},m.processDataByFilters=function(t,e){var i=0,r=t||"",n=[];for("string"==typeof(e=e||[])&&(e=[e]),i=0;i<e.length;i+=1)switch(e[i]){case"ASCII85Decode":case"/ASCII85Decode":r=b(r),n.push("/ASCII85Encode");break;case"ASCII85Encode":case"/ASCII85Encode":r=v(r),n.push("/ASCII85Decode");break;case"ASCIIHexDecode":case"/ASCIIHexDecode":r=x(r),n.push("/ASCIIHexEncode");break;case"ASCIIHexEncode":case"/ASCIIHexEncode":r=y(r),n.push("/ASCIIHexDecode");break;case"FlateEncode":case"/FlateEncode":r=w(r),n.push("/FlateDecode");break;default:throw'The filter: "'+e[i]+'" is not implemented'}return{data:r,reverseChain:n.reverse().join(" ")}},(_=pt.API).loadFile=function(t,e,i){var r;e=e||!0,i=i||function(){};try{r=function(t,e,i){var r=new XMLHttpRequest,n=[],o=0,s=function(t){var e=t.length,i=String.fromCharCode;for(o=0;o<e;o+=1)n.push(i(255&t.charCodeAt(o)));return n.join("")};if(r.open("GET",t,!e),r.overrideMimeType("text/plain; charset=x-user-defined"),!1===e&&(r.onload=function(){return s(this.responseText)}),r.send(null),200===r.status)return e?s(r.responseText):void 0;console.warn('Unable to load file "'+t+'"')}(t,e)}catch(t){r=void 0}return r},_.loadImageFile=_.loadFile,S=pt.API,C="undefined"!=typeof window&&window||void 0!==i.g&&i.g,A=function(t){var e=r(t);return"undefined"===e?"undefined":"string"===e||t instanceof String?"string":"number"===e||t instanceof Number?"number":"function"===e||t instanceof Function?"function":t&&t.constructor===Array?"array":t&&1===t.nodeType?"element":"object"===e?"object":"unknown"},L=function(t,e){var i=document.createElement(t);if(e.className&&(i.className=e.className),e.innerHTML){i.innerHTML=e.innerHTML;for(var r=i.getElementsByTagName("script"),n=r.length;0<n--;null)r[n].parentNode.removeChild(r[n])}for(var o in e.style)i.style[o]=e.style[o];return i},(((T=function t(e){var i=Object.assign(t.convert(o.resolve()),JSON.parse(JSON.stringify(t.template))),r=t.convert(o.resolve(),i);return(r=r.setProgress(1,t,1,[t])).set(e)}).prototype=Object.create(o.prototype)).constructor=T).convert=function(t,e){return t.__proto__=e||T.prototype,t},T.template={prop:{src:null,container:null,overlay:null,canvas:null,img:null,pdf:null,pageSize:null,callback:function(){}},progress:{val:0,state:null,n:0,stack:[]},opt:{filename:"file.pdf",margin:[0,0,0,0],enableLinks:!0,x:0,y:0,html2canvas:{},jsPDF:{}}},T.prototype.from=function(t,e){return this.then((function(){switch(e=e||function(t){switch(A(t)){case"string":return"string";case"element":return"canvas"===t.nodeName.toLowerCase?"canvas":"element";default:return"unknown"}}(t)){case"string":return this.set({src:L("div",{innerHTML:t})});case"element":return this.set({src:t});case"canvas":return this.set({canvas:t});case"img":return this.set({img:t});default:return this.error("Unknown source type.")}}))},T.prototype.to=function(t){switch(t){case"container":return this.toContainer();case"canvas":return this.toCanvas();case"img":return this.toImg();case"pdf":return this.toPdf();default:return this.error("Invalid target.")}},T.prototype.toContainer=function(){return this.thenList([function(){return this.prop.src||this.error("Cannot duplicate - no source HTML.")},function(){return this.prop.pageSize||this.setPageSize()}]).then((function(){var t={position:"relative",display:"inline-block",width:Math.max(this.prop.src.clientWidth,this.prop.src.scrollWidth,this.prop.src.offsetWidth)+"px",left:0,right:0,top:0,margin:"auto",backgroundColor:"white"},e=function t(e,i){for(var r=3===e.nodeType?document.createTextNode(e.nodeValue):e.cloneNode(!1),n=e.firstChild;n;n=n.nextSibling)!0!==i&&1===n.nodeType&&"SCRIPT"===n.nodeName||r.appendChild(t(n,i));return 1===e.nodeType&&("CANVAS"===e.nodeName?(r.width=e.width,r.height=e.height,r.getContext("2d").drawImage(e,0,0)):"TEXTAREA"!==e.nodeName&&"SELECT"!==e.nodeName||(r.value=e.value),r.addEventListener("load",(function(){r.scrollTop=e.scrollTop,r.scrollLeft=e.scrollLeft}),!0)),r}(this.prop.src,this.opt.html2canvas.javascriptEnabled);"BODY"===e.tagName&&(t.height=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight)+"px"),this.prop.overlay=L("div",{className:"html2pdf__overlay",style:{position:"fixed",overflow:"hidden",zIndex:1e3,left:"-100000px",right:0,bottom:0,top:0}}),this.prop.container=L("div",{className:"html2pdf__container",style:t}),this.prop.container.appendChild(e),this.prop.container.firstChild.appendChild(L("div",{style:{clear:"both",border:"0 none transparent",margin:0,padding:0,height:0}})),this.prop.container.style.float="none",this.prop.overlay.appendChild(this.prop.container),document.body.appendChild(this.prop.overlay),this.prop.container.firstChild.style.position="relative",this.prop.container.height=Math.max(this.prop.container.firstChild.clientHeight,this.prop.container.firstChild.scrollHeight,this.prop.container.firstChild.offsetHeight)+"px"}))},T.prototype.toCanvas=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then((function(){var t=Object.assign({},this.opt.html2canvas);if(delete t.onrendered,this.isHtml2CanvasLoaded())return html2canvas(this.prop.container,t)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},T.prototype.toContext2d=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then((function(){var t=this.opt.jsPDF,e=Object.assign({async:!0,allowTaint:!0,backgroundColor:"#ffffff",imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1},this.opt.html2canvas);if(delete e.onrendered,t.context2d.autoPaging=!0,t.context2d.posX=this.opt.x,t.context2d.posY=this.opt.y,e.windowHeight=e.windowHeight||0,e.windowHeight=0==e.windowHeight?Math.max(this.prop.container.clientHeight,this.prop.container.scrollHeight,this.prop.container.offsetHeight):e.windowHeight,this.isHtml2CanvasLoaded())return html2canvas(this.prop.container,e)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},T.prototype.toImg=function(){return this.thenList([function(){return this.prop.canvas||this.toCanvas()}]).then((function(){var t=this.prop.canvas.toDataURL("image/"+this.opt.image.type,this.opt.image.quality);this.prop.img=document.createElement("img"),this.prop.img.src=t}))},T.prototype.toPdf=function(){return this.thenList([function(){return this.toContext2d()}]).then((function(){this.prop.pdf=this.prop.pdf||this.opt.jsPDF}))},T.prototype.output=function(t,e,i){return"img"===(i=i||"pdf").toLowerCase()||"image"===i.toLowerCase()?this.outputImg(t,e):this.outputPdf(t,e)},T.prototype.outputPdf=function(t,e){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){return this.prop.pdf.output(t,e)}))},T.prototype.outputImg=function(t,e){return this.thenList([function(){return this.prop.img||this.toImg()}]).then((function(){switch(t){case void 0:case"img":return this.prop.img;case"datauristring":case"dataurlstring":return this.prop.img.src;case"datauri":case"dataurl":return document.location.href=this.prop.img.src;default:throw'Image output type "'+t+'" is not supported.'}}))},T.prototype.isHtml2CanvasLoaded=function(){var t=void 0!==C.html2canvas;return t||console.error("html2canvas not loaded."),t},T.prototype.save=function(t){if(this.isHtml2CanvasLoaded())return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).set(t?{filename:t}:null).then((function(){this.prop.pdf.save(this.opt.filename)}))},T.prototype.doCallback=function(t){if(this.isHtml2CanvasLoaded())return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){this.prop.callback(this.prop.pdf)}))},T.prototype.set=function(t){if("object"!==A(t))return this;var e=Object.keys(t||{}).map((function(e){if(e in T.template.prop)return function(){this.prop[e]=t[e]};switch(e){case"margin":return this.setMargin.bind(this,t.margin);case"jsPDF":return function(){return this.opt.jsPDF=t.jsPDF,this.setPageSize()};case"pageSize":return this.setPageSize.bind(this,t.pageSize);default:return function(){this.opt[e]=t[e]}}}),this);return this.then((function(){return this.thenList(e)}))},T.prototype.get=function(t,e){return this.then((function(){var i=t in T.template.prop?this.prop[t]:this.opt[t];return e?e(i):i}))},T.prototype.setMargin=function(t){return this.then((function(){switch(A(t)){case"number":t=[t,t,t,t];case"array":if(2===t.length&&(t=[t[0],t[1],t[0],t[1]]),4===t.length)break;default:return this.error("Invalid margin array.")}this.opt.margin=t})).then(this.setPageSize)},T.prototype.setPageSize=function(t){function e(t,e){return Math.floor(t*e/72*96)}return this.then((function(){(t=t||pt.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner")||(t.inner={width:t.width-this.opt.margin[1]-this.opt.margin[3],height:t.height-this.opt.margin[0]-this.opt.margin[2]},t.inner.px={width:e(t.inner.width,t.k),height:e(t.inner.height,t.k)},t.inner.ratio=t.inner.height/t.inner.width),this.prop.pageSize=t}))},T.prototype.setProgress=function(t,e,i,r){return null!=t&&(this.progress.val=t),null!=e&&(this.progress.state=e),null!=i&&(this.progress.n=i),null!=r&&(this.progress.stack=r),this.progress.ratio=this.progress.val/this.progress.state,this},T.prototype.updateProgress=function(t,e,i,r){return this.setProgress(t?this.progress.val+t:null,e||null,i?this.progress.n+i:null,r?this.progress.stack.concat(r):null)},T.prototype.then=function(t,e){var i=this;return this.thenCore(t,e,(function(t,e){return i.updateProgress(null,null,1,[t]),o.prototype.then.call(this,(function(e){return i.updateProgress(null,t),e})).then(t,e).then((function(t){return i.updateProgress(1),t}))}))},T.prototype.thenCore=function(t,e,i){i=i||o.prototype.then;var r=this;t&&(t=t.bind(r)),e&&(e=e.bind(r));var n=-1!==o.toString().indexOf("[native code]")&&"Promise"===o.name?r:T.convert(Object.assign({},r),o.prototype),s=i.call(n,t,e);return T.convert(s,r.__proto__)},T.prototype.thenExternal=function(t,e){return o.prototype.then.call(this,t,e)},T.prototype.thenList=function(t){var e=this;return t.forEach((function(t){e=e.thenCore(t)})),e},T.prototype.catch=function(t){t&&(t=t.bind(this));var e=o.prototype.catch.call(this,t);return T.convert(e,this)},T.prototype.catchExternal=function(t){return o.prototype.catch.call(this,t)},T.prototype.error=function(t){return this.then((function(){throw new Error(t)}))},T.prototype.using=T.prototype.set,T.prototype.saveAs=T.prototype.save,T.prototype.export=T.prototype.output,T.prototype.run=T.prototype.then,pt.getPageSize=function(t,e,i){if("object"===r(t)){var n=t;t=n.orientation,e=n.unit||e,i=n.format||i}e=e||"mm",i=i||"a4",t=(""+(t||"P")).toLowerCase();var o=(""+i).toLowerCase(),s={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};switch(e){case"pt":var a=1;break;case"mm":a=72/25.4;break;case"cm":a=72/2.54;break;case"in":a=72;break;case"px":a=.75;break;case"pc":case"em":a=12;break;case"ex":a=6;break;default:throw"Invalid unit: "+e}if(s.hasOwnProperty(o))var l=s[o][1]/a,h=s[o][0]/a;else try{l=i[1],h=i[0]}catch(t){throw new Error("Invalid format: "+i)}if("p"===t||"portrait"===t){if(t="p",l<h){var c=h;h=l,l=c}}else{if("l"!==t&&"landscape"!==t)throw"Invalid orientation: "+t;t="l",h<l&&(c=h,h=l,l=c)}return{width:h,height:l,unit:e,k:a}},S.html=function(t,e){(e=e||{}).callback=e.callback||function(){},e.html2canvas=e.html2canvas||{},e.html2canvas.canvas=e.html2canvas.canvas||this.canvas,e.jsPDF=e.jsPDF||this,e.jsPDF;var i=new T(e);return e.worker?i:i.from(t).doCallback()},pt.API.addJS=function(t){return N=t,this.internal.events.subscribe("postPutResources",(function(t){k=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/Names [(EmbeddedJS) "+(k+1)+" 0 R]"),this.internal.out(">>"),this.internal.out("endobj"),O=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /JavaScript"),this.internal.out("/JS ("+N+")"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){void 0!==k&&void 0!==O&&this.internal.out("/Names <</JavaScript "+k+" 0 R>>")})),this},(P=pt.API).events.push(["postPutResources",function(){var t=this,e=/^(\d+) 0 obj$/;if(0<this.outline.root.children.length)for(var i=t.outline.render().split(/\r\n/),r=0;r<i.length;r++){var n=i[r],o=e.exec(n);if(null!=o){var s=o[1];t.internal.newObjectDeferredBegin(s,!1)}t.internal.write(n)}if(this.outline.createNamedDestinations){var a=this.internal.pages.length,l=[];for(r=0;r<a;r++){var h=t.internal.newObject();l.push(h);var c=t.internal.getPageInfo(r+1);t.internal.write("<< /D["+c.objId+" 0 R /XYZ null null null]>> endobj")}var u=t.internal.newObject();for(t.internal.write("<< /Names [ "),r=0;r<l.length;r++)t.internal.write("(page_"+(r+1)+")"+l[r]+" 0 R");t.internal.write(" ] >>","endobj"),t.internal.newObject(),t.internal.write("<< /Dests "+u+" 0 R"),t.internal.write(">>","endobj")}}]),P.events.push(["putCatalog",function(){0<this.outline.root.children.length&&(this.internal.write("/Outlines",this.outline.makeRef(this.outline.root)),this.outline.createNamedDestinations&&this.internal.write("/Names "+namesOid+" 0 R"))}]),P.events.push(["initialized",function(){var t=this;t.outline={createNamedDestinations:!1,root:{children:[]}},t.outline.add=function(t,e,i){var r={title:e,options:i,children:[]};return null==t&&(t=this.root),t.children.push(r),r},t.outline.render=function(){return this.ctx={},this.ctx.val="",this.ctx.pdf=t,this.genIds_r(this.root),this.renderRoot(this.root),this.renderItems(this.root),this.ctx.val},t.outline.genIds_r=function(e){e.id=t.internal.newObjectDeferred();for(var i=0;i<e.children.length;i++)this.genIds_r(e.children[i])},t.outline.renderRoot=function(t){this.objStart(t),this.line("/Type /Outlines"),0<t.children.length&&(this.line("/First "+this.makeRef(t.children[0])),this.line("/Last "+this.makeRef(t.children[t.children.length-1]))),this.line("/Count "+this.count_r({count:0},t)),this.objEnd()},t.outline.renderItems=function(e){this.ctx.pdf.internal.getCoordinateString;for(var i=this.ctx.pdf.internal.getVerticalCoordinateString,r=0;r<e.children.length;r++){var n=e.children[r];this.objStart(n),this.line("/Title "+this.makeString(n.title)),this.line("/Parent "+this.makeRef(e)),0<r&&this.line("/Prev "+this.makeRef(e.children[r-1])),r<e.children.length-1&&this.line("/Next "+this.makeRef(e.children[r+1])),0<n.children.length&&(this.line("/First "+this.makeRef(n.children[0])),this.line("/Last "+this.makeRef(n.children[n.children.length-1])));var o=this.count=this.count_r({count:0},n);if(0<o&&this.line("/Count "+o),n.options&&n.options.pageNumber){var s=t.internal.getPageInfo(n.options.pageNumber);this.line("/Dest ["+s.objId+" 0 R /XYZ 0 "+i(0)+" 0]")}this.objEnd()}for(r=0;r<e.children.length;r++)n=e.children[r],this.renderItems(n)},t.outline.line=function(t){this.ctx.val+=t+"\r\n"},t.outline.makeRef=function(t){return t.id+" 0 R"},t.outline.makeString=function(e){return"("+t.internal.pdfEscape(e)+")"},t.outline.objStart=function(t){this.ctx.val+="\r\n"+t.id+" 0 obj\r\n<<\r\n"},t.outline.objEnd=function(t){this.ctx.val+=">> \r\nendobj\r\n"},t.outline.count_r=function(t,e){for(var i=0;i<e.children.length;i++)t.count++,this.count_r(t,e.children[i]);return t.count}}]),E=pt.API,F=function(){var t="function"==typeof Deflater;if(!t)throw new Error("requires deflate.js for compression");return t},j=function(t,e,i,r){var n=5,o=z;switch(r){case E.image_compression.FAST:n=3,o=R;break;case E.image_compression.MEDIUM:n=6,o=U;break;case E.image_compression.SLOW:n=9,o=q}t=D(t,e,i,o);var s=new Uint8Array(I(n)),a=M(t),l=new Deflater(n),h=l.append(t),c=l.flush(),u=s.length+h.length+c.length,f=new Uint8Array(u+4);return f.set(s),f.set(h,s.length),f.set(c,s.length+h.length),f[u++]=a>>>24&255,f[u++]=a>>>16&255,f[u++]=a>>>8&255,f[u++]=255&a,E.arrayBufferToBinaryString(f)},I=function(t,e){var i=Math.LOG2E*Math.log(32768)-8<<4|8,r=i<<8;return r|=Math.min(3,(e-1&255)>>1)<<6,r|=0,[i,255&(r+=31-r%31)]},M=function(t,e){for(var i,r=1,n=0,o=t.length,s=0;0<o;){for(o-=i=e<o?e:o;n+=r+=t[s++],--i;);r%=65521,n%=65521}return(n<<16|r)>>>0},D=function(t,e,i,r){for(var n,o,s,a=t.length/e,l=new Uint8Array(t.length+a),h=W(),c=0;c<a;c++){if(s=c*e,n=t.subarray(s,s+e),r)l.set(r(n,i,o),s+c);else{for(var u=0,f=h.length,d=[];u<f;u++)d[u]=h[u](n,i,o);var p=V(d.concat());l.set(d[p],s+c)}o=n}return l},B=function(t,e,i){var r=Array.apply([],t);return r.unshift(0),r},R=function(t,e,i){var r,n=[],o=0,s=t.length;for(n[0]=1;o<s;o++)r=t[o-e]||0,n[o+1]=t[o]-r+256&255;return n},z=function(t,e,i){var r,n=[],o=0,s=t.length;for(n[0]=2;o<s;o++)r=i&&i[o]||0,n[o+1]=t[o]-r+256&255;return n},U=function(t,e,i){var r,n,o=[],s=0,a=t.length;for(o[0]=3;s<a;s++)r=t[s-e]||0,n=i&&i[s]||0,o[s+1]=t[s]+256-(r+n>>>1)&255;return o},q=function(t,e,i){var r,n,o,s,a=[],l=0,h=t.length;for(a[0]=4;l<h;l++)r=t[l-e]||0,n=i&&i[l]||0,o=i&&i[l-e]||0,s=H(r,n,o),a[l+1]=t[l]-s+256&255;return a},H=function(t,e,i){var r=t+e-i,n=Math.abs(r-t),o=Math.abs(r-e),s=Math.abs(r-i);return n<=o&&n<=s?t:o<=s?e:i},W=function(){return[B,R,z,U,q]},V=function(t){for(var e,i,r,n=0,o=t.length;n<o;)((e=X(t[n].slice(1)))<i||!i)&&(i=e,r=n),n++;return r},X=function(t){for(var e=0,i=t.length,r=0;e<i;)r+=Math.abs(t[e++]);return r},E.processPNG=function(t,e,i,r,n){var o,s,a,l,h,c,u=this.color_spaces.DEVICE_RGB,f=this.decode.FLATE_DECODE,d=8;if(this.isArrayBuffer(t)&&(t=new Uint8Array(t)),this.isArrayBufferView(t)){if("function"!=typeof PNG||"function"!=typeof Mt)throw new Error("PNG support requires png.js and zlib.js");if(t=(o=new PNG(t)).imgData,d=o.bits,u=o.colorSpace,l=o.colors,-1!==[4,6].indexOf(o.colorType)){if(8===o.bits)for(var p,g=(L=32==o.pixelBitlength?new Uint32Array(o.decodePixels().buffer):16==o.pixelBitlength?new Uint16Array(o.decodePixels().buffer):new Uint8Array(o.decodePixels().buffer)).length,m=new Uint8Array(g*o.colors),v=new Uint8Array(g),b=o.pixelBitlength-o.bits,y=0,x=0;y<g;y++){for(w=L[y],p=0;p<b;)m[x++]=w>>>p&255,p+=o.bits;v[y]=w>>>p&255}if(16===o.bits){g=(L=new Uint32Array(o.decodePixels().buffer)).length,m=new Uint8Array(g*(32/o.pixelBitlength)*o.colors),v=new Uint8Array(g*(32/o.pixelBitlength));for(var w,_=1<o.colors,S=x=y=0;y<g;)w=L[y++],m[x++]=w>>>0&255,_&&(m[x++]=w>>>16&255,w=L[y++],m[x++]=w>>>0&255),v[S++]=w>>>16&255;d=8}r!==E.image_compression.NONE&&F()?(t=j(m,o.width*o.colors,o.colors,r),c=j(v,o.width,1,r)):(t=m,c=v,f=null)}if(3===o.colorType&&(u=this.color_spaces.INDEXED,h=o.palette,o.transparency.indexed)){var C=o.transparency.indexed,A=0;for(y=0,g=C.length;y<g;++y)A+=C[y];if((A/=255)==g-1&&-1!==C.indexOf(0))a=[C.indexOf(0)];else if(A!==g){var L=o.decodePixels();for(v=new Uint8Array(L.length),y=0,g=L.length;y<g;y++)v[y]=C[L[y]];c=j(v,o.width,1)}}var T=function(t){var e;switch(t){case E.image_compression.FAST:e=11;break;case E.image_compression.MEDIUM:e=13;break;case E.image_compression.SLOW:e=14;break;default:e=12}return e}(r);return s=f===this.decode.FLATE_DECODE?"/Predictor "+T+" /Colors "+l+" /BitsPerComponent "+d+" /Columns "+o.width:"/Colors "+l+" /BitsPerComponent "+d+" /Columns "+o.width,(this.isArrayBuffer(t)||this.isArrayBufferView(t))&&(t=this.arrayBufferToBinaryString(t)),(c&&this.isArrayBuffer(c)||this.isArrayBufferView(c))&&(c=this.arrayBufferToBinaryString(c)),this.createImageInfo(t,o.width,o.height,u,d,f,e,i,s,a,h,c,T)}throw new Error("Unsupported PNG image data, try using JPEG instead.")},(Y=pt.API).processGIF89A=function(t,e,i,r,n){var o=new Pt(t),s=o.width,a=o.height,l=[];o.decodeAndBlitFrameRGBA(0,l);var h={data:l,width:s,height:a},c=new Ft(100).encode(h,100);return Y.processJPEG.call(this,c,e,i,r)},Y.processGIF87A=Y.processGIF89A,(G=pt.API).processBMP=function(t,e,i,r,n){var o=new jt(t,!1),s=o.width,a=o.height,l={data:o.getData(),width:s,height:a},h=new Ft(100).encode(l,100);return G.processJPEG.call(this,h,e,i,r)},pt.API.setLanguage=function(t){return void 0===this.internal.languageSettings&&(this.internal.languageSettings={},this.internal.languageSettings.isSubscribed=!1),void 0!=={af:"Afrikaans",sq:"Albanian",ar:"Arabic (Standard)","ar-DZ":"Arabic (Algeria)","ar-BH":"Arabic (Bahrain)","ar-EG":"Arabic (Egypt)","ar-IQ":"Arabic (Iraq)","ar-JO":"Arabic (Jordan)","ar-KW":"Arabic (Kuwait)","ar-LB":"Arabic (Lebanon)","ar-LY":"Arabic (Libya)","ar-MA":"Arabic (Morocco)","ar-OM":"Arabic (Oman)","ar-QA":"Arabic (Qatar)","ar-SA":"Arabic (Saudi Arabia)","ar-SY":"Arabic (Syria)","ar-TN":"Arabic (Tunisia)","ar-AE":"Arabic (U.A.E.)","ar-YE":"Arabic (Yemen)",an:"Aragonese",hy:"Armenian",as:"Assamese",ast:"Asturian",az:"Azerbaijani",eu:"Basque",be:"Belarusian",bn:"Bengali",bs:"Bosnian",br:"Breton",bg:"Bulgarian",my:"Burmese",ca:"Catalan",ch:"Chamorro",ce:"Chechen",zh:"Chinese","zh-HK":"Chinese (Hong Kong)","zh-CN":"Chinese (PRC)","zh-SG":"Chinese (Singapore)","zh-TW":"Chinese (Taiwan)",cv:"Chuvash",co:"Corsican",cr:"Cree",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch (Standard)","nl-BE":"Dutch (Belgian)",en:"English","en-AU":"English (Australia)","en-BZ":"English (Belize)","en-CA":"English (Canada)","en-IE":"English (Ireland)","en-JM":"English (Jamaica)","en-NZ":"English (New Zealand)","en-PH":"English (Philippines)","en-ZA":"English (South Africa)","en-TT":"English (Trinidad & Tobago)","en-GB":"English (United Kingdom)","en-US":"English (United States)","en-ZW":"English (Zimbabwe)",eo:"Esperanto",et:"Estonian",fo:"Faeroese",fj:"Fijian",fi:"Finnish",fr:"French (Standard)","fr-BE":"French (Belgium)","fr-CA":"French (Canada)","fr-FR":"French (France)","fr-LU":"French (Luxembourg)","fr-MC":"French (Monaco)","fr-CH":"French (Switzerland)",fy:"Frisian",fur:"Friulian",gd:"Gaelic (Scots)","gd-IE":"Gaelic (Irish)",gl:"Galacian",ka:"Georgian",de:"German (Standard)","de-AT":"German (Austria)","de-DE":"German (Germany)","de-LI":"German (Liechtenstein)","de-LU":"German (Luxembourg)","de-CH":"German (Switzerland)",el:"Greek",gu:"Gujurati",ht:"Haitian",he:"Hebrew",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",iu:"Inuktitut",ga:"Irish",it:"Italian (Standard)","it-CH":"Italian (Switzerland)",ja:"Japanese",kn:"Kannada",ks:"Kashmiri",kk:"Kazakh",km:"Khmer",ky:"Kirghiz",tlh:"Klingon",ko:"Korean","ko-KP":"Korean (North Korea)","ko-KR":"Korean (South Korea)",la:"Latin",lv:"Latvian",lt:"Lithuanian",lb:"Luxembourgish",mk:"FYRO Macedonian",ms:"Malay",ml:"Malayalam",mt:"Maltese",mi:"Maori",mr:"Marathi",mo:"Moldavian",nv:"Navajo",ng:"Ndonga",ne:"Nepali",no:"Norwegian",nb:"Norwegian (Bokmal)",nn:"Norwegian (Nynorsk)",oc:"Occitan",or:"Oriya",om:"Oromo",fa:"Persian","fa-IR":"Persian/Iran",pl:"Polish",pt:"Portuguese","pt-BR":"Portuguese (Brazil)",pa:"Punjabi","pa-IN":"Punjabi (India)","pa-PK":"Punjabi (Pakistan)",qu:"Quechua",rm:"Rhaeto-Romanic",ro:"Romanian","ro-MO":"Romanian (Moldavia)",ru:"Russian","ru-MO":"Russian (Moldavia)",sz:"Sami (Lappish)",sg:"Sango",sa:"Sanskrit",sc:"Sardinian",sd:"Sindhi",si:"Singhalese",sr:"Serbian",sk:"Slovak",sl:"Slovenian",so:"Somani",sb:"Sorbian",es:"Spanish","es-AR":"Spanish (Argentina)","es-BO":"Spanish (Bolivia)","es-CL":"Spanish (Chile)","es-CO":"Spanish (Colombia)","es-CR":"Spanish (Costa Rica)","es-DO":"Spanish (Dominican Republic)","es-EC":"Spanish (Ecuador)","es-SV":"Spanish (El Salvador)","es-GT":"Spanish (Guatemala)","es-HN":"Spanish (Honduras)","es-MX":"Spanish (Mexico)","es-NI":"Spanish (Nicaragua)","es-PA":"Spanish (Panama)","es-PY":"Spanish (Paraguay)","es-PE":"Spanish (Peru)","es-PR":"Spanish (Puerto Rico)","es-ES":"Spanish (Spain)","es-UY":"Spanish (Uruguay)","es-VE":"Spanish (Venezuela)",sx:"Sutu",sw:"Swahili",sv:"Swedish","sv-FI":"Swedish (Finland)","sv-SV":"Swedish (Sweden)",ta:"Tamil",tt:"Tatar",te:"Teluga",th:"Thai",tig:"Tigre",ts:"Tsonga",tn:"Tswana",tr:"Turkish",tk:"Turkmen",uk:"Ukrainian",hsb:"Upper Sorbian",ur:"Urdu",ve:"Venda",vi:"Vietnamese",vo:"Volapuk",wa:"Walloon",cy:"Welsh",xh:"Xhosa",ji:"Yiddish",zu:"Zulu"}[t]&&(this.internal.languageSettings.languageCode=t,!1===this.internal.languageSettings.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){this.internal.write("/Lang ("+this.internal.languageSettings.languageCode+")")})),this.internal.languageSettings.isSubscribed=!0)),this},K=pt.API,J=K.getCharWidthsArray=function(t,e){var i,r,n,o=(e=e||{}).font||this.internal.getFont(),s=e.fontSize||this.internal.getFontSize(),a=e.charSpace||this.internal.getCharSpace(),l=e.widths?e.widths:o.metadata.Unicode.widths,h=l.fof?l.fof:1,c=e.kerning?e.kerning:o.metadata.Unicode.kerning,u=c.fof?c.fof:1,f=0,d=l[0]||h,p=[];for(i=0,r=t.length;i<r;i++)n=t.charCodeAt(i),"function"==typeof o.metadata.widthOfString?p.push((o.metadata.widthOfGlyph(o.metadata.characterToGlyph(n))+a*(1e3/s)||0)/1e3):p.push((l[n]||d)/h+(c[n]&&c[n][f]||0)/u),f=n;return p},$=K.getArraySum=function(t){for(var e=t.length,i=0;e;)i+=t[--e];return i},Z=K.getStringUnitWidth=function(t,e){var i=(e=e||{}).fontSize||this.internal.getFontSize(),r=e.font||this.internal.getFont(),n=e.charSpace||this.internal.getCharSpace();return"function"==typeof r.metadata.widthOfString?r.metadata.widthOfString(t,i,n)/i:$(J.apply(this,arguments))},Q=function(t,e,i,r){for(var n=[],o=0,s=t.length,a=0;o!==s&&a+e[o]<i;)a+=e[o],o++;n.push(t.slice(0,o));var l=o;for(a=0;o!==s;)a+e[o]>r&&(n.push(t.slice(l,o)),a=0,l=o),a+=e[o],o++;return l!==o&&n.push(t.slice(l,o)),n},tt=function(t,e,i){i||(i={});var r,n,o,s,a,l,h=[],c=[h],u=i.textIndent||0,f=0,d=0,p=t.split(" "),g=J.apply(this,[" ",i])[0];if(l=-1===i.lineIndent?p[0].length+2:i.lineIndent||0){var m=Array(l).join(" "),v=[];p.map((function(t){1<(t=t.split(/\s*\n/)).length?v=v.concat(t.map((function(t,e){return(e&&t.length?"\n":"")+t}))):v.push(t[0])})),p=v,l=Z.apply(this,[m,i])}for(o=0,s=p.length;o<s;o++){var b=0;if(r=p[o],l&&"\n"==r[0]&&(r=r.substr(1),b=1),n=J.apply(this,[r,i]),e<u+f+(d=$(n))||b){if(e<d){for(a=Q.apply(this,[r,n,e-(u+f),e]),h.push(a.shift()),h=[a.pop()];a.length;)c.push([a.shift()]);d=$(n.slice(r.length-(h[0]?h[0].length:0)))}else h=[r];c.push(h),u=d+l,f=g}else h.push(r),u+=f+d,f=g}if(l)var y=function(t,e){return(e?m:"")+t.join(" ")};else y=function(t){return t.join(" ")};return c.map(y)},K.splitTextToSize=function(t,e,i){var r,n=(i=i||{}).fontSize||this.internal.getFontSize(),o=function(t){if(t.widths&&t.kerning)return{widths:t.widths,kerning:t.kerning};var e=this.internal.getFont(t.fontName,t.fontStyle),i="Unicode";return e.metadata[i]?{widths:e.metadata[i].widths||{0:1},kerning:e.metadata[i].kerning||{}}:{font:e.metadata,fontSize:this.internal.getFontSize(),charSpace:this.internal.getCharSpace()}}.call(this,i);r=Array.isArray(t)?t:t.split(/\r?\n/);var s=1*this.internal.scaleFactor*e/n;o.textIndent=i.textIndent?1*i.textIndent*this.internal.scaleFactor/n:0,o.lineIndent=i.lineIndent;var a,l,h=[];for(a=0,l=r.length;a<l;a++)h=h.concat(tt.apply(this,[r[a],s,o]));return h},et=pt.API,rt={codePages:["WinAnsiEncoding"],WinAnsiEncoding:(it=function(t){for(var e="klmnopqrstuvwxyz",i={},r=0;r<e.length;r++)i[e[r]]="0123456789abcdef"[r];var n,o,s,a,l,h={},c=1,u=h,f=[],d="",p="",g=t.length-1;for(r=1;r!=g;)l=t[r],r+=1,"'"==l?o=o?(a=o.join(""),n):[]:o?o.push(l):"{"==l?(f.push([u,a]),u={},a=n):"}"==l?((s=f.pop())[0][s[1]]=u,a=n,u=s[0]):"-"==l?c=-1:a===n?i.hasOwnProperty(l)?(d+=i[l],a=parseInt(d,16)*c,c=1,d=""):d+=l:i.hasOwnProperty(l)?(p+=i[l],u[a]=parseInt(p,16)*c,c=1,a=n,p=""):p+=l;return h})("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")},nt={Unicode:{Courier:rt,"Courier-Bold":rt,"Courier-BoldOblique":rt,"Courier-Oblique":rt,Helvetica:rt,"Helvetica-Bold":rt,"Helvetica-BoldOblique":rt,"Helvetica-Oblique":rt,"Times-Roman":rt,"Times-Bold":rt,"Times-BoldItalic":rt,"Times-Italic":rt}},ot={Unicode:{"Courier-Oblique":it("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-BoldItalic":it("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),"Helvetica-Bold":it("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),Courier:it("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-BoldOblique":it("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Bold":it("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),Symbol:it("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),Helvetica:it("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),"Helvetica-BoldOblique":it("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),ZapfDingbats:it("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-Bold":it("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Italic":it("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),"Times-Roman":it("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),"Helvetica-Oblique":it("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")}},et.events.push(["addFont",function(t){var e,i,r,n=t.font,o="Unicode";(e=ot[o][n.postScriptName])&&((i=n.metadata[o]?n.metadata[o]:n.metadata[o]={}).widths=e.widths,i.kerning=e.kerning),(r=nt[o][n.postScriptName])&&((i=n.metadata[o]?n.metadata[o]:n.metadata[o]={}).encoding=r).codePages&&r.codePages.length&&(n.encoding=r.codePages[0])}]),st=pt,"undefined"!=typeof self&&self||void 0!==i.g&&i.g||"undefined"!=typeof window&&window||Function("return this")(),st.API.events.push(["addFont",function(t){var e=t.font,i=t.instance;if(void 0!==i&&i.existsFileInVFS(e.postScriptName)){var r=i.getFileFromVFS(e.postScriptName);if("string"!=typeof r)throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('"+e.postScriptName+"').");e.metadata=st.API.TTFFont.open(e.postScriptName,e.fontName,r,e.encoding),e.metadata.Unicode=e.metadata.Unicode||{encoding:{},kerning:{},widths:[]},e.metadata.glyIdsUsed=[0]}else if(!1===e.isStandardFont)throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('"+e.postScriptName+"').")}]),(at=pt.API).addSvg=function(t,e,i,r,n){if(void 0===e||void 0===i)throw new Error("addSVG needs values for 'x' and 'y'");function o(t){for(var e=parseFloat(t[1]),i=parseFloat(t[2]),r=[],n=3,o=t.length;n<o;)"c"===t[n]?(r.push([parseFloat(t[n+1]),parseFloat(t[n+2]),parseFloat(t[n+3]),parseFloat(t[n+4]),parseFloat(t[n+5]),parseFloat(t[n+6])]),n+=7):"l"===t[n]?(r.push([parseFloat(t[n+1]),parseFloat(t[n+2])]),n+=3):n+=1;return[e,i,r]}var s,a,l,h,c,u,f,d,p=(s=t,(l=((d=(h=document).createElement("iframe"),c=".jsPDF_sillysvg_iframe {display:none;position:absolute;}",(f=(u=h).createElement("style")).type="text/css",f.styleSheet?f.styleSheet.cssText=c:f.appendChild(u.createTextNode(c)),u.getElementsByTagName("head")[0].appendChild(f),d.name="childframe",d.setAttribute("width",0),d.setAttribute("height",0),d.setAttribute("frameborder","0"),d.setAttribute("scrolling","no"),d.setAttribute("seamless","seamless"),d.setAttribute("class","jsPDF_sillysvg_iframe"),h.body.appendChild(d),a=d).contentWindow||a.contentDocument).document).write(s),l.close(),l.getElementsByTagName("svg")[0]),g=[1,1],m=parseFloat(p.getAttribute("width")),v=parseFloat(p.getAttribute("height"));m&&v&&(r&&n?g=[r/m,n/v]:r?g=[r/m,r/m]:n&&(g=[n/v,n/v]));var b,y,x,w,_=p.childNodes;for(b=0,y=_.length;b<y;b++)(x=_[b]).tagName&&"PATH"===x.tagName.toUpperCase()&&((w=o(x.getAttribute("d").split(" ")))[0]=w[0]*g[0]+e,w[1]=w[1]*g[1]+i,this.lines.call(this,w[2],w[0],w[1],g));return this},at.addSVG=at.addSvg,at.addSvgAsImage=function(t,e,i,r,n,o,s,a){if(isNaN(e)||isNaN(i))throw console.error("jsPDF.addSvgAsImage: Invalid coordinates",arguments),new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");if(isNaN(r)||isNaN(n))throw console.error("jsPDF.addSvgAsImage: Invalid measurements",arguments),new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");var l=document.createElement("canvas");l.width=r,l.height=n;var h=l.getContext("2d");return h.fillStyle="#fff",h.fillRect(0,0,l.width,l.height),canvg(l,t,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0}),this.addImage(l.toDataURL("image/jpeg",1),e,i,r,n,s,a),this},pt.API.putTotalPages=function(t){var e,i;i=parseInt(this.internal.getFont().id.substr(1),10)<15?(e=new RegExp(t,"g"),this.internal.getNumberOfPages()):(e=new RegExp(this.pdfEscape16(t,this.internal.getFont()),"g"),this.pdfEscape16(this.internal.getNumberOfPages()+"",this.internal.getFont()));for(var r=1;r<=this.internal.getNumberOfPages();r++)for(var n=0;n<this.internal.pages[r].length;n++)this.internal.pages[r][n]=this.internal.pages[r][n].replace(e,i);return this},pt.API.viewerPreferences=function(t,e){var i;t=t||{},e=e||!1;var n,o,s={HideToolbar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideMenubar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideWindowUI:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},FitWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},CenterWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},DisplayDocTitle:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.4},NonFullScreenPageMode:{defaultValue:"UseNone",value:"UseNone",type:"name",explicitSet:!1,valueSet:["UseNone","UseOutlines","UseThumbs","UseOC"],pdfVersion:1.3},Direction:{defaultValue:"L2R",value:"L2R",type:"name",explicitSet:!1,valueSet:["L2R","R2L"],pdfVersion:1.3},ViewArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},ViewClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintScaling:{defaultValue:"AppDefault",value:"AppDefault",type:"name",explicitSet:!1,valueSet:["AppDefault","None"],pdfVersion:1.6},Duplex:{defaultValue:"",value:"none",type:"name",explicitSet:!1,valueSet:["Simplex","DuplexFlipShortEdge","DuplexFlipLongEdge","none"],pdfVersion:1.7},PickTrayByPDFSize:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.7},PrintPageRange:{defaultValue:"",value:"",type:"array",explicitSet:!1,valueSet:null,pdfVersion:1.7},NumCopies:{defaultValue:1,value:1,type:"integer",explicitSet:!1,valueSet:null,pdfVersion:1.7}},a=Object.keys(s),l=[],h=0,c=0,u=0,f=!0;function d(t,e){var i,r=!1;for(i=0;i<t.length;i+=1)t[i]===e&&(r=!0);return r}if(void 0===this.internal.viewerpreferences&&(this.internal.viewerpreferences={},this.internal.viewerpreferences.configuration=JSON.parse(JSON.stringify(s)),this.internal.viewerpreferences.isSubscribed=!1),i=this.internal.viewerpreferences.configuration,"reset"===t||!0===e){var p=a.length;for(u=0;u<p;u+=1)i[a[u]].value=i[a[u]].defaultValue,i[a[u]].explicitSet=!1}if("object"===r(t))for(n in t)if(o=t[n],d(a,n)&&void 0!==o){if("boolean"===i[n].type&&"boolean"==typeof o)i[n].value=o;else if("name"===i[n].type&&d(i[n].valueSet,o))i[n].value=o;else if("integer"===i[n].type&&Number.isInteger(o))i[n].value=o;else if("array"===i[n].type){for(h=0;h<o.length;h+=1)if(f=!0,1===o[h].length&&"number"==typeof o[h][0])l.push(String(o[h]-1));else if(1<o[h].length){for(c=0;c<o[h].length;c+=1)"number"!=typeof o[h][c]&&(f=!1);!0===f&&l.push([o[h][0]-1,o[h][1]-1].join(" "))}i[n].value="["+l.join(" ")+"]"}else i[n].value=i[n].defaultValue;i[n].explicitSet=!0}return!1===this.internal.viewerpreferences.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){var t,e=[];for(t in i)!0===i[t].explicitSet&&("name"===i[t].type?e.push("/"+t+" /"+i[t].value):e.push("/"+t+" "+i[t].value));0!==e.length&&this.internal.write("/ViewerPreferences\n<<\n"+e.join("\n")+"\n>>")})),this.internal.viewerpreferences.isSubscribed=!0),this.internal.viewerpreferences.configuration=i,this},lt=pt.API,ut=ct=ht="",lt.addMetadata=function(t,e){return ct=e||"http://jspdf.default.namespaceuri/",ht=t,this.internal.events.subscribe("postPutResources",(function(){if(ht){var t='<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="'+ct+'"><jspdf:metadata>',e=unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),i=unescape(encodeURIComponent(t)),r=unescape(encodeURIComponent(ht)),n=unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),o=unescape(encodeURIComponent("</x:xmpmeta>")),s=i.length+r.length+n.length+e.length+o.length;ut=this.internal.newObject(),this.internal.write("<< /Type /Metadata /Subtype /XML /Length "+s+" >>"),this.internal.write("stream"),this.internal.write(e+i+r+n+o),this.internal.write("endstream"),this.internal.write("endobj")}else ut=""})),this.internal.events.subscribe("putCatalog",(function(){ut&&this.internal.write("/Metadata "+ut+" 0 R")})),this},function(t,e){var i=t.API,r=i.pdfEscape16=function(t,e){for(var i,r=e.metadata.Unicode.widths,n=["","0","00","000","0000"],o=[""],s=0,a=t.length;s<a;++s){if(i=e.metadata.characterToGlyph(t.charCodeAt(s)),e.metadata.glyIdsUsed.push(i),e.metadata.toUnicode[i]=t.charCodeAt(s),-1==r.indexOf(i)&&(r.push(i),r.push([parseInt(e.metadata.widthOfGlyph(i),10)])),"0"==i)return o.join("");i=i.toString(16),o.push(n[4-i.length],i)}return o.join("")},n=function(t){var e,i,r,n,o,s,a;for(o="/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange",r=[],s=0,a=(i=Object.keys(t).sort((function(t,e){return t-e}))).length;s<a;s++)e=i[s],100<=r.length&&(o+="\n"+r.length+" beginbfchar\n"+r.join("\n")+"\nendbfchar",r=[]),n=("0000"+t[e].toString(16)).slice(-4),e=("0000"+(+e).toString(16)).slice(-4),r.push("<"+e+"><"+n+">");return r.length&&(o+="\n"+r.length+" beginbfchar\n"+r.join("\n")+"\nendbfchar\n"),o+"endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"};i.events.push(["putFont",function(e){!function(e,i,r,o){if(e.metadata instanceof t.API.TTFFont&&"Identity-H"===e.encoding){for(var s=e.metadata.Unicode.widths,a=e.metadata.subset.encode(e.metadata.glyIdsUsed,1),l="",h=0;h<a.length;h++)l+=String.fromCharCode(a[h]);var c=r();o({data:l,addLength1:!0}),i("endobj");var u=r();o({data:n(e.metadata.toUnicode),addLength1:!0}),i("endobj");var f=r();i("<<"),i("/Type /FontDescriptor"),i("/FontName /"+e.fontName),i("/FontFile2 "+c+" 0 R"),i("/FontBBox "+t.API.PDFObject.convert(e.metadata.bbox)),i("/Flags "+e.metadata.flags),i("/StemV "+e.metadata.stemV),i("/ItalicAngle "+e.metadata.italicAngle),i("/Ascent "+e.metadata.ascender),i("/Descent "+e.metadata.decender),i("/CapHeight "+e.metadata.capHeight),i(">>"),i("endobj");var d=r();i("<<"),i("/Type /Font"),i("/BaseFont /"+e.fontName),i("/FontDescriptor "+f+" 0 R"),i("/W "+t.API.PDFObject.convert(s)),i("/CIDToGIDMap /Identity"),i("/DW 1000"),i("/Subtype /CIDFontType2"),i("/CIDSystemInfo"),i("<<"),i("/Supplement 0"),i("/Registry (Adobe)"),i("/Ordering ("+e.encoding+")"),i(">>"),i(">>"),i("endobj"),e.objectNumber=r(),i("<<"),i("/Type /Font"),i("/Subtype /Type0"),i("/ToUnicode "+u+" 0 R"),i("/BaseFont /"+e.fontName),i("/Encoding /"+e.encoding),i("/DescendantFonts ["+d+" 0 R]"),i(">>"),i("endobj"),e.isAlreadyPutted=!0}}(e.font,e.out,e.newObject,e.putStream)}]),i.events.push(["putFont",function(e){!function(e,i,r,o){if(e.metadata instanceof t.API.TTFFont&&"WinAnsiEncoding"===e.encoding){e.metadata.Unicode.widths;for(var s=e.metadata.rawData,a="",l=0;l<s.length;l++)a+=String.fromCharCode(s[l]);var h=r();o({data:a,addLength1:!0}),i("endobj");var c=r();o({data:n(e.metadata.toUnicode),addLength1:!0}),i("endobj");var u=r();for(i("<<"),i("/Descent "+e.metadata.decender),i("/CapHeight "+e.metadata.capHeight),i("/StemV "+e.metadata.stemV),i("/Type /FontDescriptor"),i("/FontFile2 "+h+" 0 R"),i("/Flags 96"),i("/FontBBox "+t.API.PDFObject.convert(e.metadata.bbox)),i("/FontName /"+e.fontName),i("/ItalicAngle "+e.metadata.italicAngle),i("/Ascent "+e.metadata.ascender),i(">>"),i("endobj"),e.objectNumber=r(),l=0;l<e.metadata.hmtx.widths.length;l++)e.metadata.hmtx.widths[l]=parseInt(e.metadata.hmtx.widths[l]*(1e3/e.metadata.head.unitsPerEm));i("<</Subtype/TrueType/Type/Font/ToUnicode "+c+" 0 R/BaseFont/"+e.fontName+"/FontDescriptor "+u+" 0 R/Encoding/"+e.encoding+" /FirstChar 29 /LastChar 255 /Widths "+t.API.PDFObject.convert(e.metadata.hmtx.widths)+">>"),i("endobj"),e.isAlreadyPutted=!0}}(e.font,e.out,e.newObject,e.putStream)}]);var o=function(t){var e,i,n=t.text||"",o=t.x,s=t.y,a=t.options||{},l=t.mutex||{},h=l.pdfEscape,c=l.activeFontKey,u=l.fonts,f=(l.activeFontSize,""),d=0,p="",g=u[i=c].encoding;if("Identity-H"!==u[i].encoding)return{text:n,x:o,y:s,options:a,mutex:l};for(p=n,i=c,"[object Array]"===Object.prototype.toString.call(n)&&(p=n[0]),d=0;d<p.length;d+=1)u[i].metadata.hasOwnProperty("cmap")&&(e=u[i].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),e||p[d].charCodeAt(0)<256&&u[i].metadata.hasOwnProperty("Unicode")?f+=p[d]:f+="";var m="";return parseInt(i.slice(1))<14||"WinAnsiEncoding"===g?m=function(t){for(var e="",i=0;i<t.length;i++)e+=""+t.charCodeAt(i).toString(16);return e}(h(f,i)):"Identity-H"===g&&(m=r(f,u[i])),l.isHex=!0,{text:m,x:o,y:s,options:a,mutex:l}};i.events.push(["postProcessText",function(t){var e=t.text||"",i=t.x,r=t.y,n=t.options,s=t.mutex,a=(n.lang,[]),l={text:e,x:i,y:r,options:n,mutex:s};if("[object Array]"===Object.prototype.toString.call(e)){var h=0;for(h=0;h<e.length;h+=1)"[object Array]"===Object.prototype.toString.call(e[h])&&3===e[h].length?a.push([o(Object.assign({},l,{text:e[h][0]})).text,e[h][1],e[h][2]]):a.push(o(Object.assign({},l,{text:e[h]})).text);t.text=a}else t.text=o(Object.assign({},l,{text:e})).text}])}(pt,"undefined"!=typeof self&&self||void 0!==i.g&&i.g||"undefined"!=typeof window&&window||Function("return this")()),ft=pt.API,dt=function(t){return void 0!==t&&(void 0===t.vFS&&(t.vFS={}),!0)},ft.existsFileInVFS=function(t){return!!dt(this.internal)&&void 0!==this.internal.vFS[t]},ft.addFileToVFS=function(t,e){return dt(this.internal),this.internal.vFS[t]=e,this},ft.getFileFromVFS=function(t){return dt(this.internal),void 0!==this.internal.vFS[t]?this.internal.vFS[t]:null},pt.API.addHTML=function(t,e,i,r,n){if("undefined"==typeof html2canvas&&"undefined"==typeof rasterizeHTML)throw new Error("You need either https://github.com/niklasvh/html2canvas or https://github.com/cburgmer/rasterizeHTML.js");"number"!=typeof e&&(r=e,n=i),"function"==typeof r&&(n=r,r=null),"function"!=typeof n&&(n=function(){});var o=this.internal,s=o.scaleFactor,a=o.pageSize.getWidth(),l=o.pageSize.getHeight();if((r=r||{}).onrendered=function(t){e=parseInt(e)||0,i=parseInt(i)||0;var o=r.dim||{},h=Object.assign({top:0,right:0,bottom:0,left:0,useFor:"content"},r.margin),c=o.h||Math.min(l,t.height/s),u=o.w||Math.min(a,t.width/s)-e,f=r.format||"JPEG",d=r.imageCompression||"SLOW";if(t.height>l-h.top-h.bottom&&r.pagesplit){var p=function(t,e,i,n,o){var s=document.createElement("canvas");s.height=o,s.width=n;var a=s.getContext("2d");return a.mozImageSmoothingEnabled=!1,a.webkitImageSmoothingEnabled=!1,a.msImageSmoothingEnabled=!1,a.imageSmoothingEnabled=!1,a.fillStyle=r.backgroundColor||"#ffffff",a.fillRect(0,0,n,o),a.drawImage(t,e,i,n,o,0,0,n,o),s},g=function(){for(var r,o,c=0,g=0,m={},v=!1;;){var b;if(g=0,m.top=0!==c?h.top:i,m.left=0!==c?h.left:e,v=(a-h.left-h.right)*s<t.width,"content"===h.useFor?0===c?(r=Math.min((a-h.left)*s,t.width),o=Math.min((l-h.top)*s,t.height-c)):(r=Math.min(a*s,t.width),o=Math.min(l*s,t.height-c),m.top=0):(r=Math.min((a-h.left-h.right)*s,t.width),o=Math.min((l-h.bottom-h.top)*s,t.height-c)),v)for(;;){"content"===h.useFor&&(0===g?r=Math.min((a-h.left)*s,t.width):(r=Math.min(a*s,t.width-g),m.left=0));var y=[b=p(t,g,c,r,o),m.left,m.top,b.width/s,b.height/s,f,null,d];if(this.addImage.apply(this,y),(g+=r)>=t.width)break;this.addPage()}else y=[b=p(t,0,c,r,o),m.left,m.top,b.width/s,b.height/s,f,null,d],this.addImage.apply(this,y);if((c+=o)>=t.height)break;this.addPage()}n(u,c,null,y)}.bind(this);if("CANVAS"===t.nodeName){var m=new Image;m.onload=g,m.src=t.toDataURL("image/png"),t=m}else g()}else{var v=Math.random().toString(35),b=[t,e,i,u,c,f,v,d];this.addImage.apply(this,b),n(u,c,v,b)}}.bind(this),"undefined"!=typeof html2canvas&&!r.rstz)return html2canvas(t,r);if("undefined"==typeof rasterizeHTML)return null;var h="drawDocument";return"string"==typeof t&&(h=/^http/.test(t)?"drawURL":"drawHTML"),r.width=r.width||a*s,rasterizeHTML[h](t,void 0,r).then((function(t){r.onrendered(t.image)}),(function(t){n(null,t)}))},function(t){var e,i,n,o,s,a,l,h,c,u,f,d,p,g,m,v,b,y,x,w;e=function(){return function(e){return t.prototype=e,new t};function t(){}}(),u=function(t){var e,i,r,n,o,s,a;for(i=0,r=t.length,e=void 0,s=n=!1;!n&&i!==r;)(e=t[i]=t[i].trimLeft())&&(n=!0),i++;for(i=r-1;r&&!s&&-1!==i;)(e=t[i]=t[i].trimRight())&&(s=!0),i--;for(o=/\s+$/g,a=!0,i=0;i!==r;)"\u2028"!=t[i]&&(e=t[i].replace(/\s+/g," "),a&&(e=e.trimLeft()),e&&(a=o.test(e)),t[i]=e),i++;return t},d=function(t){var e,i,r;for(e=void 0,i=(r=t.split(",")).shift();!e&&i;)e=n[i.trim().toLowerCase()],i=r.shift();return e},p=function(t){var e;return-1<(t="auto"===t?"0px":t).indexOf("em")&&!isNaN(Number(t.replace("em","")))&&(t=18.719*Number(t.replace("em",""))+"px"),-1<t.indexOf("pt")&&!isNaN(Number(t.replace("pt","")))&&(t=1.333*Number(t.replace("pt",""))+"px"),(e=g[t])?e:void 0!==(e={"xx-small":9,"x-small":11,small:13,medium:16,large:19,"x-large":23,"xx-large":28,auto:0}[t])||(e=parseFloat(t))?g[t]=e/16:(e=t.match(/([\d\.]+)(px)/),Array.isArray(e)&&3===e.length?g[t]=parseFloat(e[1])/16:g[t]=1)},c=function(t){var e,i,r,n,c;return c=t,n=document.defaultView&&document.defaultView.getComputedStyle?document.defaultView.getComputedStyle(c,null):c.currentStyle?c.currentStyle:c.style,i=void 0,(e={})["font-family"]=d((r=function(t){return t=t.replace(/-\D/g,(function(t){return t.charAt(1).toUpperCase()})),n[t]})("font-family"))||"times",e["font-style"]=o[r("font-style")]||"normal",e["text-align"]=s[r("text-align")]||"left","bold"===(i=a[r("font-weight")]||"normal")&&("normal"===e["font-style"]?e["font-style"]=i:e["font-style"]=i+e["font-style"]),e["font-size"]=p(r("font-size"))||1,e["line-height"]=p(r("line-height"))||1,e.display="inline"===r("display")?"inline":"block",i="block"===e.display,e["margin-top"]=i&&p(r("margin-top"))||0,e["margin-bottom"]=i&&p(r("margin-bottom"))||0,e["padding-top"]=i&&p(r("padding-top"))||0,e["padding-bottom"]=i&&p(r("padding-bottom"))||0,e["margin-left"]=i&&p(r("margin-left"))||0,e["margin-right"]=i&&p(r("margin-right"))||0,e["padding-left"]=i&&p(r("padding-left"))||0,e["padding-right"]=i&&p(r("padding-right"))||0,e["page-break-before"]=r("page-break-before")||"auto",e.float=l[r("cssFloat")]||"none",e.clear=h[r("clear")]||"none",e.color=r("color"),e},m=function(t,e,i){var r,n,o,s,a;if(o=!1,s=n=void 0,r=i["#"+t.id])if("function"==typeof r)o=r(t,e);else for(n=0,s=r.length;!o&&n!==s;)o=r[n](t,e),n++;if(r=i[t.nodeName],!o&&r)if("function"==typeof r)o=r(t,e);else for(n=0,s=r.length;!o&&n!==s;)o=r[n](t,e),n++;for(a="string"==typeof t.className?t.className.split(" "):[],n=0;n<a.length;n++)if(r=i["."+a[n]],!o&&r)if("function"==typeof r)o=r(t,e);else for(n=0,s=r.length;!o&&n!==s;)o=r[n](t,e),n++;return o},w=function(t,e){var i,r,n,o,s,a,l,h,c;for(i=[],r=[],n=0,c=t.rows[0].cells.length,l=t.clientWidth;n<c;)h=t.rows[0].cells[n],r[n]={name:h.textContent.toLowerCase().replace(/\s+/g,""),prompt:h.textContent.replace(/\r?\n/g,""),width:h.clientWidth/l*e.pdf.internal.pageSize.getWidth()},n++;for(n=1;n<t.rows.length;){for(a=t.rows[n],s={},o=0;o<a.cells.length;)s[r[o].name]=a.cells[o].textContent.replace(/\r?\n/g,""),o++;i.push(s),n++}return{rows:i,headers:r}};var _={SCRIPT:1,STYLE:1,NOSCRIPT:1,OBJECT:1,EMBED:1,SELECT:1},S=1;i=function(t,n,o){var s,a,l,h,u,f,d,p;for(a=t.childNodes,s=void 0,(u="block"===(l=c(t)).display)&&(n.setBlockBoundary(),n.setBlockStyle(l)),h=0,f=a.length;h<f;){if("object"===r(s=a[h])){if(n.executeWatchFunctions(s),1===s.nodeType&&"HEADER"===s.nodeName){var g=s,b=n.pdf.margins_doc.top;n.pdf.internal.events.subscribe("addPage",(function(t){n.y=b,i(g,n,o),n.pdf.margins_doc.top=n.y+10,n.y+=10}),!1)}if(8===s.nodeType&&"#comment"===s.nodeName)~s.textContent.indexOf("ADD_PAGE")&&(n.pdf.addPage(),n.y=n.pdf.margins_doc.top);else if(1!==s.nodeType||_[s.nodeName])if(3===s.nodeType){var y=s.nodeValue;if(s.nodeValue&&"LI"===s.parentNode.nodeName)if("OL"===s.parentNode.parentNode.nodeName)y=S+++". "+y;else{var x=l["font-size"],C=(3-.75*x)*n.pdf.internal.scaleFactor,A=.75*x*n.pdf.internal.scaleFactor,L=1.74*x/n.pdf.internal.scaleFactor;p=function(t,e){this.pdf.circle(t+C,e+A,L,"FD")}}16&s.ownerDocument.body.compareDocumentPosition(s)&&n.addText(y,l)}else"string"==typeof s&&n.addText(s,l);else{var T;if("IMG"===s.nodeName){var k=s.getAttribute("src");T=v[n.pdf.sHashCode(k)||k]}if(T){n.pdf.internal.pageSize.getHeight()-n.pdf.margins_doc.bottom<n.y+s.height&&n.y>n.pdf.margins_doc.top&&(n.pdf.addPage(),n.y=n.pdf.margins_doc.top,n.executeWatchFunctions(s));var O=c(s),N=n.x,P=12/n.pdf.internal.scaleFactor,E=(O["margin-left"]+O["padding-left"])*P,F=(O["margin-right"]+O["padding-right"])*P,j=(O["margin-top"]+O["padding-top"])*P,I=(O["margin-bottom"]+O["padding-bottom"])*P;void 0!==O.float&&"right"===O.float?N+=n.settings.width-s.width-F:N+=E,n.pdf.addImage(T,N,n.y+j,s.width,s.height),T=void 0,"right"===O.float||"left"===O.float?(n.watchFunctions.push(function(t,e,i,r){return n.y>=e?(n.x+=t,n.settings.width+=i,!0):!!(r&&1===r.nodeType&&!_[r.nodeName]&&n.x+r.width>n.pdf.margins_doc.left+n.pdf.margins_doc.width)&&(n.x+=t,n.y=e,n.settings.width+=i,!0)}.bind(this,"left"===O.float?-s.width-E-F:0,n.y+s.height+j+I,s.width)),n.watchFunctions.push(function(t,e,i){return!(n.y<t&&e===n.pdf.internal.getNumberOfPages())||1===i.nodeType&&"both"===c(i).clear&&(n.y=t,!0)}.bind(this,n.y+s.height,n.pdf.internal.getNumberOfPages())),n.settings.width-=s.width+E+F,"left"===O.float&&(n.x+=s.width+E+F)):n.y+=s.height+j+I}else if("TABLE"===s.nodeName)d=w(s,n),n.y+=10,n.pdf.table(n.x,n.y,d.rows,d.headers,{autoSize:!1,printHeaders:o.printHeaders,margins:n.pdf.margins_doc,css:c(s)}),n.y=n.pdf.lastCellPos.y+n.pdf.lastCellPos.h+20;else if("OL"===s.nodeName||"UL"===s.nodeName)S=1,m(s,n,o)||i(s,n,o),n.y+=10;else if("LI"===s.nodeName){var M=n.x;n.x+=20/n.pdf.internal.scaleFactor,n.y+=3,m(s,n,o)||i(s,n,o),n.x=M}else"BR"===s.nodeName?(n.y+=l["font-size"]*n.pdf.internal.scaleFactor,n.addText("\u2028",e(l))):m(s,n,o)||i(s,n,o)}}h++}if(o.outY=n.y,u)return n.setBlockBoundary(p)},v={},b=function(t,e,i,r){var n,o=t.getElementsByTagName("img"),s=o.length,a=0;function l(){e.pdf.internal.events.publish("imagesLoaded"),r(n)}function h(t,i,r){if(t){var o=new Image;n=++a,o.crossOrigin="",o.onerror=o.onload=function(){if(o.complete&&(0===o.src.indexOf("data:image/")&&(o.width=i||o.width||0,o.height=r||o.height||0),o.width+o.height)){var n=e.pdf.sHashCode(t)||t;v[n]=v[n]||o}--a||l()},o.src=t}}for(;s--;)h(o[s].getAttribute("src"),o[s].width,o[s].height);return a||l()},y=function(t,e,r){var n=t.getElementsByTagName("footer");if(0<n.length){n=n[0];var o=e.pdf.internal.write,s=e.y;e.pdf.internal.write=function(){},i(n,e,r);var a=Math.ceil(e.y-s)+5;e.y=s,e.pdf.internal.write=o,e.pdf.margins_doc.bottom+=a;for(var l=function(t){var o=void 0!==t?t.pageNumber:1,s=e.y;e.y=e.pdf.internal.pageSize.getHeight()-e.pdf.margins_doc.bottom,e.pdf.margins_doc.bottom-=a;for(var l=n.getElementsByTagName("span"),h=0;h<l.length;++h)-1<(" "+l[h].className+" ").replace(/[\n\t]/g," ").indexOf(" pageCounter ")&&(l[h].innerHTML=o),-1<(" "+l[h].className+" ").replace(/[\n\t]/g," ").indexOf(" totalPages ")&&(l[h].innerHTML="###jsPDFVarTotalPages###");i(n,e,r),e.pdf.margins_doc.bottom+=a,e.y=s},h=n.getElementsByTagName("span"),c=0;c<h.length;++c)-1<(" "+h[c].className+" ").replace(/[\n\t]/g," ").indexOf(" totalPages ")&&e.pdf.internal.events.subscribe("htmlRenderingFinished",e.pdf.putTotalPages.bind(e.pdf,"###jsPDFVarTotalPages###"),!0);e.pdf.internal.events.subscribe("addPage",l,!1),l(),_.FOOTER=1}},x=function(t,e,r,n,o,s){if(!e)return!1;var a,l,h,c;"string"==typeof e||e.parentNode||(e=""+e.innerHTML),"string"==typeof e&&(a=e.replace(/<\/?script[^>]*?>/gi,""),c="jsPDFhtmlText"+Date.now().toString()+(1e3*Math.random()).toFixed(0),(h=document.createElement("div")).style.cssText="position: absolute !important;clip: rect(1px 1px 1px 1px); /* IE6, IE7 */clip: rect(1px, 1px, 1px, 1px);padding:0 !important;border:0 !important;height: 1px !important;width: 1px !important; top:auto;left:-100px;overflow: hidden;",h.innerHTML='<iframe style="height:1px;width:1px" name="'+c+'" />',document.body.appendChild(h),(l=window.frames[c]).document.open(),l.document.writeln(a),l.document.close(),e=l.document.body);var u,d=new f(t,r,n,o);return b.call(this,e,d,o.elementHandlers,(function(t){y(e,d,o.elementHandlers),i(e,d,o.elementHandlers),d.pdf.internal.events.publish("htmlRenderingFinished"),u=d.dispose(),"function"==typeof s?s(u):t&&console.error("jsPDF Warning: rendering issues? provide a callback to fromHTML!")})),u||{x:d.x,y:d.y}},(f=function(t,e,i,r){return this.pdf=t,this.x=e,this.y=i,this.settings=r,this.watchFunctions=[],this.init(),this}).prototype.init=function(){return this.paragraph={text:[],style:[]},this.pdf.internal.write("q")},f.prototype.dispose=function(){return this.pdf.internal.write("Q"),{x:this.x,y:this.y,ready:!0}},f.prototype.executeWatchFunctions=function(t){var e=!1,i=[];if(0<this.watchFunctions.length){for(var r=0;r<this.watchFunctions.length;++r)!0===this.watchFunctions[r](t)?e=!0:i.push(this.watchFunctions[r]);this.watchFunctions=i}return e},f.prototype.splitFragmentsIntoLines=function(t,i){var r,n,o,s,a,l,h,c,u,f,d,p,g,m;for(f=this.pdf.internal.scaleFactor,s={},l=h=c=m=a=o=u=n=void 0,p=[d=[]],r=0,g=this.settings.width;t.length;)if(a=t.shift(),m=i.shift(),a)if((o=s[(n=m["font-family"])+(u=m["font-style"])])||(o=this.pdf.internal.getFont(n,u).metadata.Unicode,s[n+u]=o),c={widths:o.widths,kerning:o.kerning,fontSize:12*m["font-size"],textIndent:r},h=this.pdf.getStringUnitWidth(a,c)*c.fontSize/f,"\u2028"==a)d=[],p.push(d);else if(g<r+h){for(l=this.pdf.splitTextToSize(a,g,c),d.push([l.shift(),m]);l.length;)d=[[l.shift(),m]],p.push(d);r=this.pdf.getStringUnitWidth(d[0][0],c)*c.fontSize/f}else d.push([a,m]),r+=h;if(void 0!==m["text-align"]&&("center"===m["text-align"]||"right"===m["text-align"]||"justify"===m["text-align"]))for(var v=0;v<p.length;++v){var b=this.pdf.getStringUnitWidth(p[v][0][0],c)*c.fontSize/f;0<v&&(p[v][0][1]=e(p[v][0][1]));var y=g-b;if("right"===m["text-align"])p[v][0][1]["margin-left"]=y;else if("center"===m["text-align"])p[v][0][1]["margin-left"]=y/2;else if("justify"===m["text-align"]){var x=p[v][0][0].split(" ").length-1;p[v][0][1]["word-spacing"]=y/x,v===p.length-1&&(p[v][0][1]["word-spacing"]=0)}}return p},f.prototype.RenderTextFragment=function(t,e){var i,r;r=0,this.pdf.internal.pageSize.getHeight()-this.pdf.margins_doc.bottom<this.y+this.pdf.internal.getFontSize()&&(this.pdf.internal.write("ET","Q"),this.pdf.addPage(),this.y=this.pdf.margins_doc.top,this.pdf.internal.write("q","BT",this.getPdfColor(e.color),this.pdf.internal.getCoordinateString(this.x),this.pdf.internal.getVerticalCoordinateString(this.y),"Td"),r=Math.max(r,e["line-height"],e["font-size"]),this.pdf.internal.write(0,(-12*r).toFixed(2),"Td")),i=this.pdf.internal.getFont(e["font-family"],e["font-style"]);var n=this.getPdfColor(e.color);n!==this.lastTextColor&&(this.pdf.internal.write(n),this.lastTextColor=n),void 0!==e["word-spacing"]&&0<e["word-spacing"]&&this.pdf.internal.write(e["word-spacing"].toFixed(2),"Tw"),this.pdf.internal.write("/"+i.id,(12*e["font-size"]).toFixed(2),"Tf","("+this.pdf.internal.pdfEscape(t)+") Tj"),void 0!==e["word-spacing"]&&this.pdf.internal.write(0,"Tw")},f.prototype.getPdfColor=function(t){var e,i,r,n=/rgb\s*\(\s*(\d+),\s*(\d+),\s*(\d+\s*)\)/.exec(t);if(null!=n)e=parseInt(n[1]),i=parseInt(n[2]),r=parseInt(n[3]);else{if("string"==typeof t&&"#"!=t.charAt(0)){var o=new RGBColor(t);t=o.ok?o.toHex():"#000000"}e=t.substring(1,3),e=parseInt(e,16),i=t.substring(3,5),i=parseInt(i,16),r=t.substring(5,7),r=parseInt(r,16)}if("string"==typeof e&&/^#[0-9A-Fa-f]{6}$/.test(e)){var s=parseInt(e.substr(1),16);e=s>>16&255,i=s>>8&255,r=255&s}var a=this.f3;return 0===e&&0===i&&0===r||void 0===i?a(e/255)+" g":[a(e/255),a(i/255),a(r/255),"rg"].join(" ")},f.prototype.f3=function(t){return t.toFixed(3)},f.prototype.renderParagraph=function(t){var e,i,r,n,o,s,a,l,h,c,f,d,p;if(r=u(this.paragraph.text),d=this.paragraph.style,e=this.paragraph.blockstyle,this.paragraph.priorblockstyle,this.paragraph={text:[],style:[],blockstyle:{},priorblockstyle:e},r.join("").trim()){a=this.splitFragmentsIntoLines(r,d),l=s=void 0,i=12/this.pdf.internal.scaleFactor,this.priorMarginBottom=this.priorMarginBottom||0,f=(Math.max((e["margin-top"]||0)-this.priorMarginBottom,0)+(e["padding-top"]||0))*i,c=((e["margin-bottom"]||0)+(e["padding-bottom"]||0))*i,this.priorMarginBottom=e["margin-bottom"]||0,"always"===e["page-break-before"]&&(this.pdf.addPage(),this.y=0,f=((e["margin-top"]||0)+(e["padding-top"]||0))*i),h=this.pdf.internal.write,o=n=void 0,this.y+=f,h("q","BT 0 g",this.pdf.internal.getCoordinateString(this.x),this.pdf.internal.getVerticalCoordinateString(this.y),"Td");for(var g=0;a.length;){for(n=l=0,o=(s=a.shift()).length;n!==o;)s[n][0].trim()&&(l=Math.max(l,s[n][1]["line-height"],s[n][1]["font-size"]),p=7*s[n][1]["font-size"]),n++;var m=0,v=0;for(void 0!==s[0][1]["margin-left"]&&0<s[0][1]["margin-left"]&&(m=(v=this.pdf.internal.getCoordinateString(s[0][1]["margin-left"]))-g,g=v),h(m+Math.max(e["margin-left"]||0,0)*i,(-12*l).toFixed(2),"Td"),n=0,o=s.length;n!==o;)s[n][0]&&this.RenderTextFragment(s[n][0],s[n][1]),n++;if(this.y+=l*i,this.executeWatchFunctions(s[0][1])&&0<a.length){var b=[],y=[];a.forEach((function(t){for(var e=0,i=t.length;e!==i;)t[e][0]&&(b.push(t[e][0]+" "),y.push(t[e][1])),++e})),a=this.splitFragmentsIntoLines(u(b),y),h("ET","Q"),h("q","BT 0 g",this.pdf.internal.getCoordinateString(this.x),this.pdf.internal.getVerticalCoordinateString(this.y),"Td")}}return t&&"function"==typeof t&&t.call(this,this.x-9,this.y-p/2),h("ET","Q"),this.y+=c}},f.prototype.setBlockBoundary=function(t){return this.renderParagraph(t)},f.prototype.setBlockStyle=function(t){return this.paragraph.blockstyle=t},f.prototype.addText=function(t,e){return this.paragraph.text.push(t),this.paragraph.style.push(e)},n={helvetica:"helvetica","sans-serif":"helvetica","times new roman":"times",serif:"times",times:"times",monospace:"courier",courier:"courier"},a={100:"normal",200:"normal",300:"normal",400:"normal",500:"bold",600:"bold",700:"bold",800:"bold",900:"bold",normal:"normal",bold:"bold",bolder:"bold",lighter:"normal"},o={normal:"normal",italic:"italic",oblique:"italic"},s={left:"left",right:"right",center:"center",justify:"justify"},l={none:"none",right:"right",left:"left"},h={none:"none",both:"both"},g={normal:1},t.fromHTML=function(t,e,i,r,n,o){return this.margins_doc=o||{top:0,bottom:0},r||(r={}),r.elementHandlers||(r.elementHandlers={}),x(this,t,isNaN(e)?4:e,isNaN(i)?4:i,r,n)}}(pt.API),pt.API,("undefined"!=typeof window&&window||void 0!==i.g&&i.g).html2pdf=function(t,e,i){var r=e.canvas;if(r){var n,o;if((r.pdf=e).annotations={_nameMap:[],createAnnotation:function(t,i){var r,n=e.context2d._wrapX(i.left),o=e.context2d._wrapY(i.top),s=(e.context2d._page(i.top),t.indexOf("#"));r=0<=s?{name:t.substring(s+1)}:{url:t},e.link(n,o,i.right-i.left,i.bottom-i.top,r)},setName:function(t,i){var r=e.context2d._wrapX(i.left),n=e.context2d._wrapY(i.top),o=e.context2d._page(i.top);this._nameMap[t]={page:o,x:r,y:n}}},r.annotations=e.annotations,e.context2d._pageBreakAt=function(t){this.pageBreaks.push(t)},e.context2d._gotoPage=function(t){for(;e.internal.getNumberOfPages()<t;)e.addPage();e.setPage(t)},"string"==typeof t){t=t.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,"");var s,a,l=document.createElement("iframe");document.body.appendChild(l),null!=(s=l.contentDocument)&&null!=s||(s=l.contentWindow.document),s.open(),s.write(t),s.close(),n=s.body,a=s.body||{},t=s.documentElement||{},o=Math.max(a.scrollHeight,a.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight)}else a=(n=t).body||{},o=Math.max(a.scrollHeight,a.offsetHeight,t.clientHeight,t.scrollHeight,t.offsetHeight);var h={async:!0,allowTaint:!0,backgroundColor:"#ffffff",canvas:r,imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1,windowHeight:o=e.internal.pageSize.getHeight(),scrollY:o};e.context2d.pageWrapYEnabled=!0,e.context2d.pageWrapY=e.internal.pageSize.getHeight(),html2canvas(n,h).then((function(t){i&&(l&&l.parentElement.removeChild(l),i(e))}))}else alert("jsPDF canvas plugin not installed")},window.tmp=html2pdf,function(t){var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder;t.URL=t.URL||t.webkitURL||function(t,e){return(e=document.createElement("a")).href=t,e};var i=t.Blob,r=URL.createObjectURL,n=URL.revokeObjectURL,o=t.Symbol&&t.Symbol.toStringTag,s=!1,a=!1,l=!!t.ArrayBuffer,h=e&&e.prototype.append&&e.prototype.getBlob;try{s=2===new Blob(["ä"]).size,a=2===new Blob([new Uint8Array([1,2])]).size}catch(s){}function c(t){return t.map((function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var i=new Uint8Array(t.byteLength);i.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=i.buffer}return e}return t}))}function u(t,i){i=i||{};var r=new e;return c(t).forEach((function(t){r.append(t)})),i.type?r.getBlob(i.type):r.getBlob()}function f(t,e){return new i(c(t),e||{})}if(t.Blob&&(u.prototype=Blob.prototype,f.prototype=Blob.prototype),o)try{File.prototype[o]="File",Blob.prototype[o]="Blob",FileReader.prototype[o]="FileReader"}catch(s){}function d(){var e=!!t.ActiveXObject||"-ms-scroll-limit"in document.documentElement.style&&"-ms-ime-align"in document.documentElement.style,i=t.XMLHttpRequest&&t.XMLHttpRequest.prototype.send;e&&i&&(XMLHttpRequest.prototype.send=function(t){t instanceof Blob&&this.setRequestHeader("Content-Type",t.type),i.call(this,t)});try{new File([],"")}catch(e){try{var r=new Function('class File extends Blob {constructor(chunks, name, opts) {opts = opts || {};super(chunks, opts || {});this.name = name;this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date;this.lastModified = +this.lastModifiedDate;}};return new File([], ""), File')();t.File=r}catch(e){r=function(t,e,i){var r=new Blob(t,i),n=i&&void 0!==i.lastModified?new Date(i.lastModified):new Date;return r.name=e,r.lastModifiedDate=n,r.lastModified=+n,r.toString=function(){return"[object File]"},o&&(r[o]="File"),r},t.File=r}}}s?(d(),t.Blob=a?t.Blob:f):h?(d(),t.Blob=u):function(){function e(t){for(var e=[],i=0;i<t.length;i++){var r=t.charCodeAt(i);r<128?e.push(r):r<2048?e.push(192|r>>6,128|63&r):r<55296||57344<=r?e.push(224|r>>12,128|r>>6&63,128|63&r):(i++,r=65536+((1023&r)<<10|1023&t.charCodeAt(i)),e.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r))}return e}function i(t){var e,i,r,n,o,s;for(e="",r=t.length,i=0;i<r;)switch((n=t[i++])>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:e+=String.fromCharCode(n);break;case 12:case 13:o=t[i++],e+=String.fromCharCode((31&n)<<6|63&o);break;case 14:o=t[i++],s=t[i++],e+=String.fromCharCode((15&n)<<12|(63&o)<<6|(63&s)<<0)}return e}function o(t){for(var e=new Array(t.byteLength),i=new Uint8Array(t),r=e.length;r--;)e[r]=i[r];return e}function s(t){for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",i=[],r=0;r<t.length;r+=3){var n=t[r],o=r+1<t.length,s=o?t[r+1]:0,a=r+2<t.length,l=a?t[r+2]:0,h=n>>2,c=(3&n)<<4|s>>4,u=(15&s)<<2|l>>6,f=63&l;a||(f=64,o||(u=64)),i.push(e[h],e[c],e[u],e[f])}return i.join("")}var a=Object.create||function(t){function e(){}return e.prototype=t,new e};if(l)var h=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(t){return t&&-1<h.indexOf(Object.prototype.toString.call(t))};function u(t,i){for(var r=0,n=(t=t||[]).length;r<n;r++){var s=t[r];s instanceof u?t[r]=s._buffer:"string"==typeof s?t[r]=e(s):l&&(ArrayBuffer.prototype.isPrototypeOf(s)||c(s))?t[r]=o(s):l&&(a=s)&&DataView.prototype.isPrototypeOf(a)?t[r]=o(s.buffer):t[r]=e(String(s))}var a;this._buffer=[].concat.apply([],t),this.size=this._buffer.length,this.type=i&&i.type||""}function f(t,e,i){var r=u.call(this,t,i=i||{})||this;return r.name=e,r.lastModifiedDate=i.lastModified?new Date(i.lastModified):new Date,r.lastModified=+r.lastModifiedDate,r}if(u.prototype.slice=function(t,e,i){return new u([this._buffer.slice(t||0,e||this._buffer.length)],{type:i})},u.prototype.toString=function(){return"[object Blob]"},(f.prototype=a(u.prototype)).constructor=f,Object.setPrototypeOf)Object.setPrototypeOf(f,u);else try{f.__proto__=u}catch(a){}function d(){if(!(this instanceof d))throw new TypeError("Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");var t=document.createDocumentFragment();this.addEventListener=t.addEventListener,this.dispatchEvent=function(e){var i=this["on"+e.type];"function"==typeof i&&i(e),t.dispatchEvent(e)},this.removeEventListener=t.removeEventListener}function p(t,e,i){if(!(e instanceof u))throw new TypeError("Failed to execute '"+i+"' on 'FileReader': parameter 1 is not of type 'Blob'.");t.result="",setTimeout((function(){this.readyState=d.LOADING,t.dispatchEvent(new Event("load")),t.dispatchEvent(new Event("loadend"))}))}f.prototype.toString=function(){return"[object File]"},d.EMPTY=0,d.LOADING=1,d.DONE=2,d.prototype.error=null,d.prototype.onabort=null,d.prototype.onerror=null,d.prototype.onload=null,d.prototype.onloadend=null,d.prototype.onloadstart=null,d.prototype.onprogress=null,d.prototype.readAsDataURL=function(t){p(this,t,"readAsDataURL"),this.result="data:"+t.type+";base64,"+s(t._buffer)},d.prototype.readAsText=function(t){p(this,t,"readAsText"),this.result=i(t._buffer)},d.prototype.readAsArrayBuffer=function(t){p(this,t,"readAsText"),this.result=t._buffer.slice()},d.prototype.abort=function(){},URL.createObjectURL=function(t){return t instanceof u?"data:"+t.type+";base64,"+s(t._buffer):r.call(URL,t)},URL.revokeObjectURL=function(t){n&&n.call(URL,t)};var g=t.XMLHttpRequest&&t.XMLHttpRequest.prototype.send;g&&(XMLHttpRequest.prototype.send=function(t){t instanceof u?(this.setRequestHeader("Content-Type",t.type),g.call(this,i(t._buffer))):g.call(this,t)}),t.FileReader=d,t.File=f,t.Blob=u}()}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")());var gt,mt,vt,bt,yt,xt,wt,_t,St,Ct,At,Lt,Tt,kt,Ot,Nt=Nt||function(t){if(!(void 0===t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,i=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),n="download"in r,o=/constructor/i.test(t.HTMLElement)||t.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent),a=t.setImmediate||t.setTimeout,l=function(t){a((function(){throw t}),0)},h=function(t){setTimeout((function(){"string"==typeof t?i().revokeObjectURL(t):t.remove()}),4e4)},c=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},u=function(e,u,f){f||(e=c(e));var d,p=this,g="application/octet-stream"===e.type,m=function(){!function(t,e,i){for(var r=(e=[].concat(e)).length;r--;){var n=t["on"+e[r]];if("function"==typeof n)try{n.call(t,t)}catch(t){l(t)}}}(p,"writestart progress write writeend".split(" "))};if(p.readyState=p.INIT,n)return d=i().createObjectURL(e),void a((function(){var t,e;r.href=d,r.download=u,t=r,e=new MouseEvent("click"),t.dispatchEvent(e),m(),h(d),p.readyState=p.DONE}),0);!function(){if((s||g&&o)&&t.FileReader){var r=new FileReader;return r.onloadend=function(){var e=s?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");t.open(e,"_blank")||(t.location.href=e),e=void 0,p.readyState=p.DONE,m()},r.readAsDataURL(e),p.readyState=p.INIT}d||(d=i().createObjectURL(e)),g?t.location.href=d:t.open(d,"_blank")||(t.location.href=d),p.readyState=p.DONE,m(),h(d)}()},f=u.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,i){return e=e||t.name||"download",i||(t=c(t)),navigator.msSaveOrOpenBlob(t,e)}:(f.abort=function(){},f.readyState=f.INIT=0,f.WRITING=1,f.DONE=2,f.error=f.onwritestart=f.onprogress=f.onwrite=f.onabort=f.onerror=f.onwriteend=null,function(t,e,i){return new u(t,e||t.name||"download",i)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0);function Pt(t){var e=0;if(71!==t[e++]||73!==t[e++]||70!==t[e++]||56!==t[e++]||56!=(t[e++]+1&253)||97!==t[e++])throw"Invalid GIF 87a/89a header.";var i=t[e++]|t[e++]<<8,r=t[e++]|t[e++]<<8,n=t[e++],o=n>>7,s=1<<1+(7&n);t[e++],t[e++];var a=null;o&&(a=e,e+=3*s);var l=!0,h=[],c=0,u=null,f=0,d=null;for(this.width=i,this.height=r;l&&e<t.length;)switch(t[e++]){case 33:switch(t[e++]){case 255:if(11!==t[e]||78==t[e+1]&&69==t[e+2]&&84==t[e+3]&&83==t[e+4]&&67==t[e+5]&&65==t[e+6]&&80==t[e+7]&&69==t[e+8]&&50==t[e+9]&&46==t[e+10]&&48==t[e+11]&&3==t[e+12]&&1==t[e+13]&&0==t[e+16])e+=14,d=t[e++]|t[e++]<<8,e++;else for(e+=12;0!==(C=t[e++]);)e+=C;break;case 249:if(4!==t[e++]||0!==t[e+4])throw"Invalid graphics extension block.";var p=t[e++];c=t[e++]|t[e++]<<8,u=t[e++],0==(1&p)&&(u=null),f=p>>2&7,e++;break;case 254:for(;0!==(C=t[e++]);)e+=C;break;default:throw"Unknown graphic control label: 0x"+t[e-1].toString(16)}break;case 44:var g=t[e++]|t[e++]<<8,m=t[e++]|t[e++]<<8,v=t[e++]|t[e++]<<8,b=t[e++]|t[e++]<<8,y=t[e++],x=y>>6&1,w=a,_=!1;y>>7&&(_=!0,w=e,e+=3*(1<<1+(7&y)));var S=e;for(e++;;){var C;if(0===(C=t[e++]))break;e+=C}h.push({x:g,y:m,width:v,height:b,has_local_palette:_,palette_offset:w,data_offset:S,data_length:e-S,transparent_index:u,interlaced:!!x,delay:c,disposal:f});break;case 59:l=!1;break;default:throw"Unknown gif block: 0x"+t[e-1].toString(16)}this.numFrames=function(){return h.length},this.loopCount=function(){return d},this.frameInfo=function(t){if(t<0||t>=h.length)throw"Frame index out of range.";return h[t]},this.decodeAndBlitFrameBGRA=function(e,r){var n=this.frameInfo(e),o=n.width*n.height,s=new Uint8Array(o);Et(t,n.data_offset,s,o);var a=n.palette_offset,l=n.transparent_index;null===l&&(l=256);var h=n.width,c=i-h,u=h,f=4*(n.y*i+n.x),d=4*((n.y+n.height)*i+n.x),p=f,g=4*c;!0===n.interlaced&&(g+=4*(h+c)*7);for(var m=8,v=0,b=s.length;v<b;++v){var y=s[v];if(0===u&&(u=h,d<=(p+=g)&&(g=c+4*(h+c)*(m-1),p=f+(h+c)*(m<<1),m>>=1)),y===l)p+=4;else{var x=t[a+3*y],w=t[a+3*y+1],_=t[a+3*y+2];r[p++]=_,r[p++]=w,r[p++]=x,r[p++]=255}--u}},this.decodeAndBlitFrameRGBA=function(e,r){var n=this.frameInfo(e),o=n.width*n.height,s=new Uint8Array(o);Et(t,n.data_offset,s,o);var a=n.palette_offset,l=n.transparent_index;null===l&&(l=256);var h=n.width,c=i-h,u=h,f=4*(n.y*i+n.x),d=4*((n.y+n.height)*i+n.x),p=f,g=4*c;!0===n.interlaced&&(g+=4*(h+c)*7);for(var m=8,v=0,b=s.length;v<b;++v){var y=s[v];if(0===u&&(u=h,d<=(p+=g)&&(g=c+4*(h+c)*(m-1),p=f+(h+c)*(m<<1),m>>=1)),y===l)p+=4;else{var x=t[a+3*y],w=t[a+3*y+1],_=t[a+3*y+2];r[p++]=x,r[p++]=w,r[p++]=_,r[p++]=255}--u}}}function Et(t,e,i,r){for(var n=t[e++],o=1<<n,s=o+1,a=s+1,l=n+1,h=(1<<l)-1,c=0,u=0,f=0,d=t[e++],p=new Int32Array(4096),g=null;;){for(;c<16&&0!==d;)u|=t[e++]<<c,c+=8,1===d?d=t[e++]:--d;if(c<l)break;var m=u&h;if(u>>=l,c-=l,m!==o){if(m===s)break;for(var v=m<a?m:g,b=0,y=v;o<y;)y=p[y]>>8,++b;var x=y;if(r<f+b+(v!==m?1:0))return void console.log("Warning, gif stream longer than expected.");i[f++]=x;var w=f+=b;for(v!==m&&(i[f++]=x),y=v;b--;)y=p[y],i[--w]=255&y,y>>=8;null!==g&&a<4096&&(p[a++]=g<<8|x,h+1<=a&&l<12&&(++l,h=h<<1|1)),g=m}else a=s+1,h=(1<<(l=n+1))-1,g=null}return f!==r&&console.log("Warning, gif stream shorter than expected."),i}try{e.GifWriter=function(t,e,i,r){var n=0,o=void 0===(r=void 0===r?{}:r).loop?null:r.loop,s=void 0===r.palette?null:r.palette;if(e<=0||i<=0||65535<e||65535<i)throw"Width/Height invalid.";function a(t){var e=t.length;if(e<2||256<e||e&e-1)throw"Invalid code/color length, must be power of 2 and 2 .. 256.";return e}t[n++]=71,t[n++]=73,t[n++]=70,t[n++]=56,t[n++]=57,t[n++]=97;var l=0,h=0;if(null!==s){for(var c=a(s);c>>=1;)++l;if(c=1<<l,--l,void 0!==r.background){if(c<=(h=r.background))throw"Background index out of range.";if(0===h)throw"Background index explicitly passed as 0."}}if(t[n++]=255&e,t[n++]=e>>8&255,t[n++]=255&i,t[n++]=i>>8&255,t[n++]=(null!==s?128:0)|l,t[n++]=h,t[n++]=0,null!==s)for(var u=0,f=s.length;u<f;++u){var d=s[u];t[n++]=d>>16&255,t[n++]=d>>8&255,t[n++]=255&d}if(null!==o){if(o<0||65535<o)throw"Loop count invalid.";t[n++]=33,t[n++]=255,t[n++]=11,t[n++]=78,t[n++]=69,t[n++]=84,t[n++]=83,t[n++]=67,t[n++]=65,t[n++]=80,t[n++]=69,t[n++]=50,t[n++]=46,t[n++]=48,t[n++]=3,t[n++]=1,t[n++]=255&o,t[n++]=o>>8&255,t[n++]=0}var p=!1;this.addFrame=function(e,i,r,o,l,h){if(!0===p&&(--n,p=!1),h=void 0===h?{}:h,e<0||i<0||65535<e||65535<i)throw"x/y invalid.";if(r<=0||o<=0||65535<r||65535<o)throw"Width/Height invalid.";if(l.length<r*o)throw"Not enough pixels for the frame size.";var c=!0,u=h.palette;if(null==u&&(c=!1,u=s),null==u)throw"Must supply either a local or global palette.";for(var f=a(u),d=0;f>>=1;)++d;f=1<<d;var g=void 0===h.delay?0:h.delay,m=void 0===h.disposal?0:h.disposal;if(m<0||3<m)throw"Disposal out of range.";var v=!1,b=0;if(void 0!==h.transparent&&null!==h.transparent&&(v=!0,(b=h.transparent)<0||f<=b))throw"Transparent color index.";if((0!==m||v||0!==g)&&(t[n++]=33,t[n++]=249,t[n++]=4,t[n++]=m<<2|(!0===v?1:0),t[n++]=255&g,t[n++]=g>>8&255,t[n++]=b,t[n++]=0),t[n++]=44,t[n++]=255&e,t[n++]=e>>8&255,t[n++]=255&i,t[n++]=i>>8&255,t[n++]=255&r,t[n++]=r>>8&255,t[n++]=255&o,t[n++]=o>>8&255,t[n++]=!0===c?128|d-1:0,!0===c)for(var y=0,x=u.length;y<x;++y){var w=u[y];t[n++]=w>>16&255,t[n++]=w>>8&255,t[n++]=255&w}n=function(t,e,i,r){t[e++]=i;var n=e++,o=1<<i,s=o-1,a=o+1,l=a+1,h=i+1,c=0,u=0;function f(i){for(;i<=c;)t[e++]=255&u,u>>=8,c-=8,e===n+256&&(t[n]=255,n=e++)}function d(t){u|=t<<c,c+=h,f(8)}var p=r[0]&s,g={};d(o);for(var m=1,v=r.length;m<v;++m){var b=r[m]&s,y=p<<8|b,x=g[y];if(void 0===x){for(u|=p<<c,c+=h;8<=c;)t[e++]=255&u,u>>=8,c-=8,e===n+256&&(t[n]=255,n=e++);4096===l?(d(o),l=a+1,h=i+1,g={}):(1<<h<=l&&++h,g[y]=l++),p=b}else p=x}return d(p),d(a),f(1),n+1===e?t[n]=0:(t[n]=e-n-1,t[e++]=0),e}(t,n,d<2?2:d,l)},this.end=function(){return!1===p&&(t[n++]=59,p=!0),n}},e.GifReader=Pt}catch(s){}function Ft(t){var e,i,r,n,o,s=Math.floor,a=new Array(64),l=new Array(64),h=new Array(64),c=new Array(64),u=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),g=[],m=0,v=7,b=new Array(64),y=new Array(64),x=new Array(64),w=new Array(256),_=new Array(2048),S=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],C=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],A=[0,1,2,3,4,5,6,7,8,9,10,11],L=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],T=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],k=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],O=[0,1,2,3,4,5,6,7,8,9,10,11],N=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],P=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function E(t,e){for(var i=0,r=0,n=new Array,o=1;o<=16;o++){for(var s=1;s<=t[o];s++)n[e[r]]=[],n[e[r]][0]=i,n[e[r]][1]=o,r++,i++;i*=2}return n}function F(t){for(var e=t[0],i=t[1]-1;0<=i;)e&1<<i&&(m|=1<<v),i--,--v<0&&(255==m?(j(255),j(0)):j(m),v=7,m=0)}function j(t){g.push(t)}function I(t){j(t>>8&255),j(255&t)}function M(t,e,i,r,n){for(var o,s=n[0],a=n[240],l=function(t,e){var i,r,n,o,s,a,l,h,c,u,f=0;for(c=0;c<8;++c){i=t[f],r=t[f+1],n=t[f+2],o=t[f+3],s=t[f+4],a=t[f+5],l=t[f+6];var p=i+(h=t[f+7]),g=i-h,m=r+l,v=r-l,b=n+a,y=n-a,x=o+s,w=o-s,_=p+x,S=p-x,C=m+b,A=m-b;t[f]=_+C,t[f+4]=_-C;var L=.707106781*(A+S);t[f+2]=S+L,t[f+6]=S-L;var T=.382683433*((_=w+y)-(A=v+g)),k=.5411961*_+T,O=1.306562965*A+T,N=.707106781*(C=y+v),P=g+N,E=g-N;t[f+5]=E+k,t[f+3]=E-k,t[f+1]=P+O,t[f+7]=P-O,f+=8}for(c=f=0;c<8;++c){i=t[f],r=t[f+8],n=t[f+16],o=t[f+24],s=t[f+32],a=t[f+40],l=t[f+48];var F=i+(h=t[f+56]),j=i-h,I=r+l,M=r-l,D=n+a,B=n-a,R=o+s,z=o-s,U=F+R,q=F-R,H=I+D,W=I-D;t[f]=U+H,t[f+32]=U-H;var V=.707106781*(W+q);t[f+16]=q+V,t[f+48]=q-V;var X=.382683433*((U=z+B)-(W=M+j)),Y=.5411961*U+X,G=1.306562965*W+X,K=.707106781*(H=B+M),J=j+K,$=j-K;t[f+40]=$+Y,t[f+24]=$-Y,t[f+8]=J+G,t[f+56]=J-G,f++}for(c=0;c<64;++c)u=t[c]*e[c],d[c]=0<u?u+.5|0:u-.5|0;return d}(t,e),h=0;h<64;++h)p[S[h]]=l[h];var c=p[0]-i;i=p[0],0==c?F(r[0]):(F(r[f[o=32767+c]]),F(u[o]));for(var g=63;0<g&&0==p[g];g--);if(0==g)return F(s),i;for(var m,v=1;v<=g;){for(var b=v;0==p[v]&&v<=g;++v);var y=v-b;if(16<=y){m=y>>4;for(var x=1;x<=m;++x)F(a);y&=15}o=32767+p[v],F(n[(y<<4)+f[o]]),F(u[o]),v++}return 63!=g&&F(s),i}function D(t){t<=0&&(t=1),100<t&&(t=100),o!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],i=0;i<64;i++){var r=s((e[i]*t+50)/100);r<1?r=1:255<r&&(r=255),a[S[i]]=r}for(var n=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],o=0;o<64;o++){var u=s((n[o]*t+50)/100);u<1?u=1:255<u&&(u=255),l[S[o]]=u}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var g=0;g<8;g++)h[d]=1/(a[S[d]]*f[p]*f[g]*8),c[d]=1/(l[S[d]]*f[p]*f[g]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),o=t)}this.encode=function(t,o){var s,u;(new Date).getTime(),o&&D(o),g=new Array,m=0,v=7,I(65496),I(65504),I(16),j(74),j(70),j(73),j(70),j(0),j(1),j(1),j(0),I(1),I(1),j(0),j(0),function(){I(65499),I(132),j(0);for(var t=0;t<64;t++)j(a[t]);j(1);for(var e=0;e<64;e++)j(l[e])}(),s=t.width,u=t.height,I(65472),I(17),j(8),I(u),I(s),j(3),j(1),j(17),j(0),j(2),j(17),j(1),j(3),j(17),j(1),function(){I(65476),I(418),j(0);for(var t=0;t<16;t++)j(C[t+1]);for(var e=0;e<=11;e++)j(A[e]);j(16);for(var i=0;i<16;i++)j(L[i+1]);for(var r=0;r<=161;r++)j(T[r]);j(1);for(var n=0;n<16;n++)j(k[n+1]);for(var o=0;o<=11;o++)j(O[o]);j(17);for(var s=0;s<16;s++)j(N[s+1]);for(var a=0;a<=161;a++)j(P[a])}(),I(65498),I(12),j(3),j(1),j(0),j(2),j(17),j(3),j(17),j(0),j(63),j(0);var f=0,d=0,p=0;m=0,v=7,this.encode.displayName="_encode_";for(var w,S,E,B,R,z,U,q,H,W=t.data,V=t.width,X=t.height,Y=4*V,G=0;G<X;){for(w=0;w<Y;){for(z=R=Y*G+w,U=-1,H=q=0;H<64;H++)z=R+(q=H>>3)*Y+(U=4*(7&H)),X<=G+q&&(z-=Y*(G+1+q-X)),Y<=w+U&&(z-=w+U-Y+4),S=W[z++],E=W[z++],B=W[z++],b[H]=(_[S]+_[E+256>>0]+_[B+512>>0]>>16)-128,y[H]=(_[S+768>>0]+_[E+1024>>0]+_[B+1280>>0]>>16)-128,x[H]=(_[S+1280>>0]+_[E+1536>>0]+_[B+1792>>0]>>16)-128;f=M(b,h,f,e,r),d=M(y,c,d,i,n),p=M(x,c,p,i,n),w+=32}G+=8}if(0<=v){var K=[];K[1]=v+1,K[0]=(1<<v+1)-1,F(K)}return I(65497),new Uint8Array(g)},(new Date).getTime(),t||(t=50),function(){for(var t=String.fromCharCode,e=0;e<256;e++)w[e]=t(e)}(),e=E(C,A),i=E(k,O),r=E(L,T),n=E(N,P),function(){for(var t=1,e=2,i=1;i<=15;i++){for(var r=t;r<e;r++)f[32767+r]=i,u[32767+r]=[],u[32767+r][1]=i,u[32767+r][0]=r;for(var n=-(e-1);n<=-t;n++)f[32767+n]=i,u[32767+n]=[],u[32767+n][1]=i,u[32767+n][0]=e-1+n;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)_[t]=19595*t,_[t+256>>0]=38470*t,_[t+512>>0]=7471*t+32768,_[t+768>>0]=-11059*t,_[t+1024>>0]=-21709*t,_[t+1280>>0]=32768*t+8421375,_[t+1536>>0]=-27439*t,_[t+1792>>0]=-5329*t}(),D(t),(new Date).getTime()}function jt(t,e){if(this.pos=0,this.buffer=t,this.datav=new DataView(t.buffer),this.is_with_alpha=!!e,this.bottom_up=!0,this.flag=String.fromCharCode(this.buffer[0])+String.fromCharCode(this.buffer[1]),this.pos+=2,-1===["BM","BA","CI","CP","IC","PT"].indexOf(this.flag))throw new Error("Invalid BMP File");this.parseHeader(),this.parseBGR()}window.tmp=Pt,pt.API.adler32cs=(xt="function"==typeof ArrayBuffer&&"function"==typeof Uint8Array,wt=null,_t=function(){if(!xt)return function(){return!1};try{var t={};"function"==typeof t.Buffer&&(wt=t.Buffer)}catch(t){}return function(t){return t instanceof ArrayBuffer||null!==wt&&t instanceof wt}}(),St=null!==wt?function(t){return new wt(t,"utf8").toString("binary")}:function(t){return unescape(encodeURIComponent(t))},Ct=function(t,e){for(var i=65535&t,r=t>>>16,n=0,o=e.length;n<o;n++)r=(r+(i=(i+(255&e.charCodeAt(n)))%65521))%65521;return(r<<16|i)>>>0},At=function(t,e){for(var i=65535&t,r=t>>>16,n=0,o=e.length;n<o;n++)r=(r+(i=(i+e[n])%65521))%65521;return(r<<16|i)>>>0},Tt=(Lt={}).Adler32=(((yt=(bt=function(t){if(!(this instanceof bt))throw new TypeError("Constructor cannot called be as a function.");if(!isFinite(t=null==t?1:+t))throw new Error("First arguments needs to be a finite number.");this.checksum=t>>>0}).prototype={}).constructor=bt).from=((gt=function(t){if(!(this instanceof bt))throw new TypeError("Constructor cannot called be as a function.");if(null==t)throw new Error("First argument needs to be a string.");this.checksum=Ct(1,t.toString())}).prototype=yt,gt),bt.fromUtf8=((mt=function(t){if(!(this instanceof bt))throw new TypeError("Constructor cannot called be as a function.");if(null==t)throw new Error("First argument needs to be a string.");var e=St(t.toString());this.checksum=Ct(1,e)}).prototype=yt,mt),xt&&(bt.fromBuffer=((vt=function(t){if(!(this instanceof bt))throw new TypeError("Constructor cannot called be as a function.");if(!_t(t))throw new Error("First argument needs to be ArrayBuffer.");var e=new Uint8Array(t);return this.checksum=At(1,e)}).prototype=yt,vt)),yt.update=function(t){if(null==t)throw new Error("First argument needs to be a string.");return t=t.toString(),this.checksum=Ct(this.checksum,t)},yt.updateUtf8=function(t){if(null==t)throw new Error("First argument needs to be a string.");var e=St(t.toString());return this.checksum=Ct(this.checksum,e)},xt&&(yt.updateBuffer=function(t){if(!_t(t))throw new Error("First argument needs to be ArrayBuffer.");var e=new Uint8Array(t);return this.checksum=At(this.checksum,e)}),yt.clone=function(){return new Tt(this.checksum)},bt),Lt.from=function(t){if(null==t)throw new Error("First argument needs to be a string.");return Ct(1,t.toString())},Lt.fromUtf8=function(t){if(null==t)throw new Error("First argument needs to be a string.");var e=St(t.toString());return Ct(1,e)},xt&&(Lt.fromBuffer=function(t){if(!_t(t))throw new Error("First argument need to be ArrayBuffer.");var e=new Uint8Array(t);return At(1,e)}),Lt),function(t){t.__bidiEngine__=t.prototype.__bidiEngine__=function(t){var i,r,n,o,s,a,l,h=e,c=[[0,3,0,1,0,0,0],[0,3,0,1,2,2,0],[0,3,0,17,2,0,1],[0,3,5,5,4,1,0],[0,3,21,21,4,0,1],[0,3,5,5,4,2,0]],u=[[2,0,1,1,0,1,0],[2,0,1,1,0,2,0],[2,0,2,1,3,2,0],[2,0,2,33,3,1,1]],f={L:0,R:1,EN:2,AN:3,N:4,B:5,S:6},d={0:0,5:1,6:2,7:3,32:4,251:5,254:6,255:7},p=["(",")","(","<",">","<","[","]","[","{","}","{","«","»","«","‹","›","‹","⁅","⁆","⁅","⁽","⁾","⁽","₍","₎","₍","≤","≥","≤","〈","〉","〈","﹙","﹚","﹙","﹛","﹜","﹛","﹝","﹞","﹝","﹤","﹥","﹤"],g=new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),m=!1,v=0;this.__bidiEngine__={};var b=function(t){var e=t.charCodeAt(),i=e>>8,r=d[i];return void 0!==r?h[256*r+(255&e)]:252===i||253===i?"AL":g.test(i)?"L":8===i?"R":"N"},y=function(t){for(var e,i=0;i<t.length;i++){if("L"===(e=b(t.charAt(i))))return!1;if("R"===e)return!0}return!1},x=function(t,e,s,a){var l,h,c,u,f=e[a];switch(f){case"L":case"R":m=!1;break;case"N":case"AN":break;case"EN":m&&(f="AN");break;case"AL":m=!0,f="R";break;case"WS":f="N";break;case"CS":a<1||a+1>=e.length||"EN"!==(l=s[a-1])&&"AN"!==l||"EN"!==(h=e[a+1])&&"AN"!==h?f="N":m&&(h="AN"),f=h===l?h:"N";break;case"ES":f="EN"===(l=0<a?s[a-1]:"B")&&a+1<e.length&&"EN"===e[a+1]?"EN":"N";break;case"ET":if(0<a&&"EN"===s[a-1]){f="EN";break}if(m){f="N";break}for(c=a+1,u=e.length;c<u&&"ET"===e[c];)c++;f=c<u&&"EN"===e[c]?"EN":"N";break;case"NSM":if(n&&!o){for(u=e.length,c=a+1;c<u&&"NSM"===e[c];)c++;if(c<u){var d=t[a],p=1425<=d&&d<=2303||64286===d;if(l=e[c],p&&("R"===l||"AL"===l)){f="R";break}}}f=a<1||"B"===(l=e[a-1])?"N":s[a-1];break;case"B":i=!(m=!1),f=v;break;case"S":r=!0,f="N";break;case"LRE":case"RLE":case"LRO":case"RLO":case"PDF":m=!1;break;case"BN":f="N"}return f},w=function(t,e,i){var r=t.split("");return i&&_(r,i,{hiLevel:v}),r.reverse(),e&&e.reverse(),r.join("")},_=function(t,e,n){var o,s,a,l,h,d=-1,p=t.length,g=0,y=[],w=v?u:c,_=[];for(r=i=m=!1,s=0;s<p;s++)_[s]=b(t[s]);for(a=0;a<p;a++){if(h=g,y[a]=x(t,_,y,a),o=240&(g=w[h][f[y[a]]]),g&=15,e[a]=l=w[g][5],0<o)if(16===o){for(s=d;s<a;s++)e[s]=1;d=-1}else d=-1;if(w[g][6])-1===d&&(d=a);else if(-1<d){for(s=d;s<a;s++)e[s]=l;d=-1}"B"===_[a]&&(e[a]=0),n.hiLevel|=l}r&&function(t,e,i){for(var r=0;r<i;r++)if("S"===t[r]){e[r]=v;for(var n=r-1;0<=n&&"WS"===t[n];n--)e[n]=v}}(_,e,p)},S=function(t,e,r,n,o){if(!(o.hiLevel<t)){if(1===t&&1===v&&!i)return e.reverse(),void(r&&r.reverse());for(var s,a,l,h,c=e.length,u=0;u<c;){if(n[u]>=t){for(l=u+1;l<c&&n[l]>=t;)l++;for(h=u,a=l-1;h<a;h++,a--)s=e[h],e[h]=e[a],e[a]=s,r&&(s=r[h],r[h]=r[a],r[a]=s);u=l}u++}}},C=function(t,e,i){var r=t.split(""),n={hiLevel:v};return i||(i=[]),_(r,i,n),function(t,e,i){if(0!==i.hiLevel&&l)for(var r,n=0;n<t.length;n++)1===e[n]&&0<=(r=p.indexOf(t[n]))&&(t[n]=p[r+1])}(r,i,n),S(2,r,e,i,n),S(1,r,e,i,n),r.join("")};return this.__bidiEngine__.doBidiReorder=function(t,e,i){if(function(t,e){if(e)for(var i=0;i<t.length;i++)e[i]=i;void 0===o&&(o=y(t)),void 0===a&&(a=y(t))}(t,e),n||!s||a)if(n&&s&&o^a)v=o?1:0,t=w(t,e,i);else if(!n&&s&&a)v=o?1:0,t=C(t,e,i),t=w(t,e);else if(!n||o||s||a){if(n&&!s&&o^a)t=w(t,e),t=o?(v=0,C(t,e,i)):(v=1,t=C(t,e,i),w(t,e));else if(n&&o&&!s&&a)v=1,t=C(t,e,i),t=w(t,e);else if(!n&&!s&&o^a){var r=l;o?(v=1,t=C(t,e,i),v=0,l=!1,t=C(t,e,i),l=r):(v=0,t=C(t,e,i),t=w(t,e),l=!(v=1),t=C(t,e,i),l=r,t=w(t,e))}}else v=0,t=C(t,e,i);else v=o?1:0,t=C(t,e,i);return t},this.__bidiEngine__.setOptions=function(t){t&&(n=t.isInputVisual,s=t.isOutputVisual,o=t.isInputRtl,a=t.isOutputRtl,l=t.isSymmetricSwapping)},this.__bidiEngine__.setOptions(t),this.__bidiEngine__};var e=["BN","BN","BN","BN","BN","BN","BN","BN","BN","S","B","S","WS","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","B","B","B","S","WS","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","BN","BN","BN","BN","BN","BN","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","CS","N","ET","ET","ET","ET","N","N","N","N","L","N","N","BN","N","N","ET","ET","EN","EN","N","L","N","N","N","EN","L","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","N","N","N","N","N","ET","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","NSM","R","NSM","NSM","R","NSM","NSM","R","NSM","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","N","N","N","N","N","R","R","R","R","R","N","N","N","N","N","N","N","N","N","N","N","AN","AN","AN","AN","AN","AN","N","N","AL","ET","ET","AL","CS","AL","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","AN","AN","AN","AN","AN","AN","AN","AN","AN","ET","AN","AN","AL","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","N","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","NSM","NSM","N","NSM","NSM","NSM","NSM","AL","AL","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","R","N","N","N","N","R","N","N","N","N","N","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","BN","BN","BN","L","R","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","B","LRE","RLE","PDF","LRO","RLO","CS","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","BN","BN","BN","BN","BN","N","LRI","RLI","FSI","PDI","BN","BN","BN","BN","BN","BN","EN","L","N","N","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","L","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","N","N","N","N","N","R","NSM","R","R","R","R","R","R","R","R","R","R","ES","R","R","R","R","R","R","R","R","R","R","R","R","R","N","R","R","R","R","R","N","R","N","R","R","N","R","R","N","R","R","R","R","R","R","R","R","R","R","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","CS","N","N","CS","N","N","N","N","N","N","N","N","N","ET","N","N","ES","ES","N","N","N","N","N","ET","ET","N","N","N","N","N","AL","AL","AL","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","BN","N","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","N","N","N","ET","ET","N","N","N","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N"],i=new t.__bidiEngine__({isInputVisual:!0});t.API.events.push(["postProcessText",function(t){var e=t.text,r=(t.x,t.y,t.options||{}),n=(t.mutex,r.lang,[]);if("[object Array]"===Object.prototype.toString.call(e)){var o=0;for(n=[],o=0;o<e.length;o+=1)"[object Array]"===Object.prototype.toString.call(e[o])?n.push([i.doBidiReorder(e[o][0]),e[o][1],e[o][2]]):n.push([i.doBidiReorder(e[o])]);t.text=n}else t.text=i.doBidiReorder(e)}])}(pt),window.tmp=Ft,jt.prototype.parseHeader=function(){if(this.fileSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.reserved=this.datav.getUint32(this.pos,!0),this.pos+=4,this.offset=this.datav.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.width=this.datav.getUint32(this.pos,!0),this.pos+=4,this.height=this.datav.getInt32(this.pos,!0),this.pos+=4,this.planes=this.datav.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.datav.getUint16(this.pos,!0),this.pos+=2,this.compress=this.datav.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.hr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.vr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.colors=this.datav.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.datav.getUint32(this.pos,!0),this.pos+=4,16===this.bitPP&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var t=0===this.colors?1<<this.bitPP:this.colors;this.palette=new Array(t);for(var e=0;e<t;e++){var i=this.datav.getUint8(this.pos++,!0),r=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0);this.palette[e]={red:n,green:r,blue:i,quad:o}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)},jt.prototype.parseBGR=function(){this.pos=this.offset;try{var t="bit"+this.bitPP,e=this.width*this.height*4;this.data=new Uint8Array(e),this[t]()}catch(t){console.log("bit decode error:"+t)}},jt.prototype.bit1=function(){var t=Math.ceil(this.width/8),e=t%4,i=0<=this.height?this.height-1:-this.height;for(i=this.height-1;0<=i;i--){for(var r=this.bottom_up?i:this.height-1-i,n=0;n<t;n++)for(var o=this.datav.getUint8(this.pos++,!0),s=r*this.width*4+8*n*4,a=0;a<8&&8*n+a<this.width;a++){var l=this.palette[o>>7-a&1];this.data[s+4*a]=l.blue,this.data[s+4*a+1]=l.green,this.data[s+4*a+2]=l.red,this.data[s+4*a+3]=255}0!=e&&(this.pos+=4-e)}},jt.prototype.bit4=function(){for(var t=Math.ceil(this.width/2),e=t%4,i=this.height-1;0<=i;i--){for(var r=this.bottom_up?i:this.height-1-i,n=0;n<t;n++){var o=this.datav.getUint8(this.pos++,!0),s=r*this.width*4+2*n*4,a=o>>4,l=15&o,h=this.palette[a];if(this.data[s]=h.blue,this.data[s+1]=h.green,this.data[s+2]=h.red,this.data[s+3]=255,2*n+1>=this.width)break;h=this.palette[l],this.data[s+4]=h.blue,this.data[s+4+1]=h.green,this.data[s+4+2]=h.red,this.data[s+4+3]=255}0!=e&&(this.pos+=4-e)}},jt.prototype.bit8=function(){for(var t=this.width%4,e=this.height-1;0<=e;e--){for(var i=this.bottom_up?e:this.height-1-e,r=0;r<this.width;r++){var n=this.datav.getUint8(this.pos++,!0),o=i*this.width*4+4*r;if(n<this.palette.length){var s=this.palette[n];this.data[o]=s.red,this.data[o+1]=s.green,this.data[o+2]=s.blue,this.data[o+3]=255}else this.data[o]=255,this.data[o+1]=255,this.data[o+2]=255,this.data[o+3]=255}0!=t&&(this.pos+=4-t)}},jt.prototype.bit15=function(){for(var t=this.width%3,e=parseInt("11111",2),i=this.height-1;0<=i;i--){for(var r=this.bottom_up?i:this.height-1-i,n=0;n<this.width;n++){var o=this.datav.getUint16(this.pos,!0);this.pos+=2;var s=(o&e)/e*255|0,a=(o>>5&e)/e*255|0,l=(o>>10&e)/e*255|0,h=o>>15?255:0,c=r*this.width*4+4*n;this.data[c]=l,this.data[c+1]=a,this.data[c+2]=s,this.data[c+3]=h}this.pos+=t}},jt.prototype.bit16=function(){for(var t=this.width%3,e=parseInt("11111",2),i=parseInt("111111",2),r=this.height-1;0<=r;r--){for(var n=this.bottom_up?r:this.height-1-r,o=0;o<this.width;o++){var s=this.datav.getUint16(this.pos,!0);this.pos+=2;var a=(s&e)/e*255|0,l=(s>>5&i)/i*255|0,h=(s>>11)/e*255|0,c=n*this.width*4+4*o;this.data[c]=h,this.data[c+1]=l,this.data[c+2]=a,this.data[c+3]=255}this.pos+=t}},jt.prototype.bit24=function(){for(var t=this.height-1;0<=t;t--){for(var e=this.bottom_up?t:this.height-1-t,i=0;i<this.width;i++){var r=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=e*this.width*4+4*i;this.data[s]=o,this.data[s+1]=n,this.data[s+2]=r,this.data[s+3]=255}this.pos+=this.width%4}},jt.prototype.bit32=function(){for(var t=this.height-1;0<=t;t--)for(var e=this.bottom_up?t:this.height-1-t,i=0;i<this.width;i++){var r=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=this.datav.getUint8(this.pos++,!0),a=e*this.width*4+4*i;this.data[a]=o,this.data[a+1]=n,this.data[a+2]=r,this.data[a+3]=s}},jt.prototype.getData=function(){return this.data},window.tmp=jt,function(t){var e=[0,1,2,3,4,4,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,16,17,18,18,19,19,20,20,20,20,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29];function i(){var t=this;function e(t,e){for(var i=0;i|=1&t,t>>>=1,i<<=1,0<--e;);return i>>>1}t.build_tree=function(i){var r,n,o,s=t.dyn_tree,a=t.stat_desc.static_tree,l=t.stat_desc.elems,h=-1;for(i.heap_len=0,i.heap_max=573,r=0;r<l;r++)0!==s[2*r]?(i.heap[++i.heap_len]=h=r,i.depth[r]=0):s[2*r+1]=0;for(;i.heap_len<2;)s[2*(o=i.heap[++i.heap_len]=h<2?++h:0)]=1,i.depth[o]=0,i.opt_len--,a&&(i.static_len-=a[2*o+1]);for(t.max_code=h,r=Math.floor(i.heap_len/2);1<=r;r--)i.pqdownheap(s,r);for(o=l;r=i.heap[1],i.heap[1]=i.heap[i.heap_len--],i.pqdownheap(s,1),n=i.heap[1],i.heap[--i.heap_max]=r,i.heap[--i.heap_max]=n,s[2*o]=s[2*r]+s[2*n],i.depth[o]=Math.max(i.depth[r],i.depth[n])+1,s[2*r+1]=s[2*n+1]=o,i.heap[1]=o++,i.pqdownheap(s,1),2<=i.heap_len;);i.heap[--i.heap_max]=i.heap[1],function(e){var i,r,n,o,s,a,l=t.dyn_tree,h=t.stat_desc.static_tree,c=t.stat_desc.extra_bits,u=t.stat_desc.extra_base,f=t.stat_desc.max_length,d=0;for(o=0;o<=15;o++)e.bl_count[o]=0;for(l[2*e.heap[e.heap_max]+1]=0,i=e.heap_max+1;i<573;i++)f<(o=l[2*l[2*(r=e.heap[i])+1]+1]+1)&&(o=f,d++),l[2*r+1]=o,r>t.max_code||(e.bl_count[o]++,s=0,u<=r&&(s=c[r-u]),a=l[2*r],e.opt_len+=a*(o+s),h&&(e.static_len+=a*(h[2*r+1]+s)));if(0!==d){do{for(o=f-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[f]--,d-=2}while(0<d);for(o=f;0!==o;o--)for(r=e.bl_count[o];0!==r;)(n=e.heap[--i])>t.max_code||(l[2*n+1]!=o&&(e.opt_len+=(o-l[2*n+1])*l[2*n],l[2*n+1]=o),r--)}}(i),function(t,i,r){var n,o,s,a=[],l=0;for(n=1;n<=15;n++)a[n]=l=l+r[n-1]<<1;for(o=0;o<=i;o++)0!==(s=t[2*o+1])&&(t[2*o]=e(a[s]++,s))}(s,t.max_code,i.bl_count)}}function r(t,e,i,r,n){this.static_tree=t,this.extra_bits=e,this.extra_base=i,this.elems=r,this.max_length=n}function n(t,e,i,r,n){this.good_length=t,this.max_lazy=e,this.nice_length=i,this.max_chain=r,this.func=n}i._length_code=[0,1,2,3,4,5,6,7,8,8,9,9,10,10,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28],i.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],i.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],i.d_code=function(t){return t<256?e[t]:e[256+(t>>>7)]},i.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],i.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],i.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],i.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],r.static_ltree=[12,8,140,8,76,8,204,8,44,8,172,8,108,8,236,8,28,8,156,8,92,8,220,8,60,8,188,8,124,8,252,8,2,8,130,8,66,8,194,8,34,8,162,8,98,8,226,8,18,8,146,8,82,8,210,8,50,8,178,8,114,8,242,8,10,8,138,8,74,8,202,8,42,8,170,8,106,8,234,8,26,8,154,8,90,8,218,8,58,8,186,8,122,8,250,8,6,8,134,8,70,8,198,8,38,8,166,8,102,8,230,8,22,8,150,8,86,8,214,8,54,8,182,8,118,8,246,8,14,8,142,8,78,8,206,8,46,8,174,8,110,8,238,8,30,8,158,8,94,8,222,8,62,8,190,8,126,8,254,8,1,8,129,8,65,8,193,8,33,8,161,8,97,8,225,8,17,8,145,8,81,8,209,8,49,8,177,8,113,8,241,8,9,8,137,8,73,8,201,8,41,8,169,8,105,8,233,8,25,8,153,8,89,8,217,8,57,8,185,8,121,8,249,8,5,8,133,8,69,8,197,8,37,8,165,8,101,8,229,8,21,8,149,8,85,8,213,8,53,8,181,8,117,8,245,8,13,8,141,8,77,8,205,8,45,8,173,8,109,8,237,8,29,8,157,8,93,8,221,8,61,8,189,8,125,8,253,8,19,9,275,9,147,9,403,9,83,9,339,9,211,9,467,9,51,9,307,9,179,9,435,9,115,9,371,9,243,9,499,9,11,9,267,9,139,9,395,9,75,9,331,9,203,9,459,9,43,9,299,9,171,9,427,9,107,9,363,9,235,9,491,9,27,9,283,9,155,9,411,9,91,9,347,9,219,9,475,9,59,9,315,9,187,9,443,9,123,9,379,9,251,9,507,9,7,9,263,9,135,9,391,9,71,9,327,9,199,9,455,9,39,9,295,9,167,9,423,9,103,9,359,9,231,9,487,9,23,9,279,9,151,9,407,9,87,9,343,9,215,9,471,9,55,9,311,9,183,9,439,9,119,9,375,9,247,9,503,9,15,9,271,9,143,9,399,9,79,9,335,9,207,9,463,9,47,9,303,9,175,9,431,9,111,9,367,9,239,9,495,9,31,9,287,9,159,9,415,9,95,9,351,9,223,9,479,9,63,9,319,9,191,9,447,9,127,9,383,9,255,9,511,9,0,7,64,7,32,7,96,7,16,7,80,7,48,7,112,7,8,7,72,7,40,7,104,7,24,7,88,7,56,7,120,7,4,7,68,7,36,7,100,7,20,7,84,7,52,7,116,7,3,8,131,8,67,8,195,8,35,8,163,8,99,8,227,8],r.static_dtree=[0,5,16,5,8,5,24,5,4,5,20,5,12,5,28,5,2,5,18,5,10,5,26,5,6,5,22,5,14,5,30,5,1,5,17,5,9,5,25,5,5,5,21,5,13,5,29,5,3,5,19,5,11,5,27,5,7,5,23,5],r.static_l_desc=new r(r.static_ltree,i.extra_lbits,257,286,15),r.static_d_desc=new r(r.static_dtree,i.extra_dbits,0,30,15),r.static_bl_desc=new r(null,i.extra_blbits,0,19,7);var o=[new n(0,0,0,0,0),new n(4,4,8,4,1),new n(4,5,16,8,1),new n(4,6,32,32,1),new n(4,4,16,16,2),new n(8,16,32,32,2),new n(8,16,128,128,2),new n(8,32,128,256,2),new n(32,128,258,1024,2),new n(32,258,258,4096,2)],s=["need dictionary","stream end","","","stream error","data error","","buffer error","",""];function a(t,e,i,r){var n=t[2*e],o=t[2*i];return n<o||n==o&&r[e]<=r[i]}function l(){var t,e,n,l,h,c,u,f,d,p,g,m,v,b,y,x,w,_,S,C,A,L,T,k,O,N,P,E,F,j,I,M,D,B,R,z,U,q,H,W,V,X=this,Y=new i,G=new i,K=new i;function J(){var t;for(t=0;t<286;t++)I[2*t]=0;for(t=0;t<30;t++)M[2*t]=0;for(t=0;t<19;t++)D[2*t]=0;I[512]=1,X.opt_len=X.static_len=0,z=q=0}function $(t,e){var i,r,n=-1,o=t[1],s=0,a=7,l=4;for(0===o&&(a=138,l=3),t[2*(e+1)+1]=65535,i=0;i<=e;i++)r=o,o=t[2*(i+1)+1],++s<a&&r==o||(s<l?D[2*r]+=s:0!==r?(r!=n&&D[2*r]++,D[32]++):s<=10?D[34]++:D[36]++,n=r,l=(s=0)===o?(a=138,3):r==o?(a=6,3):(a=7,4))}function Z(t){X.pending_buf[X.pending++]=t}function Q(t){Z(255&t),Z(t>>>8&255)}function tt(t,e){var i,r=e;16-r<V?(Q(W|=(i=t)<<V&65535),W=i>>>16-V,V+=r-16):(W|=t<<V&65535,V+=r)}function et(t,e){var i=2*t;tt(65535&e[i],65535&e[i+1])}function it(t,e){var i,r,n=-1,o=t[1],s=0,a=7,l=4;for(0===o&&(a=138,l=3),i=0;i<=e;i++)if(r=o,o=t[2*(i+1)+1],!(++s<a&&r==o)){if(s<l)for(;et(r,D),0!=--s;);else 0!==r?(r!=n&&(et(r,D),s--),et(16,D),tt(s-3,2)):s<=10?(et(17,D),tt(s-3,3)):(et(18,D),tt(s-11,7));n=r,l=(s=0)===o?(a=138,3):r==o?(a=6,3):(a=7,4)}}function rt(){16==V?(Q(W),V=W=0):8<=V&&(Z(255&W),W>>>=8,V-=8)}function nt(t,e){var r,n,o;if(X.pending_buf[U+2*z]=t>>>8&255,X.pending_buf[U+2*z+1]=255&t,X.pending_buf[B+z]=255&e,z++,0===t?I[2*e]++:(q++,t--,I[2*(i._length_code[e]+256+1)]++,M[2*i.d_code(t)]++),0==(8191&z)&&2<P){for(r=8*z,n=A-w,o=0;o<30;o++)r+=M[2*o]*(5+i.extra_dbits[o]);if(r>>>=3,q<Math.floor(z/2)&&r<Math.floor(n/2))return!0}return z==R-1}function ot(t,e){var r,n,o,s,a=0;if(0!==z)for(;r=X.pending_buf[U+2*a]<<8&65280|255&X.pending_buf[U+2*a+1],n=255&X.pending_buf[B+a],a++,0===r?et(n,t):(et((o=i._length_code[n])+256+1,t),0!==(s=i.extra_lbits[o])&&tt(n-=i.base_length[o],s),et(o=i.d_code(--r),e),0!==(s=i.extra_dbits[o])&&tt(r-=i.base_dist[o],s)),a<z;);et(256,t),H=t[513]}function st(){8<V?Q(W):0<V&&Z(255&W),V=W=0}function at(t,e,i){var r,n;tt(0+(i?1:0),3),r=t,n=e,st(),H=8,Q(n),Q(~n),X.pending_buf.set(f.subarray(r,r+n),X.pending),X.pending+=n}function lt(e){(function(t,e,n){var o,s,a=0;0<P?(Y.build_tree(X),G.build_tree(X),a=function(){var t;for($(I,Y.max_code),$(M,G.max_code),K.build_tree(X),t=18;3<=t&&0===D[2*i.bl_order[t]+1];t--);return X.opt_len+=3*(t+1)+5+5+4,t}(),o=X.opt_len+3+7>>>3,(s=X.static_len+3+7>>>3)<=o&&(o=s)):o=s=e+5,e+4<=o&&-1!=t?at(t,e,n):s==o?(tt(2+(n?1:0),3),ot(r.static_ltree,r.static_dtree)):(tt(4+(n?1:0),3),function(t,e,r){var n;for(tt(t-257,5),tt(e-1,5),tt(r-4,4),n=0;n<r;n++)tt(D[2*i.bl_order[n]+1],3);it(I,t-1),it(M,e-1)}(Y.max_code+1,G.max_code+1,a+1),ot(I,M)),J(),n&&st()})(0<=w?w:-1,A-w,e),w=A,t.flush_pending()}function ht(){var e,i,r,n;do{if(0==(n=d-T-A)&&0===A&&0===T)n=h;else if(-1==n)n--;else if(h+h-262<=A){for(f.set(f.subarray(h,h+h),0),L-=h,A-=h,w-=h,r=e=v;i=65535&g[--r],g[r]=h<=i?i-h:0,0!=--e;);for(r=e=h;i=65535&p[--r],p[r]=h<=i?i-h:0,0!=--e;);n+=h}if(0===t.avail_in)return;e=t.read_buf(f,A+T,n),3<=(T+=e)&&(m=((m=255&f[A])<<x^255&f[A+1])&y)}while(T<262&&0!==t.avail_in)}function ct(t){var e,i,r=O,n=A,o=k,s=h-262<A?A-(h-262):0,a=j,l=u,c=A+258,d=f[n+o-1],g=f[n+o];F<=k&&(r>>=2),T<a&&(a=T);do{if(f[(e=t)+o]==g&&f[e+o-1]==d&&f[e]==f[n]&&f[++e]==f[n+1]){n+=2,e++;do{}while(f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&f[++n]==f[++e]&&n<c);if(i=258-(c-n),n=c-258,o<i){if(L=t,a<=(o=i))break;d=f[n+o-1],g=f[n+o]}}}while((t=65535&p[t&l])>s&&0!=--r);return o<=T?o:T}function ut(t){return t.total_in=t.total_out=0,t.msg=null,X.pending=0,X.pending_out=0,e=113,l=0,Y.dyn_tree=I,Y.stat_desc=r.static_l_desc,G.dyn_tree=M,G.stat_desc=r.static_d_desc,K.dyn_tree=D,K.stat_desc=r.static_bl_desc,V=W=0,H=8,J(),function(){var t;for(d=2*h,t=g[v-1]=0;t<v-1;t++)g[t]=0;N=o[P].max_lazy,F=o[P].good_length,j=o[P].nice_length,O=o[P].max_chain,_=k=2,m=C=T=w=A=0}(),0}X.depth=[],X.bl_count=[],X.heap=[],I=[],M=[],D=[],X.pqdownheap=function(t,e){for(var i=X.heap,r=i[e],n=e<<1;n<=X.heap_len&&(n<X.heap_len&&a(t,i[n+1],i[n],X.depth)&&n++,!a(t,r,i[n],X.depth));)i[e]=i[n],e=n,n<<=1;i[e]=r},X.deflateInit=function(t,e,i,r,o,s){return r||(r=8),o||(o=8),s||(s=0),t.msg=null,-1==e&&(e=6),o<1||9<o||8!=r||i<9||15<i||e<0||9<e||s<0||2<s?-2:(t.dstate=X,u=(h=1<<(c=i))-1,y=(v=1<<(b=o+7))-1,x=Math.floor((b+3-1)/3),f=new Uint8Array(2*h),p=[],g=[],R=1<<o+6,X.pending_buf=new Uint8Array(4*R),n=4*R,U=Math.floor(R/2),B=3*R,P=e,E=s,ut(t))},X.deflateEnd=function(){return 42!=e&&113!=e&&666!=e?-2:(X.pending_buf=null,f=p=g=null,X.dstate=null,113==e?-3:0)},X.deflateParams=function(t,e,i){var r=0;return-1==e&&(e=6),e<0||9<e||i<0||2<i?-2:(o[P].func!=o[e].func&&0!==t.total_in&&(r=t.deflate(1)),P!=e&&(N=o[P=e].max_lazy,F=o[P].good_length,j=o[P].nice_length,O=o[P].max_chain),E=i,r)},X.deflateSetDictionary=function(t,i,r){var n,o=r,s=0;if(!i||42!=e)return-2;if(o<3)return 0;for(h-262<o&&(s=r-(o=h-262)),f.set(i.subarray(s,s+o),0),w=A=o,m=((m=255&f[0])<<x^255&f[1])&y,n=0;n<=o-3;n++)m=(m<<x^255&f[n+2])&y,p[n&u]=g[m],g[m]=n;return 0},X.deflate=function(i,a){var d,b,O,F,j,I;if(4<a||a<0)return-2;if(!i.next_out||!i.next_in&&0!==i.avail_in||666==e&&4!=a)return i.msg=s[4],-2;if(0===i.avail_out)return i.msg=s[7],-5;if(t=i,F=l,l=a,42==e&&(b=8+(c-8<<4)<<8,3<(O=(P-1&255)>>1)&&(O=3),b|=O<<6,0!==A&&(b|=32),e=113,Z((I=b+=31-b%31)>>8&255),Z(255&I)),0!==X.pending){if(t.flush_pending(),0===t.avail_out)return l=-1,0}else if(0===t.avail_in&&a<=F&&4!=a)return t.msg=s[7],-5;if(666==e&&0!==t.avail_in)return i.msg=s[7],-5;if(0!==t.avail_in||0!==T||0!=a&&666!=e){switch(j=-1,o[P].func){case 0:j=function(e){var i,r=65535;for(n-5<r&&(r=n-5);;){if(T<=1){if(ht(),0===T&&0==e)return 0;if(0===T)break}if(A+=T,i=w+r,((T=0)===A||i<=A)&&(T=A-i,A=i,lt(!1),0===t.avail_out))return 0;if(h-262<=A-w&&(lt(!1),0===t.avail_out))return 0}return lt(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(a);break;case 1:j=function(e){for(var i,r=0;;){if(T<262){if(ht(),T<262&&0==e)return 0;if(0===T)break}if(3<=T&&(m=(m<<x^255&f[A+2])&y,r=65535&g[m],p[A&u]=g[m],g[m]=A),0!==r&&(A-r&65535)<=h-262&&2!=E&&(_=ct(r)),3<=_)if(i=nt(A-L,_-3),T-=_,_<=N&&3<=T){for(_--;m=(m<<x^255&f[2+ ++A])&y,r=65535&g[m],p[A&u]=g[m],g[m]=A,0!=--_;);A++}else A+=_,_=0,m=((m=255&f[A])<<x^255&f[A+1])&y;else i=nt(0,255&f[A]),T--,A++;if(i&&(lt(!1),0===t.avail_out))return 0}return lt(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(a);break;case 2:j=function(e){for(var i,r,n=0;;){if(T<262){if(ht(),T<262&&0==e)return 0;if(0===T)break}if(3<=T&&(m=(m<<x^255&f[A+2])&y,n=65535&g[m],p[A&u]=g[m],g[m]=A),k=_,S=L,_=2,0!==n&&k<N&&(A-n&65535)<=h-262&&(2!=E&&(_=ct(n)),_<=5&&(1==E||3==_&&4096<A-L)&&(_=2)),3<=k&&_<=k){for(r=A+T-3,i=nt(A-1-S,k-3),T-=k-1,k-=2;++A<=r&&(m=(m<<x^255&f[A+2])&y,n=65535&g[m],p[A&u]=g[m],g[m]=A),0!=--k;);if(C=0,_=2,A++,i&&(lt(!1),0===t.avail_out))return 0}else if(0!==C){if((i=nt(0,255&f[A-1]))&&lt(!1),A++,T--,0===t.avail_out)return 0}else C=1,A++,T--}return 0!==C&&(i=nt(0,255&f[A-1]),C=0),lt(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(a)}if(2!=j&&3!=j||(e=666),0==j||2==j)return 0===t.avail_out&&(l=-1),0;if(1==j){if(1==a)tt(2,3),et(256,r.static_ltree),rt(),1+H+10-V<9&&(tt(2,3),et(256,r.static_ltree),rt()),H=7;else if(at(0,0,!1),3==a)for(d=0;d<v;d++)g[d]=0;if(t.flush_pending(),0===t.avail_out)return l=-1,0}}return 4!=a?0:1}}function h(){this.next_in_index=0,this.next_out_index=0,this.avail_in=0,this.total_in=0,this.avail_out=0,this.total_out=0}h.prototype={deflateInit:function(t,e){return this.dstate=new l,e||(e=15),this.dstate.deflateInit(this,t,e)},deflate:function(t){return this.dstate?this.dstate.deflate(this,t):-2},deflateEnd:function(){if(!this.dstate)return-2;var t=this.dstate.deflateEnd();return this.dstate=null,t},deflateParams:function(t,e){return this.dstate?this.dstate.deflateParams(this,t,e):-2},deflateSetDictionary:function(t,e){return this.dstate?this.dstate.deflateSetDictionary(this,t,e):-2},read_buf:function(t,e,i){var r=this.avail_in;return i<r&&(r=i),0===r?0:(this.avail_in-=r,t.set(this.next_in.subarray(this.next_in_index,this.next_in_index+r),e),this.next_in_index+=r,this.total_in+=r,r)},flush_pending:function(){var t=this,e=t.dstate.pending;e>t.avail_out&&(e=t.avail_out),0!==e&&(t.next_out.set(t.dstate.pending_buf.subarray(t.dstate.pending_out,t.dstate.pending_out+e),t.next_out_index),t.next_out_index+=e,t.dstate.pending_out+=e,t.total_out+=e,t.avail_out-=e,t.dstate.pending-=e,0===t.dstate.pending&&(t.dstate.pending_out=0))}};var c=t.zip||t;c.Deflater=c._jzlib_Deflater=function(t){var e=new h,i=new Uint8Array(512),r=t?t.level:-1;void 0===r&&(r=-1),e.deflateInit(r),e.next_out=i,this.append=function(t,r){var n,o=[],s=0,a=0,l=0;if(t.length){e.next_in_index=0,e.next_in=t,e.avail_in=t.length;do{if(e.next_out_index=0,e.avail_out=512,0!=e.deflate(0))throw new Error("deflating: "+e.msg);e.next_out_index&&(512==e.next_out_index?o.push(new Uint8Array(i)):o.push(new Uint8Array(i.subarray(0,e.next_out_index)))),l+=e.next_out_index,r&&0<e.next_in_index&&e.next_in_index!=s&&(r(e.next_in_index),s=e.next_in_index)}while(0<e.avail_in||0===e.avail_out);return n=new Uint8Array(l),o.forEach((function(t){n.set(t,a),a+=t.length})),n}},this.flush=function(){var t,r,n=[],o=0,s=0;do{if(e.next_out_index=0,e.avail_out=512,1!=(t=e.deflate(4))&&0!=t)throw new Error("deflating: "+e.msg);0<512-e.avail_out&&n.push(new Uint8Array(i.subarray(0,e.next_out_index))),s+=e.next_out_index}while(0<e.avail_in||0===e.avail_out);return e.deflateEnd(),r=new Uint8Array(s),n.forEach((function(t){r.set(t,o),o+=t.length})),r}}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")()),("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")()).RGBColor=function(t){var e;t=t||"",this.ok=!1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var i={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};for(var r in i)t==r&&(t=i[r]);for(var n=[{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],o=0;o<n.length;o++){var s=n[o].re,a=n[o].process,l=s.exec(t);l&&(e=a(l),this.r=e[0],this.g=e[1],this.b=e[2],this.ok=!0)}this.r=this.r<0||isNaN(this.r)?0:255<this.r?255:this.r,this.g=this.g<0||isNaN(this.g)?0:255<this.g?255:this.g,this.b=this.b<0||isNaN(this.b)?0:255<this.b?255:this.b,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),i=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==i.length&&(i="0"+i),"#"+t+e+i}},function(t){var e="+".charCodeAt(0),i="/".charCodeAt(0),r="0".charCodeAt(0),n="a".charCodeAt(0),o="A".charCodeAt(0),s="-".charCodeAt(0),a="_".charCodeAt(0),l=function(t){var l=t.charCodeAt(0);return l===e||l===s?62:l===i||l===a?63:l<r?-1:l<r+10?l-r+26+26:l<o+26?l-o:l<n+26?l-n+26:void 0};t.API.TTFFont=function(){function t(t,e,i){var r;if(this.rawData=t,r=this.contents=new c(t),this.contents.pos=4,"ttcf"===r.readString(4)){if(!e)throw new Error("Must specify a font name for TTC files.");throw new Error("Font "+e+" not found in TTC file.")}r.pos=0,this.parse(),this.subset=new O(this),this.registerTTF()}return t.open=function(e,i,r,n){if("string"!=typeof r)throw new Error("Invalid argument supplied in TTFFont.open");return new t(function(t){var e,i,r,n,o,s;if(0<t.length%4)throw new Error("Invalid string. Length must be a multiple of 4");var a=t.length;o="="===t.charAt(a-2)?2:"="===t.charAt(a-1)?1:0,s=new Uint8Array(3*t.length/4-o),r=0<o?t.length-4:t.length;var h=0;function c(t){s[h++]=t}for(i=e=0;e<r;e+=4,i+=3)c((16711680&(n=l(t.charAt(e))<<18|l(t.charAt(e+1))<<12|l(t.charAt(e+2))<<6|l(t.charAt(e+3))))>>16),c((65280&n)>>8),c(255&n);return 2===o?c(255&(n=l(t.charAt(e))<<2|l(t.charAt(e+1))>>4)):1===o&&(c((n=l(t.charAt(e))<<10|l(t.charAt(e+1))<<4|l(t.charAt(e+2))>>2)>>8&255),c(255&n)),s}(r),i,n)},t.prototype.parse=function(){return this.directory=new u(this.contents),this.head=new p(this),this.name=new w(this),this.cmap=new m(this),this.toUnicode=new Map,this.hhea=new v(this),this.maxp=new _(this),this.hmtx=new S(this),this.post=new y(this),this.os2=new b(this),this.loca=new k(this),this.glyf=new A(this),this.ascender=this.os2.exists&&this.os2.ascender||this.hhea.ascender,this.decender=this.os2.exists&&this.os2.decender||this.hhea.decender,this.lineGap=this.os2.exists&&this.os2.lineGap||this.hhea.lineGap,this.bbox=[this.head.xMin,this.head.yMin,this.head.xMax,this.head.yMax]},t.prototype.registerTTF=function(){var t,e,i,r,n;if(this.scaleFactor=1e3/this.head.unitsPerEm,this.bbox=function(){var e,i,r,n;for(n=[],e=0,i=(r=this.bbox).length;e<i;e++)t=r[e],n.push(Math.round(t*this.scaleFactor));return n}.call(this),this.stemV=0,this.post.exists?(i=255&(r=this.post.italic_angle),!0&(e=r>>16)&&(e=-(1+(65535^e))),this.italicAngle=+(e+"."+i)):this.italicAngle=0,this.ascender=Math.round(this.ascender*this.scaleFactor),this.decender=Math.round(this.decender*this.scaleFactor),this.lineGap=Math.round(this.lineGap*this.scaleFactor),this.capHeight=this.os2.exists&&this.os2.capHeight||this.ascender,this.xHeight=this.os2.exists&&this.os2.xHeight||0,this.familyClass=(this.os2.exists&&this.os2.familyClass||0)>>8,this.isSerif=1===(n=this.familyClass)||2===n||3===n||4===n||5===n||7===n,this.isScript=10===this.familyClass,this.flags=0,this.post.isFixedPitch&&(this.flags|=1),this.isSerif&&(this.flags|=2),this.isScript&&(this.flags|=8),0!==this.italicAngle&&(this.flags|=64),this.flags|=32,!this.cmap.unicode)throw new Error("No unicode cmap for font")},t.prototype.characterToGlyph=function(t){var e;return(null!=(e=this.cmap.unicode)?e.codeMap[t]:void 0)||0},t.prototype.widthOfGlyph=function(t){var e;return e=1e3/this.head.unitsPerEm,this.hmtx.forGlyph(t).advance*e},t.prototype.widthOfString=function(t,e,i){var r,n,o,s,a;for(n=s=o=0,a=(t=""+t).length;0<=a?s<a:a<s;n=0<=a?++s:--s)r=t.charCodeAt(n),o+=this.widthOfGlyph(this.characterToGlyph(r))+i*(1e3/e)||0;return o*(e/1e3)},t.prototype.lineHeight=function(t,e){var i;return null==e&&(e=!1),i=e?this.lineGap:0,(this.ascender+i-this.decender)/1e3*t},t}();var h,c=function(){function t(t){this.data=null!=t?t:[],this.pos=0,this.length=this.data.length}return t.prototype.readByte=function(){return this.data[this.pos++]},t.prototype.writeByte=function(t){return this.data[this.pos++]=t},t.prototype.readUInt32=function(){return 16777216*this.readByte()+(this.readByte()<<16)+(this.readByte()<<8)+this.readByte()},t.prototype.writeUInt32=function(t){return this.writeByte(t>>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt32=function(){var t;return 2147483648<=(t=this.readUInt32())?t-4294967296:t},t.prototype.writeInt32=function(t){return t<0&&(t+=4294967296),this.writeUInt32(t)},t.prototype.readUInt16=function(){return this.readByte()<<8|this.readByte()},t.prototype.writeUInt16=function(t){return this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt16=function(){var t;return 32768<=(t=this.readUInt16())?t-65536:t},t.prototype.writeInt16=function(t){return t<0&&(t+=65536),this.writeUInt16(t)},t.prototype.readString=function(t){var e,i,r;for(i=[],e=r=0;0<=t?r<t:t<r;e=0<=t?++r:--r)i[e]=String.fromCharCode(this.readByte());return i.join("")},t.prototype.writeString=function(t){var e,i,r,n;for(n=[],e=i=0,r=t.length;0<=r?i<r:r<i;e=0<=r?++i:--i)n.push(this.writeByte(t.charCodeAt(e)));return n},t.prototype.readShort=function(){return this.readInt16()},t.prototype.writeShort=function(t){return this.writeInt16(t)},t.prototype.readLongLong=function(){var t,e,i,r,n,o,s,a;return t=this.readByte(),e=this.readByte(),i=this.readByte(),r=this.readByte(),n=this.readByte(),o=this.readByte(),s=this.readByte(),a=this.readByte(),128&t?-1*(72057594037927940*(255^t)+281474976710656*(255^e)+1099511627776*(255^i)+4294967296*(255^r)+16777216*(255^n)+65536*(255^o)+256*(255^s)+(255^a)+1):72057594037927940*t+281474976710656*e+1099511627776*i+4294967296*r+16777216*n+65536*o+256*s+a},t.prototype.writeLongLong=function(t){var e,i;return e=Math.floor(t/4294967296),i=4294967295&t,this.writeByte(e>>24&255),this.writeByte(e>>16&255),this.writeByte(e>>8&255),this.writeByte(255&e),this.writeByte(i>>24&255),this.writeByte(i>>16&255),this.writeByte(i>>8&255),this.writeByte(255&i)},t.prototype.readInt=function(){return this.readInt32()},t.prototype.writeInt=function(t){return this.writeInt32(t)},t.prototype.read=function(t){var e,i;for(e=[],i=0;0<=t?i<t:t<i;0<=t?++i:--i)e.push(this.readByte());return e},t.prototype.write=function(t){var e,i,r,n;for(n=[],i=0,r=t.length;i<r;i++)e=t[i],n.push(this.writeByte(e));return n},t}(),u=function(){var t;function e(t){var e,i,r;for(this.scalarType=t.readInt(),this.tableCount=t.readShort(),this.searchRange=t.readShort(),this.entrySelector=t.readShort(),this.rangeShift=t.readShort(),this.tables={},i=0,r=this.tableCount;0<=r?i<r:r<i;0<=r?++i:--i)e={tag:t.readString(4),checksum:t.readInt(),offset:t.readInt(),length:t.readInt()},this.tables[e.tag]=e}return e.prototype.encode=function(e){var i,r,n,o,s,a,l,h,u,f,d,p,g;for(g in d=Object.keys(e).length,a=Math.log(2),u=16*Math.floor(Math.log(d)/a),o=Math.floor(u/a),h=16*d-u,(r=new c).writeInt(this.scalarType),r.writeShort(d),r.writeShort(u),r.writeShort(o),r.writeShort(h),n=16*d,l=r.pos+n,s=null,p=[],e)for(f=e[g],r.writeString(g),r.writeInt(t(f)),r.writeInt(l),r.writeInt(f.length),p=p.concat(f),"head"===g&&(s=l),l+=f.length;l%4;)p.push(0),l++;return r.write(p),i=2981146554-t(r.data),r.pos=s+8,r.writeUInt32(i),r.data},t=function(t){var e,i,r,n;for(t=C.call(t);t.length%4;)t.push(0);for(i=new c(t),r=e=0,n=t.length;r<n;r+=4)e+=i.readUInt32();return 4294967295&e},e}(),f={}.hasOwnProperty,d=function(t,e){for(var i in e)f.call(e,i)&&(t[i]=e[i]);function r(){this.constructor=t}return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t};h=function(){function t(t){var e;this.file=t,e=this.file.directory.tables[this.tag],this.exists=!!e,e&&(this.offset=e.offset,this.length=e.length,this.parse(this.file.contents))}return t.prototype.parse=function(){},t.prototype.encode=function(){},t.prototype.raw=function(){return this.exists?(this.file.contents.pos=this.offset,this.file.contents.read(this.length)):null},t}();var p=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="head",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.revision=t.readInt(),this.checkSumAdjustment=t.readInt(),this.magicNumber=t.readInt(),this.flags=t.readShort(),this.unitsPerEm=t.readShort(),this.created=t.readLongLong(),this.modified=t.readLongLong(),this.xMin=t.readShort(),this.yMin=t.readShort(),this.xMax=t.readShort(),this.yMax=t.readShort(),this.macStyle=t.readShort(),this.lowestRecPPEM=t.readShort(),this.fontDirectionHint=t.readShort(),this.indexToLocFormat=t.readShort(),this.glyphDataFormat=t.readShort()},e.prototype.encode=function(t){var e;return(e=new c).writeInt(this.version),e.writeInt(this.revision),e.writeInt(this.checkSumAdjustment),e.writeInt(this.magicNumber),e.writeShort(this.flags),e.writeShort(this.unitsPerEm),e.writeLongLong(this.created),e.writeLongLong(this.modified),e.writeShort(this.xMin),e.writeShort(this.yMin),e.writeShort(this.xMax),e.writeShort(this.yMax),e.writeShort(this.macStyle),e.writeShort(this.lowestRecPPEM),e.writeShort(this.fontDirectionHint),e.writeShort(t),e.writeShort(this.glyphDataFormat),e.data},e}(),g=function(){function t(t,e){var i,r,n,o,s,a,l,h,c,u,f,d,p,g,m,v,b,y;switch(this.platformID=t.readUInt16(),this.encodingID=t.readShort(),this.offset=e+t.readInt(),c=t.pos,t.pos=this.offset,this.format=t.readUInt16(),this.length=t.readUInt16(),this.language=t.readUInt16(),this.isUnicode=3===this.platformID&&1===this.encodingID&&4===this.format||0===this.platformID&&4===this.format,this.codeMap={},this.format){case 0:for(a=m=0;m<256;a=++m)this.codeMap[a]=t.readByte();break;case 4:for(f=t.readUInt16(),u=f/2,t.pos+=6,n=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:u<e;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),t.pos+=2,p=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:u<e;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),l=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:u<e;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),h=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:u<e;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),r=(this.length-t.pos+this.offset)/2,s=function(){var e,i;for(i=[],a=e=0;0<=r?e<r:r<e;a=0<=r?++e:--e)i.push(t.readUInt16());return i}(),a=v=0,y=n.length;v<y;a=++v)for(g=n[a],i=b=d=p[a];d<=g?b<=g:g<=b;i=d<=g?++b:--b)0===h[a]?o=i+l[a]:0!==(o=s[h[a]/2+(i-d)-(u-a)]||0)&&(o+=l[a]),this.codeMap[i]=65535&o}t.pos=c}return t.encode=function(t,e){var i,r,n,o,s,a,l,h,u,f,d,p,g,m,v,b,y,x,w,_,S,C,A,L,T,k,O,N,P,E,F,j,I,M,D,B,R,z,U,q,H,W,V,X,Y,G;switch(N=new c,o=Object.keys(t).sort((function(t,e){return t-e})),e){case"macroman":for(g=0,m=function(){var t,e;for(e=[],p=t=0;t<256;p=++t)e.push(0);return e}(),b={0:0},n={},P=0,I=o.length;P<I;P++)null==b[V=t[r=o[P]]]&&(b[V]=++g),n[r]={old:t[r],new:b[t[r]]},m[r]=b[t[r]];return N.writeUInt16(1),N.writeUInt16(0),N.writeUInt32(12),N.writeUInt16(0),N.writeUInt16(262),N.writeUInt16(0),N.write(m),{charMap:n,subtable:N.data,maxGlyphID:g+1};case"unicode":for(k=[],u=[],b={},i={},v=l=null,E=y=0,M=o.length;E<M;E++)null==b[w=t[r=o[E]]]&&(b[w]=++y),i[r]={old:w,new:b[w]},s=b[w]-r,null!=v&&s===l||(v&&u.push(v),k.push(r),l=s),v=r;for(v&&u.push(v),u.push(65535),k.push(65535),L=2*(A=k.length),C=2*Math.pow(Math.log(A)/Math.LN2,2),f=Math.log(C/2)/Math.LN2,S=2*A-C,a=[],_=[],d=[],p=F=0,D=k.length;F<D;p=++F){if(T=k[p],h=u[p],65535===T){a.push(0),_.push(0);break}if(32768<=T-(O=i[T].new))for(a.push(0),_.push(2*(d.length+A-p)),r=j=T;T<=h?j<=h:h<=j;r=T<=h?++j:--j)d.push(i[r].new);else a.push(O-T),_.push(0)}for(N.writeUInt16(3),N.writeUInt16(1),N.writeUInt32(12),N.writeUInt16(4),N.writeUInt16(16+8*A+2*d.length),N.writeUInt16(0),N.writeUInt16(L),N.writeUInt16(C),N.writeUInt16(f),N.writeUInt16(S),H=0,B=u.length;H<B;H++)r=u[H],N.writeUInt16(r);for(N.writeUInt16(0),W=0,R=k.length;W<R;W++)r=k[W],N.writeUInt16(r);for(X=0,z=a.length;X<z;X++)s=a[X],N.writeUInt16(s);for(Y=0,U=_.length;Y<U;Y++)x=_[Y],N.writeUInt16(x);for(G=0,q=d.length;G<q;G++)g=d[G],N.writeUInt16(g);return{charMap:i,subtable:N.data,maxGlyphID:y+1}}},t}(),m=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="cmap",e.prototype.parse=function(t){var e,i,r;for(t.pos=this.offset,this.version=t.readUInt16(),i=t.readUInt16(),this.tables=[],this.unicode=null,r=0;0<=i?r<i:i<r;0<=i?++r:--r)e=new g(t,this.offset),this.tables.push(e),e.isUnicode&&null==this.unicode&&(this.unicode=e);return!0},e.encode=function(t,e){var i,r;return null==e&&(e="macroman"),i=g.encode(t,e),(r=new c).writeUInt16(0),r.writeUInt16(1),i.table=r.data.concat(i.subtable),i},e}(),v=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="hhea",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.ascender=t.readShort(),this.decender=t.readShort(),this.lineGap=t.readShort(),this.advanceWidthMax=t.readShort(),this.minLeftSideBearing=t.readShort(),this.minRightSideBearing=t.readShort(),this.xMaxExtent=t.readShort(),this.caretSlopeRise=t.readShort(),this.caretSlopeRun=t.readShort(),this.caretOffset=t.readShort(),t.pos+=8,this.metricDataFormat=t.readShort(),this.numberOfMetrics=t.readUInt16()},e}(),b=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="OS/2",e.prototype.parse=function(t){if(t.pos=this.offset,this.version=t.readUInt16(),this.averageCharWidth=t.readShort(),this.weightClass=t.readUInt16(),this.widthClass=t.readUInt16(),this.type=t.readShort(),this.ySubscriptXSize=t.readShort(),this.ySubscriptYSize=t.readShort(),this.ySubscriptXOffset=t.readShort(),this.ySubscriptYOffset=t.readShort(),this.ySuperscriptXSize=t.readShort(),this.ySuperscriptYSize=t.readShort(),this.ySuperscriptXOffset=t.readShort(),this.ySuperscriptYOffset=t.readShort(),this.yStrikeoutSize=t.readShort(),this.yStrikeoutPosition=t.readShort(),this.familyClass=t.readShort(),this.panose=function(){var e,i;for(i=[],e=0;e<10;++e)i.push(t.readByte());return i}(),this.charRange=function(){var e,i;for(i=[],e=0;e<4;++e)i.push(t.readInt());return i}(),this.vendorID=t.readString(4),this.selection=t.readShort(),this.firstCharIndex=t.readShort(),this.lastCharIndex=t.readShort(),0<this.version&&(this.ascent=t.readShort(),this.descent=t.readShort(),this.lineGap=t.readShort(),this.winAscent=t.readShort(),this.winDescent=t.readShort(),this.codePageRange=function(){var e,i;for(i=[],e=0;e<2;++e)i.push(t.readInt());return i}(),1<this.version))return this.xHeight=t.readShort(),this.capHeight=t.readShort(),this.defaultChar=t.readShort(),this.breakChar=t.readShort(),this.maxContext=t.readShort()},e}(),y=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="post",e.prototype.parse=function(t){var e,i,r,n;switch(t.pos=this.offset,this.format=t.readInt(),this.italicAngle=t.readInt(),this.underlinePosition=t.readShort(),this.underlineThickness=t.readShort(),this.isFixedPitch=t.readInt(),this.minMemType42=t.readInt(),this.maxMemType42=t.readInt(),this.minMemType1=t.readInt(),this.maxMemType1=t.readInt(),this.format){case 65536:break;case 131072:for(i=t.readUInt16(),this.glyphNameIndex=[],r=0;0<=i?r<i:i<r;0<=i?++r:--r)this.glyphNameIndex.push(t.readUInt16());for(this.names=[],n=[];t.pos<this.offset+this.length;)e=t.readByte(),n.push(this.names.push(t.readString(e)));return n;case 151552:return i=t.readUInt16(),this.offsets=t.read(i);case 196608:break;case 262144:return this.map=function(){var e,i,r;for(r=[],e=0,i=this.file.maxp.numGlyphs;0<=i?e<i:i<e;0<=i?++e:--e)r.push(t.readUInt32());return r}.call(this)}},e}(),x=function(t,e){this.raw=t,this.length=t.length,this.platformID=e.platformID,this.encodingID=e.encodingID,this.languageID=e.languageID},w=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="name",e.prototype.parse=function(t){var e,i,r,n,o,s,a,l,h,c,u,f;for(t.pos=this.offset,t.readShort(),e=t.readShort(),s=t.readShort(),i=[],n=h=0;0<=e?h<e:e<h;n=0<=e?++h:--h)i.push({platformID:t.readShort(),encodingID:t.readShort(),languageID:t.readShort(),nameID:t.readShort(),length:t.readShort(),offset:this.offset+s+t.readShort()});for(a={},n=c=0,u=i.length;c<u;n=++c)r=i[n],t.pos=r.offset,l=t.readString(r.length),o=new x(l,r),null==a[f=r.nameID]&&(a[f]=[]),a[r.nameID].push(o);this.strings=a,this.copyright=a[0],this.fontFamily=a[1],this.fontSubfamily=a[2],this.uniqueSubfamily=a[3],this.fontName=a[4],this.version=a[5];try{this.postscriptName=a[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}catch(t){this.postscriptName=a[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}return this.trademark=a[7],this.manufacturer=a[8],this.designer=a[9],this.description=a[10],this.vendorUrl=a[11],this.designerUrl=a[12],this.license=a[13],this.licenseUrl=a[14],this.preferredFamily=a[15],this.preferredSubfamily=a[17],this.compatibleFull=a[18],this.sampleText=a[19]},e}(),_=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="maxp",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.numGlyphs=t.readUInt16(),this.maxPoints=t.readUInt16(),this.maxContours=t.readUInt16(),this.maxCompositePoints=t.readUInt16(),this.maxComponentContours=t.readUInt16(),this.maxZones=t.readUInt16(),this.maxTwilightPoints=t.readUInt16(),this.maxStorage=t.readUInt16(),this.maxFunctionDefs=t.readUInt16(),this.maxInstructionDefs=t.readUInt16(),this.maxStackElements=t.readUInt16(),this.maxSizeOfInstructions=t.readUInt16(),this.maxComponentElements=t.readUInt16(),this.maxComponentDepth=t.readUInt16()},e}(),S=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="hmtx",e.prototype.parse=function(t){var e,i,r,n,o,s,a;for(t.pos=this.offset,this.metrics=[],n=0,s=this.file.hhea.numberOfMetrics;0<=s?n<s:s<n;0<=s?++n:--n)this.metrics.push({advance:t.readUInt16(),lsb:t.readInt16()});for(i=this.file.maxp.numGlyphs-this.file.hhea.numberOfMetrics,this.leftSideBearings=function(){var e,r;for(r=[],e=0;0<=i?e<i:i<e;0<=i?++e:--e)r.push(t.readInt16());return r}(),this.widths=function(){var t,e,i,n;for(n=[],t=0,e=(i=this.metrics).length;t<e;t++)r=i[t],n.push(r.advance);return n}.call(this),e=this.widths[this.widths.length-1],a=[],o=0;0<=i?o<i:i<o;0<=i?++o:--o)a.push(this.widths.push(e));return a},e.prototype.forGlyph=function(t){return t in this.metrics?this.metrics[t]:{advance:this.metrics[this.metrics.length-1].advance,lsb:this.leftSideBearings[t-this.metrics.length]}},e}(),C=[].slice,A=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="glyf",e.prototype.parse=function(t){return this.cache={}},e.prototype.glyphFor=function(t){var e,i,r,n,o,s,a,l,h,u;return(t=t)in this.cache?this.cache[t]:(n=this.file.loca,e=this.file.contents,i=n.indexOf(t),0===(r=n.lengthOf(t))?this.cache[t]=null:(e.pos=this.offset+i,o=(s=new c(e.read(r))).readShort(),l=s.readShort(),u=s.readShort(),a=s.readShort(),h=s.readShort(),this.cache[t]=-1===o?new T(s,l,u,a,h):new L(s,o,l,u,a,h),this.cache[t]))},e.prototype.encode=function(t,e,i){var r,n,o,s,a;for(o=[],n=[],s=0,a=e.length;s<a;s++)r=t[e[s]],n.push(o.length),r&&(o=o.concat(r.encode(i)));return n.push(o.length),{table:o,offsets:n}},e}(),L=function(){function t(t,e,i,r,n,o){this.raw=t,this.numberOfContours=e,this.xMin=i,this.yMin=r,this.xMax=n,this.yMax=o,this.compound=!1}return t.prototype.encode=function(){return this.raw.data},t}(),T=function(){function t(t,e,i,r,n){var o,s;for(this.raw=t,this.xMin=e,this.yMin=i,this.xMax=r,this.yMax=n,this.compound=!0,this.glyphIDs=[],this.glyphOffsets=[],o=this.raw;s=o.readShort(),this.glyphOffsets.push(o.pos),this.glyphIDs.push(o.readShort()),32&s;)o.pos+=1&s?4:2,128&s?o.pos+=8:64&s?o.pos+=4:8&s&&(o.pos+=2)}return t.prototype.encode=function(t){var e,i,r,n,o;for(i=new c(C.call(this.raw.data)),e=r=0,n=(o=this.glyphIDs).length;r<n;e=++r)o[e],i.pos=this.glyphOffsets[e];return i.data},t}(),k=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return d(e,h),e.prototype.tag="loca",e.prototype.parse=function(t){var e;return t.pos=this.offset,e=this.file.head.indexToLocFormat,this.offsets=0===e?function(){var e,i,r;for(r=[],e=0,i=this.length;e<i;e+=2)r.push(2*t.readUInt16());return r}.call(this):function(){var e,i,r;for(r=[],e=0,i=this.length;e<i;e+=4)r.push(t.readUInt32());return r}.call(this)},e.prototype.indexOf=function(t){return this.offsets[t]},e.prototype.lengthOf=function(t){return this.offsets[t+1]-this.offsets[t]},e.prototype.encode=function(t,e){for(var i=new Uint32Array(this.offsets.length),r=0,n=0,o=0;o<i.length;++o)if(i[o]=r,n<e.length&&e[n]==o){++n,i[o]=r;var s=this.offsets[o],a=this.offsets[o+1]-s;0<a&&(r+=a)}for(var l=new Array(4*i.length),h=0;h<i.length;++h)l[4*h+3]=255&i[h],l[4*h+2]=(65280&i[h])>>8,l[4*h+1]=(16711680&i[h])>>16,l[4*h]=(4278190080&i[h])>>24;return l},e}(),O=function(){function t(t){this.font=t,this.subset={},this.unicodes={},this.next=33}return t.prototype.generateCmap=function(){var t,e,i,r,n;for(e in r=this.font.cmap.tables[0].codeMap,t={},n=this.subset)i=n[e],t[e]=r[i];return t},t.prototype.glyphsFor=function(t){var e,i,r,n,o,s,a;for(r={},o=0,s=t.length;o<s;o++)r[n=t[o]]=this.font.glyf.glyphFor(n);for(n in e=[],r)(null!=(i=r[n])?i.compound:void 0)&&e.push.apply(e,i.glyphIDs);if(0<e.length)for(n in a=this.glyphsFor(e))i=a[n],r[n]=i;return r},t.prototype.encode=function(t,e){var i,r,n,o,s,a,l,h,c,u,f,d,p,g,v;for(r in i=m.encode(this.generateCmap(),"unicode"),o=this.glyphsFor(t),f={0:0},v=i.charMap)f[(a=v[r]).old]=a.new;for(d in u=i.maxGlyphID,o)d in f||(f[d]=u++);return h=function(t){var e,i;for(e in i={},t)i[t[e]]=e;return i}(f),c=Object.keys(h).sort((function(t,e){return t-e})),p=function(){var t,e,i;for(i=[],t=0,e=c.length;t<e;t++)s=c[t],i.push(h[s]);return i}(),n=this.font.glyf.encode(o,p,f),l=this.font.loca.encode(n.offsets,p),g={cmap:this.font.cmap.raw(),glyf:n.table,loca:l,hmtx:this.font.hmtx.raw(),hhea:this.font.hhea.raw(),maxp:this.font.maxp.raw(),post:this.font.post.raw(),name:this.font.name.raw(),head:this.font.head.encode(e)},this.font.os2.exists&&(g["OS/2"]=this.font.os2.raw()),this.font.directory.encode(g)},t}();t.API.PDFObject=function(){var t;function e(){}return t=function(t,e){return(Array(e+1).join("0")+t).slice(-e)},e.convert=function(i){var r,n,o,s;if(Array.isArray(i))return"["+function(){var t,n,o;for(o=[],t=0,n=i.length;t<n;t++)r=i[t],o.push(e.convert(r));return o}().join(" ")+"]";if("string"==typeof i)return"/"+i;if(null!=i?i.isString:void 0)return"("+i+")";if(i instanceof Date)return"(D:"+t(i.getUTCFullYear(),4)+t(i.getUTCMonth(),2)+t(i.getUTCDate(),2)+t(i.getUTCHours(),2)+t(i.getUTCMinutes(),2)+t(i.getUTCSeconds(),2)+"Z)";if("[object Object]"!=={}.toString.call(i))return""+i;for(n in o=["<<"],i)s=i[n],o.push("/"+n+" "+e.convert(s));return o.push(">>"),o.join("\n")},e}()}(pt),kt="undefined"!=typeof self&&self||"undefined"!=typeof window&&window||void 0!==i.g&&i.g||Function('return typeof this === "object" && this.content')()||Function("return this")(),Ot=function(){var t,e,i;function r(t){var e,i,r,n,o,s,a,l,h,c,u,f,d,p;for(this.data=t,this.pos=8,this.palette=[],this.imgData=[],this.transparency={},this.animation=null,this.text={},s=null;;){switch(e=this.readUInt32(),h=function(){var t,e;for(e=[],t=0;t<4;++t)e.push(String.fromCharCode(this.data[this.pos++]));return e}.call(this).join("")){case"IHDR":this.width=this.readUInt32(),this.height=this.readUInt32(),this.bits=this.data[this.pos++],this.colorType=this.data[this.pos++],this.compressionMethod=this.data[this.pos++],this.filterMethod=this.data[this.pos++],this.interlaceMethod=this.data[this.pos++];break;case"acTL":this.animation={numFrames:this.readUInt32(),numPlays:this.readUInt32()||1/0,frames:[]};break;case"PLTE":this.palette=this.read(e);break;case"fcTL":s&&this.animation.frames.push(s),this.pos+=4,s={width:this.readUInt32(),height:this.readUInt32(),xOffset:this.readUInt32(),yOffset:this.readUInt32()},o=this.readUInt16(),n=this.readUInt16()||100,s.delay=1e3*o/n,s.disposeOp=this.data[this.pos++],s.blendOp=this.data[this.pos++],s.data=[];break;case"IDAT":case"fdAT":for("fdAT"===h&&(this.pos+=4,e-=4),t=(null!=s?s.data:void 0)||this.imgData,f=0;0<=e?f<e:e<f;0<=e?++f:--f)t.push(this.data[this.pos++]);break;case"tRNS":switch(this.transparency={},this.colorType){case 3:if(r=this.palette.length/3,this.transparency.indexed=this.read(e),this.transparency.indexed.length>r)throw new Error("More transparent colors than palette size");if(0<(c=r-this.transparency.indexed.length))for(d=0;0<=c?d<c:c<d;0<=c?++d:--d)this.transparency.indexed.push(255);break;case 0:this.transparency.grayscale=this.read(e)[0];break;case 2:this.transparency.rgb=this.read(e)}break;case"tEXt":a=(u=this.read(e)).indexOf(0),l=String.fromCharCode.apply(String,u.slice(0,a)),this.text[l]=String.fromCharCode.apply(String,u.slice(a+1));break;case"IEND":return s&&this.animation.frames.push(s),this.colors=function(){switch(this.colorType){case 0:case 3:case 4:return 1;case 2:case 6:return 3}}.call(this),this.hasAlphaChannel=4===(p=this.colorType)||6===p,i=this.colors+(this.hasAlphaChannel?1:0),this.pixelBitlength=this.bits*i,this.colorSpace=function(){switch(this.colors){case 1:return"DeviceGray";case 3:return"DeviceRGB"}}.call(this),void(this.imgData=new Uint8Array(this.imgData));default:this.pos+=e}if(this.pos+=4,this.pos>this.data.length)throw new Error("Incomplete or corrupt PNG file")}}r.load=function(t,e,i){var n;return"function"==typeof e&&(i=e),(n=new XMLHttpRequest).open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(){var t;return t=new r(new Uint8Array(n.response||n.mozResponseArrayBuffer)),"function"==typeof(null!=e?e.getContext:void 0)&&t.render(e),"function"==typeof i?i(t):void 0},n.send(null)},r.prototype.read=function(t){var e,i;for(i=[],e=0;0<=t?e<t:t<e;0<=t?++e:--e)i.push(this.data[this.pos++]);return i},r.prototype.readUInt32=function(){return this.data[this.pos++]<<24|this.data[this.pos++]<<16|this.data[this.pos++]<<8|this.data[this.pos++]},r.prototype.readUInt16=function(){return this.data[this.pos++]<<8|this.data[this.pos++]},r.prototype.decodePixels=function(t){var e=this.pixelBitlength/8,i=new Uint8Array(this.width*this.height*e),r=0,n=this;if(null==t&&(t=this.imgData),0===t.length)return new Uint8Array(0);function o(o,s,a,l){var h,c,u,f,d,p,g,m,v,b,y,x,w,_,S,C,A,L,T,k,O,N=Math.ceil((n.width-o)/a),P=Math.ceil((n.height-s)/l),E=n.width==N&&n.height==P;for(_=e*N,x=E?i:new Uint8Array(_*P),p=t.length,c=w=0;w<P&&r<p;){switch(t[r++]){case 0:for(f=A=0;A<_;f=A+=1)x[c++]=t[r++];break;case 1:for(f=L=0;L<_;f=L+=1)h=t[r++],d=f<e?0:x[c-e],x[c++]=(h+d)%256;break;case 2:for(f=T=0;T<_;f=T+=1)h=t[r++],u=(f-f%e)/e,S=w&&x[(w-1)*_+u*e+f%e],x[c++]=(S+h)%256;break;case 3:for(f=k=0;k<_;f=k+=1)h=t[r++],u=(f-f%e)/e,d=f<e?0:x[c-e],S=w&&x[(w-1)*_+u*e+f%e],x[c++]=(h+Math.floor((d+S)/2))%256;break;case 4:for(f=O=0;O<_;f=O+=1)h=t[r++],u=(f-f%e)/e,d=f<e?0:x[c-e],0===w?S=C=0:(S=x[(w-1)*_+u*e+f%e],C=u&&x[(w-1)*_+(u-1)*e+f%e]),g=d+S-C,m=Math.abs(g-d),b=Math.abs(g-S),y=Math.abs(g-C),v=m<=b&&m<=y?d:b<=y?S:C,x[c++]=(h+v)%256;break;default:throw new Error("Invalid filter algorithm: "+t[r-1])}if(!E){var F=((s+w*l)*n.width+o)*e,j=w*_;for(f=0;f<N;f+=1){for(var I=0;I<e;I+=1)i[F++]=x[j++];F+=(a-1)*e}}w++}}return t=(t=new Mt(t)).getBytes(),1==n.interlaceMethod?(o(0,0,8,8),o(4,0,8,8),o(0,4,4,8),o(2,0,4,4),o(0,2,2,4),o(1,0,2,2),o(0,1,1,2)):o(0,0,1,1),i},r.prototype.decodePalette=function(){var t,e,i,r,n,o,s,a,l;for(i=this.palette,o=this.transparency.indexed||[],n=new Uint8Array((o.length||0)+i.length),r=0,i.length,e=s=t=0,a=i.length;s<a;e=s+=3)n[r++]=i[e],n[r++]=i[e+1],n[r++]=i[e+2],n[r++]=null!=(l=o[t++])?l:255;return n},r.prototype.copyToImageData=function(t,e){var i,r,n,o,s,a,l,h,c,u,f;if(r=this.colors,c=null,i=this.hasAlphaChannel,this.palette.length&&(c=null!=(f=this._decodedPalette)?f:this._decodedPalette=this.decodePalette(),r=4,i=!0),h=(n=t.data||t).length,s=c||e,o=a=0,1===r)for(;o<h;)l=c?4*e[o/4]:a,u=s[l++],n[o++]=u,n[o++]=u,n[o++]=u,n[o++]=i?s[l++]:255,a=l;else for(;o<h;)l=c?4*e[o/4]:a,n[o++]=s[l++],n[o++]=s[l++],n[o++]=s[l++],n[o++]=i?s[l++]:255,a=l},r.prototype.decode=function(){var t;return t=new Uint8Array(this.width*this.height*4),this.copyToImageData(t,this.decodePixels()),t};try{e=kt.document.createElement("canvas"),i=e.getContext("2d")}catch(t){return-1}return t=function(t){var r;return i.width=t.width,i.height=t.height,i.clearRect(0,0,t.width,t.height),i.putImageData(t,0,0),(r=new Image).src=e.toDataURL(),r},r.prototype.decodeFrames=function(e){var i,r,n,o,s,a,l,h;if(this.animation){for(h=[],r=s=0,a=(l=this.animation.frames).length;s<a;r=++s)i=l[r],n=e.createImageData(i.width,i.height),o=this.decodePixels(new Uint8Array(i.data)),this.copyToImageData(n,o),i.imageData=n,h.push(i.image=t(n));return h}},r.prototype.renderFrame=function(t,e){var i,r,n;return i=(r=this.animation.frames)[e],n=r[e-1],0===e&&t.clearRect(0,0,this.width,this.height),1===(null!=n?n.disposeOp:void 0)?t.clearRect(n.xOffset,n.yOffset,n.width,n.height):2===(null!=n?n.disposeOp:void 0)&&t.putImageData(n.imageData,n.xOffset,n.yOffset),0===i.blendOp&&t.clearRect(i.xOffset,i.yOffset,i.width,i.height),t.drawImage(i.image,i.xOffset,i.yOffset)},r.prototype.animate=function(t){var e,i,r,n,o,s,a=this;return i=0,s=this.animation,n=s.numFrames,r=s.frames,o=s.numPlays,(e=function(){var s,l;if(s=i++%n,l=r[s],a.renderFrame(t,s),1<n&&i/n<o)return a.animation._timeout=setTimeout(e,l.delay)})()},r.prototype.stopAnimation=function(){var t;return clearTimeout(null!=(t=this.animation)?t._timeout:void 0)},r.prototype.render=function(t){var e,i;return t._png&&t._png.stopAnimation(),t._png=this,t.width=this.width,t.height=this.height,e=t.getContext("2d"),this.animation?(this.decodeFrames(e),this.animate(e)):(i=e.createImageData(this.width,this.height),this.copyToImageData(i,this.decodePixels()),e.putImageData(i,0,0))},r}(),kt.PNG=Ot;var It=function(){function t(){this.pos=0,this.bufferLength=0,this.eof=!1,this.buffer=null}return t.prototype={ensureBuffer:function(t){var e=this.buffer,i=e?e.byteLength:0;if(t<i)return e;for(var r=512;r<t;)r<<=1;for(var n=new Uint8Array(r),o=0;o<i;++o)n[o]=e[o];return this.buffer=n},getByte:function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return null;this.readBlock()}return this.buffer[this.pos++]},getBytes:function(t){var e=this.pos;if(t){this.ensureBuffer(e+t);for(var i=e+t;!this.eof&&this.bufferLength<i;)this.readBlock();var r=this.bufferLength;r<i&&(i=r)}else{for(;!this.eof;)this.readBlock();i=this.bufferLength}return this.pos=i,this.buffer.subarray(e,i)},lookChar:function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return null;this.readBlock()}return String.fromCharCode(this.buffer[this.pos])},getChar:function(){for(var t=this.pos;this.bufferLength<=t;){if(this.eof)return null;this.readBlock()}return String.fromCharCode(this.buffer[this.pos++])},makeSubStream:function(t,e,i){for(var r=t+e;this.bufferLength<=r&&!this.eof;)this.readBlock();return new Stream(this.buffer,t,e,i)},skip:function(t){t||(t=1),this.pos+=t},reset:function(){this.pos=0}},t}(),Mt=function(){if("undefined"!=typeof Uint32Array){var t=new Uint32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),e=new Uint32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),i=new Uint32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),r=[new Uint32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],n=[new Uint32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5];return(s.prototype=Object.create(It.prototype)).getBits=function(t){for(var e,i=this.codeSize,r=this.codeBuf,n=this.bytes,s=this.bytesPos;i<t;)void 0===(e=n[s++])&&o("Bad encoding in flate stream"),r|=e<<i,i+=8;return e=r&(1<<t)-1,this.codeBuf=r>>t,this.codeSize=i-=t,this.bytesPos=s,e},s.prototype.getCode=function(t){for(var e=t[0],i=t[1],r=this.codeSize,n=this.codeBuf,s=this.bytes,a=this.bytesPos;r<i;){var l;void 0===(l=s[a++])&&o("Bad encoding in flate stream"),n|=l<<r,r+=8}var h=e[n&(1<<i)-1],c=h>>16,u=65535&h;return(0==r||r<c||0==c)&&o("Bad encoding in flate stream"),this.codeBuf=n>>c,this.codeSize=r-c,this.bytesPos=a,u},s.prototype.generateHuffmanTable=function(t){for(var e=t.length,i=0,r=0;r<e;++r)t[r]>i&&(i=t[r]);for(var n=1<<i,o=new Uint32Array(n),s=1,a=0,l=2;s<=i;++s,a<<=1,l<<=1)for(var h=0;h<e;++h)if(t[h]==s){var c=0,u=a;for(r=0;r<s;++r)c=c<<1|1&u,u>>=1;for(r=c;r<n;r+=l)o[r]=s<<16|h;++a}return[o,i]},s.prototype.readBlock=function(){function s(t,e,i,r,n){for(var o=t.getBits(i)+r;0<o--;)e[p++]=n}var a=this.getBits(3);if(1&a&&(this.eof=!0),0!=(a>>=1)){var l,h;if(1==a)l=r,h=n;else if(2==a){for(var c=this.getBits(5)+257,u=this.getBits(5)+1,f=this.getBits(4)+4,d=Array(t.length),p=0;p<f;)d[t[p++]]=this.getBits(3);for(var g=this.generateHuffmanTable(d),m=0,v=(p=0,c+u),b=new Array(v);p<v;){var y=this.getCode(g);16==y?s(this,b,2,3,m):17==y?s(this,b,3,3,m=0):18==y?s(this,b,7,11,m=0):b[p++]=m=y}l=this.generateHuffmanTable(b.slice(0,c)),h=this.generateHuffmanTable(b.slice(c,v))}else o("Unknown block type in flate stream");for(var x=(E=this.buffer)?E.length:0,w=this.bufferLength;;){var _=this.getCode(l);if(_<256)x<=w+1&&(x=(E=this.ensureBuffer(w+1)).length),E[w++]=_;else{if(256==_)return void(this.bufferLength=w);var S=(_=e[_-=257])>>16;0<S&&(S=this.getBits(S)),m=(65535&_)+S,_=this.getCode(h),0<(S=(_=i[_])>>16)&&(S=this.getBits(S));var C=(65535&_)+S;x<=w+m&&(x=(E=this.ensureBuffer(w+m)).length);for(var A=0;A<m;++A,++w)E[w]=E[w-C]}}}else{var L,T=this.bytes,k=this.bytesPos;void 0===(L=T[k++])&&o("Bad block header in flate stream");var O=L;void 0===(L=T[k++])&&o("Bad block header in flate stream"),O|=L<<8,void 0===(L=T[k++])&&o("Bad block header in flate stream");var N=L;void 0===(L=T[k++])&&o("Bad block header in flate stream"),(N|=L<<8)!=(65535&~O)&&o("Bad uncompressed block length in flate stream"),this.codeBuf=0,this.codeSize=0;var P=this.bufferLength,E=this.ensureBuffer(P+O),F=P+O;this.bufferLength=F;for(var j=P;j<F;++j){if(void 0===(L=T[k++])){this.eof=!0;break}E[j]=L}this.bytesPos=k}},s}function o(t){throw new Error(t)}function s(t){var e=0,i=t[e++],r=t[e++];-1!=i&&-1!=r||o("Invalid header in flate stream"),8!=(15&i)&&o("Unknown compression method in flate stream"),((i<<8)+r)%31!=0&&o("Bad FCHECK in flate stream"),32&r&&o("FDICT bit set in flate stream"),this.bytes=t,this.bytesPos=2,this.codeSize=0,this.codeBuf=0,It.call(this)}}();window.tmp=Mt},void 0===(n=r.call(e,i,e,t))||(t.exports=n);try{t.exports=jsPDF}catch(t){}},735:(t,e,i)=>{var r=i(379),n=i(170);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.id,n,""]]);r(n,{insert:"head",singleton:!1}),t.exports=n.locals||{}},638:(t,e,i)=>{var r=i(379),n=i(274);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[t.id,n,""]]);r(n,{insert:"head",singleton:!1}),t.exports=n.locals||{}},379:(t,e,i)=>{"use strict";var r,n=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),o=[];function s(t){for(var e=-1,i=0;i<o.length;i++)if(o[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},r=[],n=0;n<t.length;n++){var a=t[n],l=e.base?a[0]+e.base:a[0],h=i[l]||0,c="".concat(l," ").concat(h);i[l]=h+1;var u=s(c),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(o[u].references++,o[u].updater(f)):o.push({identifier:c,updater:g(f,e),references:1}),r.push(c)}return r}function l(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=i.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=n(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,c=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,i,r){var n=i?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=c(e,n);else{var o=document.createTextNode(n),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function f(t,e,i){var r=i.css,n=i.media,o=i.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,p=0;function g(t,e){var i,r,n;if(e.singleton){var o=p++;i=d||(d=l(e)),r=u.bind(null,i,o,!1),n=u.bind(null,i,o,!0)}else i=l(e),r=f.bind(null,i,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<i.length;r++){var n=s(i[r]);o[n].references--}for(var l=a(t,e),h=0;h<i.length;h++){var c=s(i[h]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}i=l}}}},722:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.color="#535353",this.map=t}create(){this.updateValues(),void 0!==this.map?(this.map.on("resize",this.mapResize.bind(this)),this.createCanvas(this.map.getCanvasContainer())):console.error("map object is null")}updateValues(){var t,e;this.width=null===(t=this.map)||void 0===t?void 0:t.getCanvas().clientWidth,this.height=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientHeight}mapResize(){this.updateValues(),this.updateCanvas()}updateCanvas(){if(void 0!==this.svgCanvas&&void 0!==this.yLine&&void 0!==this.xLine&&void 0!==this.width&&void 0!==this.height){this.svgCanvas.setAttribute("width",`${this.width}px`),this.svgCanvas.setAttribute("height",`${this.height}px`);const t=this.width/2,e=this.height/2;this.yLine.setAttribute("x1",`${t}px`),this.yLine.setAttribute("y1","0px"),this.yLine.setAttribute("x2",`${t}px`),this.yLine.setAttribute("y2",`${this.height}px`),this.xLine.setAttribute("x1","0px"),this.xLine.setAttribute("y1",`${e}px`),this.xLine.setAttribute("x2",`${this.width}px`),this.xLine.setAttribute("y2",`${e}px`)}else console.error("element value is null")}createCanvas(t){if(void 0!==this.width&&void 0!==this.height){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.style.position="relative",e.setAttribute("width",`${this.width}px`),e.setAttribute("height",`${this.height}px`);const i=this.width/2,r=this.height/2;this.yLine=e.appendChild(this.createLine(i,0,i,this.height,this.color,"2px")),this.xLine=e.appendChild(this.createLine(0,r,this.width,r,this.color,"2px")),null==t||t.appendChild(e),this.svgCanvas=e}}createLine(t,e,i,r,n,o){const s=document.createElementNS("http://www.w3.org/2000/svg","line");return s.setAttribute("x1",t),s.setAttribute("y1",e),s.setAttribute("x2",i),s.setAttribute("y2",r),s.setAttribute("stroke-dasharray","5,5"),s.setAttribute("stroke",n),s.setAttribute("stroke-width",o),s}destroy(){void 0!==this.xLine&&(this.xLine.remove(),this.xLine=void 0),void 0!==this.yLine&&(this.yLine.remove(),this.yLine=void 0),void 0!==this.svgCanvas&&(this.svgCanvas.remove(),this.svgCanvas=void 0),void 0!==this.map&&(this.map.off("resize",this.mapResize),this.map=void 0)}}},337:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(722),n=i(927);e.default=class{constructor(t){this.options={PageSize:n.Size.A4,PageOrientation:n.PageOrientation.Landscape,Format:n.Format.PDF,DPI:n.DPI[300],Crosshair:!1},t&&(this.options=Object.assign(this.options,t)),this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}onAdd(t){this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.exportContainer=document.createElement("div"),this.exportContainer.classList.add("maplibregl-export-list"),this.exportButton=document.createElement("button"),this.exportButton.classList.add("maplibregl-ctrl-icon"),this.exportButton.classList.add("maplibregl-export-control"),this.exportButton.addEventListener("click",(()=>{this.exportButton.style.display="none",this.exportContainer.style.display="block",this.toggleCrosshair(!0)})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.exportButton),this.controlContainer.appendChild(this.exportContainer);const e=document.createElement("TABLE");e.className="print-table";const i=this.createSelection(n.Size,"Page Size","page-size",this.options.PageSize,((t,e)=>JSON.stringify(t[e])));e.appendChild(i);const r=this.createSelection(n.PageOrientation,"Page Orientation","page-orientaiton",this.options.PageOrientation,((t,e)=>t[e]));e.appendChild(r);const o=this.createSelection(n.Format,"Format","format-type",this.options.Format,((t,e)=>t[e]));e.appendChild(o);const s=this.createSelection(n.DPI,"DPI","dpi-type",this.options.DPI,((t,e)=>t[e]));e.appendChild(s),this.exportContainer.appendChild(e);const a=document.createElement("button");return a.textContent="Generate",a.classList.add("generate-button"),a.addEventListener("click",(()=>{const e=document.getElementById("mapbox-gl-export-page-size"),i=document.getElementById("mapbox-gl-export-page-orientaiton"),r=document.getElementById("mapbox-gl-export-format-type"),o=document.getElementById("mapbox-gl-export-dpi-type"),s=i.value;let a=JSON.parse(e.value);s===n.PageOrientation.Portrait&&(a=a.reverse()),new n.default(t,a,Number(o.value),r.value,n.Unit.mm).generate()})),this.exportContainer.appendChild(a),this.controlContainer}createSelection(t,e,i,r,n){const o=document.createElement("label");o.textContent=e;const s=document.createElement("select");s.setAttribute("id",`mapbox-gl-export-${i}`),s.style.width="100%",Object.keys(t).forEach((e=>{const o=document.createElement("option");o.setAttribute("value",n(t,e)),o.appendChild(document.createTextNode(e)),o.setAttribute("name",i),r===t[e]&&(o.selected=!0),s.appendChild(o)}));const a=document.createElement("TR"),l=document.createElement("TD"),h=document.createElement("TD");return l.appendChild(o),h.appendChild(s),a.appendChild(l),a.appendChild(h),a}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.exportButton&&(this.exportButton.removeEventListener("click",this.onDocumentClick),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0),this.map=void 0)}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.exportContainer&&this.exportButton&&(this.exportContainer.style.display="none",this.exportButton.style.display="block",this.toggleCrosshair(!1))}toggleCrosshair(t){!0===this.options.Crosshair&&(!1===t?void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0):(this.crosshair=new r.default(this.map),this.crosshair.create()))}}},620:(t,e,i)=>{"use strict";e.g8=e.ED=e.gf=e.$u=e.Fk=void 0;var r=i(337);Object.defineProperty(e,"Fk",{enumerable:!0,get:function(){return r.default}});var n=i(927);Object.defineProperty(e,"$u",{enumerable:!0,get:function(){return n.Size}}),Object.defineProperty(e,"gf",{enumerable:!0,get:function(){return n.PageOrientation}}),Object.defineProperty(e,"ED",{enumerable:!0,get:function(){return n.Format}}),Object.defineProperty(e,"g8",{enumerable:!0,get:function(){return n.DPI}})},927:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DPI=e.PageOrientation=e.Size=e.Unit=e.Format=void 0;const r=i(326),n=i(162),o=i(431);i(245);const s=i(777);e.Format={JPEG:"jpg",PNG:"png",PDF:"pdf",SVG:"svg"},e.Unit={in:"in",mm:"mm"},e.Size={A2:[594,420],A3:[420,297],A4:[297,210],A5:[210,148],A6:[148,105],B2:[707,500],B3:[500,353],B4:[353,250],B5:[250,176],B6:[176,125]},e.PageOrientation={Landscape:"landscape",Portrait:"portrait"},e.DPI={72:72,96:96,200:200,300:300,400:400},e.default=class{constructor(t,i=e.Size.A4,r=300,n=e.Format.PNG.toString(),o=e.Unit.mm){this.map=t,this.width=i[0],this.height=i[1],this.dpi=r,this.format=n,this.unit=o}generate(){const t=this;JsLoadingOverlay.show({overlayBackgroundColor:"#5D5959",overlayOpacity:"0.6",spinnerIcon:"ball-spin",spinnerColor:"#2400FD",spinnerSize:"2x",overlayIDName:"overlay",spinnerIDName:"spinner",offsetX:0,offsetY:0,containerID:null,lockScroll:!1,overlayZIndex:9998,spinnerZIndex:9999});const i=window.devicePixelRatio;Object.defineProperty(window,"devicePixelRatio",{get:()=>t.dpi/96});const r=document.createElement("div");r.className="hidden-map",document.body.appendChild(r);const n=document.createElement("div");n.style.width=this.toPixels(this.width),n.style.height=this.toPixels(this.height),r.appendChild(n);const s=new o.Map({accessToken:o.accessToken,container:n,center:this.map.getCenter(),zoom:this.map.getZoom(),bearing:this.map.getBearing(),pitch:this.map.getPitch(),interactive:!1,preserveDrawingBuffer:!0,fadeDuration:0,attributionControl:!1,transformRequest:this.map._requestManager._transformRequestFn}),a=this.map.getStyle();if(a&&a.sources){const t=a.sources;Object.keys(t).forEach((e=>{const i=t[e];Object.keys(i).forEach((t=>{i[t]||delete i[t]}))}))}s.setStyle(a),s.once("idle",(()=>{var n;const o=s.getCanvas(),a=`map.${t.format}`;switch(t.format){case e.Format.PNG:t.toPNG(o,a);break;case e.Format.JPEG:t.toJPEG(o,a);break;case e.Format.PDF:t.toPDF(s,a);break;case e.Format.SVG:t.toSVG(o,a);break;default:console.error(`Invalid file format: ${t.format}`)}s.remove(),null===(n=r.parentNode)||void 0===n||n.removeChild(r),Object.defineProperty(window,"devicePixelRatio",{get:()=>i}),JsLoadingOverlay.hide()}))}toPNG(t,e){t.toBlob((t=>{n.saveAs(t,e)}))}toJPEG(t,e){const i=t.toDataURL("image/jpeg",.85);if(t.msToBlob){const t=this.toBlob(i);window.navigator.msSaveBlob(t,e)}else{const t=document.createElement("a");t.href=i,t.download=e,t.click(),t.remove()}}toPDF(t,e){const i=t.getCanvas(),n=new r({orientation:this.width>this.height?"l":"p",unit:this.unit,compress:!0});n.addImage(i.toDataURL("image/png"),"png",0,0,this.width,this.height,null,"FAST");const{lng:o,lat:s}=t.getCenter();n.setProperties({title:t.getStyle().name,subject:`center: [${o}, ${s}], zoom: ${t.getZoom()}`,creator:"Mapbox GL Export Plugin",author:"(c)Mapbox, (c)OpenStreetMap"}),n.save(e)}toSVG(t,e){const i=t.toDataURL("image/png");s.fabric.Image.fromURL(i,(t=>{const i=new s.fabric.Canvas("canvas"),r=Number(this.toPixels(this.width,this.dpi).replace("px","")),n=Number(this.toPixels(this.height,this.dpi).replace("px",""));t.scaleToWidth(r),t.scaleToHeight(n),i.add(t);const o=i.toSVG({x:0,y:0,width:r,height:n,viewBox:{x:0,y:0,width:r,height:n}}),a=document.createElement("a");a.href=`data:application/xml,${encodeURIComponent(o)}`,a.download=e,a.click(),a.remove()}))}toPixels(t,i=96){return this.unit===e.Unit.mm&&(i/=25.4),i*t+"px"}toBlob(t){const e=atob(t.replace(/^.*,/,"")),i=new Uint8Array(e.length);for(let t=0;t<e.length;t+=1)i[t]=e.charCodeAt(t);return new Blob([i.buffer],{type:"image/png"})}}},431:t=>{"use strict";t.exports=maplibregl},960:()=>{},759:()=>{},272:()=>{}},e={};function i(r){var n=e[r];if(void 0!==n)return n.exports;var o=e[r]={id:r,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=i(431),e=(i(638),i(620));i(735),(()=>{const i=new t.Map({container:"map",style:"https://narwassco.github.io/mapbox-stylefiles/unvt/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});i.addControl(new t.NavigationControl,"top-right"),i.addControl(new e.Fk({PageSize:e.$u.A3,PageOrientation:e.gf.Portrait,Format:e.ED.PNG,DPI:e.g8[96],Crosshair:!0}),"top-right")})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,